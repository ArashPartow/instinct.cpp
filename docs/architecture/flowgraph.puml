@startuml
!include  <C4/C4_Context.puml>

package flowgraph {

interface Context {
    Iterable<std::string> GetKeys();
}

interface SyncContext extends Context {
    <T> Optional<T> Get(Type<T> type, String name);
    <T> void Put(Type<T> type, String name), T value);
}


interface BatchSyncContext extends Context {
    <T> Iterator<T> GetAll(Type<T> type, String name);
    <T> void PutAll(Type<T> type, String name, List<T> values);
}


interface StreamSyncContext extends Context {
    <T> Optional<T> Get(Type<T> type, String name);
    <T> PutChunks(Type<T> type, String name, List<T> chunks);
}


interface TopologyAware {
    List<GraphNode> sort();
}

interface FlowGraph extends TopologyAware, Invocable {
    void accept(FlowGraphVisitor v)
}

interface GraphNode {
    void accept(FlowGraphVisitor v)
}

interface Invocable {
    void invoke(SyncContext ctx)
    void batch(BatchSyncContext ctx)
    void stream(StreamSyncContext ctx)
}

interface InvocableGraphNode extends GraphNode, Invocable


class LambdaGraphNode<Fn> implements InvocableGraphNode

class JoinGraphNode extends InvocableGraphNode

FlowGraph --* GraphNode

interface FlowGraphVisitor {
    void visit(FlowGraph graph)
    void visit(InvocableGraphNode node)
}

class TaskflowBuilderVisitor implements FlowGraphVisitor {
    Taskflow getTaskflow()
}

interface FlowGraphExecutor {
    <T> T invoke(SyncContext ctx);
    <T> Iterable<T> batch(BatchSyncContext ctx);
    <T> Iterable<T> stream(StreamSyncContext ctx);
}


class TaskflowFlowGraphExecutor implements FlowGraphExecutor {
}

}

TaskflowFlowGraphExecutor --  "1" TaskflowBuilderVisitor
TaskflowFlowGraphExecutor -- "1" FlowGraph



package llm {
    interface BaseLLM extends flowgraph.InvocableGraphNode
}




@enduml
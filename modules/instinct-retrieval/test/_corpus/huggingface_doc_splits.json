[
  {
    "chunk_size": 200,
    "chunk_overlap": 0,
    "limit": 10,
    "texts": [
      "Create an Endpoint\n\nAfter your first login, you will be directed to the [Endpoint creation page](https://ui.endpoints.huggingface.co/new). As an example, this guide will go through the steps to deploy [distilbert-base-uncased-finetuned-sst-2-english](https://huggingface.co/distilbert-base-uncased-finetuned-sst-2-english) for text classification. \n\n## 1. Enter the Hugging Face Repository ID and your desired endpoint name:\n\n<img src=\"https://raw.githubusercontent.com/huggingface/hf-endpoints-documentation/main/assets/1_repository.png\" alt=\"select repository\" />",
      "## 2. Select your Cloud Provider and region. Initially, only AWS will be available as a Cloud Provider with the `us-east-1` and `eu-west-1` regions. We will add Azure soon, and if you need to test Endpoints with other Cloud Providers or regions, please let us know.\n\n<img src=\"https://raw.githubusercontent.com/huggingface/hf-endpoints-documentation/main/assets/1_region.png\" alt=\"select region\" />\n\n## 3. Define the [Security Level](security) for the Endpoint:\n\n<img src=\"https://raw.githubusercontent.com/huggingface/hf-endpoints-documentation/main/assets/1_security.png\" alt=\"define security\" />",
      "## 4. Create your Endpoint by clicking **Create Endpoint**. By default, your Endpoint is created with a medium CPU (2 x 4GB vCPUs with Intel Xeon Ice Lake) The cost estimate assumes the Endpoint will be up for an entire month, and does not take autoscaling into account.\n\n<img src=\"https://raw.githubusercontent.com/huggingface/hf-endpoints-documentation/main/assets/1_create_cost.png\" alt=\"create endpoint\" />\n\n## 5. Wait for the Endpoint to build, initialize and run which can take between 1 to 5 minutes.\n\n<img src=\"https://raw.githubusercontent.com/huggingface/hf-endpoints-documentation/main/assets/overview.png\" alt=\"overview\" />\n\n## 6. Test your Endpoint in the overview with the Inference widget \ud83c\udfc1 \ud83c\udf89!",
      "<img src=\"https://raw.githubusercontent.com/huggingface/hf-endpoints-documentation/main/assets/1_inference.png\" alt=\"run inference\" />",
      "Choosing a metric for your task\n\n**So you've trained your model and want to see how well it\u2019s doing on a dataset of your choice. Where do you start?**\n\nThere is no \u201cone size fits all\u201d approach to choosing an evaluation metric, but some good guidelines to keep in mind are:\n\n## Categories of metrics\n\nThere are 3 high-level categories of metrics:",
      "1. *Generic metrics*, which can be applied to a variety of situations and datasets, such as precision and accuracy.\n2. *Task-specific metrics*, which are limited to a given task, such as Machine Translation (often evaluated using metrics [BLEU](https://huggingface.co/metrics/bleu) or [ROUGE](https://huggingface.co/metrics/rouge)) or Named Entity Recognition (often evaluated with [seqeval](https://huggingface.co/metrics/seqeval)).\n3. *Dataset-specific metrics*, which aim to measure model performance on specific benchmarks: for instance, the [GLUE benchmark](https://huggingface.co/datasets/glue) has a dedicated [evaluation metric](https://huggingface.co/metrics/glue).\n\nLet's look at each of these three cases:\n\n### Generic metrics",
      "Many of the metrics used in the Machine Learning community are quite generic and can be applied in a variety of tasks and datasets.\n\nThis is the case for metrics like [accuracy](https://huggingface.co/metrics/accuracy) and [precision](https://huggingface.co/metrics/precision), which can be used for evaluating labeled (supervised) datasets, as well as [perplexity](https://huggingface.co/metrics/perplexity), which can be used for evaluating different kinds of (unsupervised) generative tasks.",
      "To see the input structure of a given metric, you can look at its metric card. For example, in the case of [precision](https://huggingface.co/metrics/precision), the format is:\n```\n>>> precision_metric = evaluate.load(\"precision\")\n>>> results = precision_metric.compute(references=[0, 1], predictions=[0, 1])\n>>> print(results)\n{'precision': 1.0}\n```\n\n### Task-specific metrics",
      "Popular ML tasks like Machine Translation and Named Entity Recognition have specific metrics that can be used to compare models. For example, a series of different metrics have been proposed for text generation, ranging from [BLEU](https://huggingface.co/metrics/bleu) and its derivatives such as [GoogleBLEU](https://huggingface.co/metrics/google_bleu) and [GLEU](https://huggingface.co/metrics/gleu), but also [ROUGE](https://huggingface.co/metrics/rouge), [MAUVE](https://huggingface.co/metrics/mauve), etc.\n\nYou can find the right metric for your task by:",
      "- **Looking at the [Task pages](https://huggingface.co/tasks)** to see what metrics can be used for evaluating models for a given task.\n- **Checking out leaderboards** on sites like [Papers With Code](https://paperswithcode.com/) (you can search by task and by dataset).\n-  **Reading the metric cards** for the relevant metrics and see which ones are a good fit for your use case. For example, see the [BLEU metric card](https://github.com/huggingface/evaluate/tree/main/metrics/bleu) or [SQuaD metric card](https://github.com/huggingface/evaluate/tree/main/metrics/squad).\n- **Looking at papers and blog posts** published on the topic and see what metrics they report. This can change over time, so try to pick papers from the last couple of years!\n\n### Dataset-specific metrics",
      "Some datasets have specific metrics associated with them -- this is especially in the case of popular benchmarks like [GLUE](https://huggingface.co/metrics/glue) and [SQuAD](https://huggingface.co/metrics/squad).\n\n<Tip warning={true}>\n\ud83d\udca1\nGLUE is actually a collection of different subsets on different tasks, so first you need to choose the one that corresponds to the NLI task, such as mnli, which is described as \u201ccrowdsourced collection of sentence pairs with textual entailment annotations\u201d\n</Tip>",
      "If you are evaluating your model on a benchmark dataset like the ones mentioned above, you can use its dedicated evaluation metric. Make sure you respect the format that they require. For example, to evaluate your model on the [SQuAD](https://huggingface.co/datasets/squad) dataset, you need to feed the `question` and `context` into your model and return the `prediction_text`, which should be compared with the `references` (based on matching the `id` of the question) :",
      "```\n>>> from evaluate import load\n>>> squad_metric = load(\"squad\")\n>>> predictions = [{'prediction_text': '1976', 'id': '56e10a3be3433e1400422b22'}]\n>>> references = [{'answers': {'answer_start': [97], 'text': ['1976']}, 'id': '56e10a3be3433e1400422b22'}]\n>>> results = squad_metric.compute(predictions=predictions, references=references)\n>>> results\n{'exact_match': 100.0, 'f1': 100.0}\n```\n\nYou can find examples of dataset structures by consulting the \"Dataset Preview\" function or the dataset card for a given dataset, and you can see how to use its dedicated evaluation function based on the metric card.",
      "\u4e3b\u8981\u7279\u70b9\n\n\u8ba9\u6211\u4eec\u6765\u4ecb\u7ecd\u4e00\u4e0b Gradio \u6700\u53d7\u6b22\u8fce\u7684\u4e00\u4e9b\u529f\u80fd\uff01\u8fd9\u91cc\u662f Gradio \u7684\u4e3b\u8981\u7279\u70b9\uff1a\n\n1. [\u6dfb\u52a0\u793a\u4f8b\u8f93\u5165](#example-inputs)\n2. [\u4f20\u9012\u81ea\u5b9a\u4e49\u9519\u8bef\u6d88\u606f](#errors)\n3. [\u6dfb\u52a0\u63cf\u8ff0\u5185\u5bb9](#descriptive-content)\n4. [\u8bbe\u7f6e\u65d7\u6807](#flagging)\n5. [\u9884\u5904\u7406\u548c\u540e\u5904\u7406](#preprocessing-and-postprocessing)\n6. [\u6837\u5f0f\u5316\u6f14\u793a](#styling)\n7. [\u6392\u961f\u7528\u6237](#queuing)\n8. [\u8fed\u4ee3\u8f93\u51fa](#iterative-outputs)\n9. [\u8fdb\u5ea6\u6761](#progress-bars)\n10. [\u6279\u5904\u7406\u51fd\u6570](#batch-functions)\n11. [\u5728\u534f\u4f5c\u7b14\u8bb0\u672c\u4e0a\u8fd0\u884c](#colab-notebooks)\n\n## \u793a\u4f8b\u8f93\u5165",
      "\u60a8\u53ef\u4ee5\u63d0\u4f9b\u7528\u6237\u53ef\u4ee5\u8f7b\u677e\u52a0\u8f7d\u5230 \"Interface\" \u4e2d\u7684\u793a\u4f8b\u6570\u636e\u3002\u8fd9\u5bf9\u4e8e\u6f14\u793a\u6a21\u578b\u671f\u671b\u7684\u8f93\u5165\u7c7b\u578b\u4ee5\u53ca\u6f14\u793a\u6570\u636e\u96c6\u548c\u6a21\u578b\u4e00\u8d77\u63a2\u7d22\u7684\u65b9\u5f0f\u975e\u5e38\u6709\u5e2e\u52a9\u3002\u8981\u52a0\u8f7d\u793a\u4f8b\u6570\u636e\uff0c\u60a8\u53ef\u4ee5\u5c06\u5d4c\u5957\u5217\u8868\u63d0\u4f9b\u7ed9 Interface \u6784\u9020\u51fd\u6570\u7684 `examples=` \u5173\u952e\u5b57\u53c2\u6570\u3002\u5916\u90e8\u5217\u8868\u4e2d\u7684\u6bcf\u4e2a\u5b50\u5217\u8868\u8868\u793a\u4e00\u4e2a\u6570\u636e\u6837\u672c\uff0c\u5b50\u5217\u8868\u4e2d\u7684\u6bcf\u4e2a\u5143\u7d20\u8868\u793a\u6bcf\u4e2a\u8f93\u5165\u7ec4\u4ef6\u7684\u8f93\u5165\u3002\u6709\u5173\u6bcf\u4e2a\u7ec4\u4ef6\u7684\u793a\u4f8b\u6570\u636e\u683c\u5f0f\u5728[Docs](https://gradio.app/docs#components)\u4e2d\u6709\u8bf4\u660e\u3002\n\n$code_calculator\n$demo_calculator",
      "\u60a8\u53ef\u4ee5\u5c06\u5927\u578b\u6570\u636e\u96c6\u52a0\u8f7d\u5230\u793a\u4f8b\u4e2d\uff0c\u901a\u8fc7 Gradio \u6d4f\u89c8\u548c\u4e0e\u6570\u636e\u96c6\u8fdb\u884c\u4ea4\u4e92\u3002\u793a\u4f8b\u5c06\u81ea\u52a8\u5206\u9875\uff08\u53ef\u4ee5\u901a\u8fc7 Interface \u7684 `examples_per_page` \u53c2\u6570\u8fdb\u884c\u914d\u7f6e\uff09\u3002\n\n\u7ee7\u7eed\u4e86\u89e3\u793a\u4f8b\uff0c\u8bf7\u53c2\u9605[\u66f4\u591a\u793a\u4f8b](https://gradio.app/more-on-examples)\u6307\u5357\u3002\n\n## \u9519\u8bef\n\n\u60a8\u5e0c\u671b\u5411\u7528\u6237\u4f20\u9012\u81ea\u5b9a\u4e49\u9519\u8bef\u6d88\u606f\u3002\u4e3a\u6b64\uff0cwith `gr.Error(\"custom message\")` \u6765\u663e\u793a\u9519\u8bef\u6d88\u606f\u3002\u5982\u679c\u5728\u4e0a\u9762\u7684\u8ba1\u7b97\u5668\u793a\u4f8b\u4e2d\u5c1d\u8bd5\u9664\u4ee5\u96f6\uff0c\u5c06\u663e\u793a\u81ea\u5b9a\u4e49\u9519\u8bef\u6d88\u606f\u7684\u5f39\u51fa\u6a21\u6001\u7a97\u53e3\u3002\u4e86\u89e3\u6709\u5173\u9519\u8bef\u7684\u66f4\u591a\u4fe1\u606f\uff0c\u8bf7\u53c2\u9605[\u6587\u6863](https://gradio.app/docs#error)\u3002\n\n## \u63cf\u8ff0\u6027\u5185\u5bb9",
      "\u5728\u524d\u9762\u7684\u793a\u4f8b\u4e2d\uff0c\u60a8\u53ef\u80fd\u5df2\u7ecf\u6ce8\u610f\u5230 Interface \u6784\u9020\u51fd\u6570\u4e2d\u7684 `title=` \u548c `description=` \u5173\u952e\u5b57\u53c2\u6570\uff0c\u5e2e\u52a9\u7528\u6237\u4e86\u89e3\u60a8\u7684\u5e94\u7528\u7a0b\u5e8f\u3002\n\nInterface \u6784\u9020\u51fd\u6570\u4e2d\u6709\u4e09\u4e2a\u53c2\u6570\u7528\u4e8e\u6307\u5b9a\u6b64\u5185\u5bb9\u5e94\u653e\u7f6e\u5728\u54ea\u91cc\uff1a\n\n- `title`\uff1a\u63a5\u53d7\u6587\u672c\uff0c\u5e76\u53ef\u4ee5\u5c06\u5176\u663e\u793a\u5728\u754c\u9762\u7684\u9876\u90e8\uff0c\u4e5f\u5c06\u6210\u4e3a\u9875\u9762\u6807\u9898\u3002\n- `description`\uff1a\u63a5\u53d7\u6587\u672c\u3001Markdown \u6216 HTML\uff0c\u5e76\u5c06\u5176\u653e\u7f6e\u5728\u6807\u9898\u6b63\u4e0b\u65b9\u3002\n- `article`\uff1a\u4e5f\u63a5\u53d7\u6587\u672c\u3001Markdown \u6216 HTML\uff0c\u5e76\u5c06\u5176\u653e\u7f6e\u5728\u754c\u9762\u4e0b\u65b9\u3002\n\n![annotated](/assets/guides/annotated.png)",
      "\u5982\u679c\u60a8\u4f7f\u7528\u7684\u662f `Blocks` API\uff0c\u5219\u53ef\u4ee5 with `gr.Markdown(...)` \u6216 `gr.HTML(...)` \u7ec4\u4ef6\u5728\u4efb\u4f55\u4f4d\u7f6e\u63d2\u5165\u6587\u672c\u3001Markdown \u6216 HTML\uff0c\u5176\u4e2d\u63cf\u8ff0\u6027\u5185\u5bb9\u4f4d\u4e8e `Component` \u6784\u9020\u51fd\u6570\u5185\u90e8\u3002\n\n\u53e6\u4e00\u4e2a\u6709\u7528\u7684\u5173\u952e\u5b57\u53c2\u6570\u662f `label=`\uff0c\u5b83\u5b58\u5728\u4e8e\u6bcf\u4e2a `Component` \u4e2d\u3002\u8fd9\u4fee\u6539\u4e86\u6bcf\u4e2a `Component` \u9876\u90e8\u7684\u6807\u7b7e\u6587\u672c\u3002\u8fd8\u53ef\u4ee5\u4e3a\u8bf8\u5982 `Textbox` \u6216 `Radio` \u4e4b\u7c7b\u7684\u8868\u5355\u5143\u7d20\u6dfb\u52a0 `info=` \u5173\u952e\u5b57\u53c2\u6570\uff0c\u4ee5\u63d0\u4f9b\u6709\u5173\u5176\u7528\u6cd5\u7684\u8fdb\u4e00\u6b65\u4fe1\u606f\u3002\n\n```python\ngr.Number(label='\u5e74\u9f84', info='\u4ee5\u5e74\u4e3a\u5355\u4f4d\uff0c\u5fc5\u987b\u5927\u4e8e0')\n```\n\n## \u65d7\u6807",
      "\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\"Interface\" \u5c06\u6709\u4e00\u4e2a \"Flag\" \u6309\u94ae\u3002\u5f53\u7528\u6237\u6d4b\u8bd5\u60a8\u7684 `Interface` \u65f6\uff0c\u5982\u679c\u770b\u5230\u6709\u8da3\u7684\u8f93\u51fa\uff0c\u4f8b\u5982\u9519\u8bef\u6216\u610f\u5916\u7684\u6a21\u578b\u884c\u4e3a\uff0c\u4ed6\u4eec\u53ef\u4ee5\u5c06\u8f93\u5165\u6807\u8bb0\u4e3a\u60a8\u8fdb\u884c\u67e5\u770b\u3002\u5728\u7531 `Interface` \u6784\u9020\u51fd\u6570\u7684 `flagging_dir=` \u53c2\u6570\u63d0\u4f9b\u7684\u76ee\u5f55\u4e2d\uff0c\u5c06\u8bb0\u5f55\u6807\u8bb0\u7684\u8f93\u5165\u5230\u4e00\u4e2a CSV \u6587\u4ef6\u4e2d\u3002\u5982\u679c\u754c\u9762\u6d89\u53ca\u6587\u4ef6\u6570\u636e\uff0c\u4f8b\u5982\u56fe\u50cf\u548c\u97f3\u9891\u7ec4\u4ef6\uff0c\u5c06\u521b\u5efa\u6587\u4ef6\u5939\u6765\u5b58\u50a8\u8fd9\u4e9b\u6807\u8bb0\u7684\u6570\u636e\u3002\n\n\u4f8b\u5982\uff0c\u5bf9\u4e8e\u4e0a\u9762\u663e\u793a\u7684\u8ba1\u7b97\u5668\u754c\u9762\uff0c\u6211\u4eec\u5c06\u5728\u4e0b\u9762\u7684\u65d7\u6807\u76ee\u5f55\u4e2d\u5b58\u50a8\u6807\u8bb0\u7684\u6570\u636e\uff1a\n\n```directory\n+-- calculator.py\n+-- flagged/\n|   +-- logs.csv\n```\n\n_flagged/logs.csv_",
      "```csv\nnum1,operation,num2,Output\n5,add,7,12\n6,subtract,1.5,4.5\n```\n\n\u4e0e\u65e9\u671f\u663e\u793a\u7684\u51b7\u8272\u754c\u9762\u76f8\u5bf9\u5e94\uff0c\u6211\u4eec\u5c06\u5728\u4e0b\u9762\u7684\u65d7\u6807\u76ee\u5f55\u4e2d\u5b58\u50a8\u6807\u8bb0\u7684\u6570\u636e\uff1a\n\n```directory\n+-- sepia.py\n+-- flagged/\n|   +-- logs.csv\n|   +-- im/\n|   |   +-- 0.png\n|   |   +-- 1.png\n|   +-- Output/\n|   |   +-- 0.png\n|   |   +-- 1.png\n```\n\n_flagged/logs.csv_\n\n```csv\nim,Output\nim/0.png,Output/0.png\nim/1.png,Output/1.png\n```",
      "\u5982\u679c\u60a8\u5e0c\u671b\u7528\u6237\u63d0\u4f9b\u65d7\u6807\u539f\u56e0\uff0c\u53ef\u4ee5\u5c06\u5b57\u7b26\u4e32\u5217\u8868\u4f20\u9012\u7ed9 Interface \u7684 `flagging_options` \u53c2\u6570\u3002\u7528\u6237\u5728\u8fdb\u884c\u65d7\u6807\u65f6\u5fc5\u987b\u9009\u62e9\u5176\u4e2d\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u8fd9\u5c06\u4f5c\u4e3a\u9644\u52a0\u5217\u4fdd\u5b58\u5230 CSV \u4e2d\u3002\n\n## \u9884\u5904\u7406\u548c\u540e\u5904\u7406 (Preprocessing and Postprocessing)\n\n![annotated](/assets/img/dataflow.svg)\n\n\u5982\u60a8\u6240\u89c1\uff0cGradio \u5305\u62ec\u53ef\u4ee5\u5904\u7406\u5404\u79cd\u4e0d\u540c\u6570\u636e\u7c7b\u578b\u7684\u7ec4\u4ef6\uff0c\u4f8b\u5982\u56fe\u50cf\u3001\u97f3\u9891\u548c\u89c6\u9891\u3002\u5927\u591a\u6570\u7ec4\u4ef6\u90fd\u53ef\u4ee5\u7528\u4f5c\u8f93\u5165\u6216\u8f93\u51fa\u3002",
      "\u5f53\u7ec4\u4ef6\u7528\u4f5c\u8f93\u5165\u65f6\uff0cGradio \u81ea\u52a8\u5904\u7406*\u9884\u5904\u7406*\uff0c\u5c06\u6570\u636e\u4ece\u7528\u6237\u6d4f\u89c8\u5668\u53d1\u9001\u7684\u7c7b\u578b\uff08\u4f8b\u5982\u7f51\u7edc\u6444\u50cf\u5934\u5feb\u7167\u7684 base64 \u8868\u793a\uff09\u8f6c\u6362\u4e3a\u60a8\u7684\u51fd\u6570\u53ef\u4ee5\u63a5\u53d7\u7684\u5f62\u5f0f\uff08\u4f8b\u5982 `numpy` \u6570\u7ec4\uff09\u3002\n\n\u540c\u6837\uff0c\u5f53\u7ec4\u4ef6\u7528\u4f5c\u8f93\u51fa\u65f6\uff0cGradio \u81ea\u52a8\u5904\u7406*\u540e\u5904\u7406*\uff0c\u5c06\u6570\u636e\u4ece\u51fd\u6570\u8fd4\u56de\u7684\u5f62\u5f0f\uff08\u4f8b\u5982\u56fe\u50cf\u8def\u5f84\u5217\u8868\uff09\u8f6c\u6362\u4e3a\u53ef\u4ee5\u5728\u7528\u6237\u6d4f\u89c8\u5668\u4e2d\u663e\u793a\u7684\u5f62\u5f0f\uff08\u4f8b\u5982\u4ee5 base64 \u683c\u5f0f\u663e\u793a\u56fe\u50cf\u7684 `Gallery`\uff09\u3002",
      "\u60a8\u53ef\u4ee5\u4f7f\u7528\u6784\u5efa\u56fe\u50cf\u7ec4\u4ef6\u65f6\u7684\u53c2\u6570\u63a7\u5236*\u9884\u5904\u7406*\u3002\u4f8b\u5982\uff0c\u5982\u679c\u60a8\u4f7f\u7528\u4ee5\u4e0b\u53c2\u6570\u5b9e\u4f8b\u5316 `Image` \u7ec4\u4ef6\uff0c\u5b83\u5c06\u5c06\u56fe\u50cf\u8f6c\u6362\u4e3a `PIL` \u7c7b\u578b\uff0c\u5e76\u5c06\u5176\u91cd\u5851\u4e3a`(100, 100)`\uff0c\u800c\u4e0d\u7ba1\u63d0\u4ea4\u65f6\u7684\u539f\u59cb\u5927\u5c0f\u5982\u4f55\uff1a\n\n```py\nimg = gr.Image(shape=(100, 100), type=\"pil\")\n```\n\n\u76f8\u53cd\uff0c\u8fd9\u91cc\u6211\u4eec\u4fdd\u7559\u56fe\u50cf\u7684\u539f\u59cb\u5927\u5c0f\uff0c\u4f46\u5728\u5c06\u5176\u8f6c\u6362\u4e3a numpy \u6570\u7ec4\u4e4b\u524d\u53cd\u8f6c\u989c\u8272\uff1a\n\n```py\nimg = gr.Image(invert_colors=True, type=\"numpy\")\n```",
      "\u540e\u5904\u7406\u8981\u5bb9\u6613\u5f97\u591a\uff01Gradio \u81ea\u52a8\u8bc6\u522b\u8fd4\u56de\u6570\u636e\u7684\u683c\u5f0f\uff08\u4f8b\u5982 `Image` \u662f `numpy` \u6570\u7ec4\u8fd8\u662f `str` \u6587\u4ef6\u8def\u5f84\uff1f\uff09\uff0c\u5e76\u5c06\u5176\u540e\u5904\u7406\u4e3a\u53ef\u4ee5\u7531\u6d4f\u89c8\u5668\u663e\u793a\u7684\u683c\u5f0f\u3002\n\n\u8bf7\u67e5\u770b[\u6587\u6863](https://gradio.app/docs)\uff0c\u4e86\u89e3\u6bcf\u4e2a\u7ec4\u4ef6\u7684\u6240\u6709\u4e0e\u9884\u5904\u7406\u76f8\u5173\u7684\u53c2\u6570\u3002\n\n## \u6837\u5f0f (Styling)\n\nGradio \u4e3b\u9898\u662f\u81ea\u5b9a\u4e49\u5e94\u7528\u7a0b\u5e8f\u5916\u89c2\u548c\u611f\u89c9\u7684\u6700\u7b80\u5355\u65b9\u6cd5\u3002\u60a8\u53ef\u4ee5\u9009\u62e9\u591a\u79cd\u4e3b\u9898\u6216\u521b\u5efa\u81ea\u5df1\u7684\u4e3b\u9898\u3002\u8981\u8fd9\u6837\u505a\uff0c\u8bf7\u5c06 `theme=` \u53c2\u6570\u4f20\u9012\u7ed9 `Interface` \u6784\u9020\u51fd\u6570\u3002\u4f8b\u5982\uff1a\n\n```python\ndemo = gr.Interface(..., theme=gr.themes.Monochrome())\n```",
      "Gradio \u5e26\u6709\u4e00\u7ec4\u9884\u5148\u6784\u5efa\u7684\u4e3b\u9898\uff0c\u60a8\u53ef\u4ee5\u4ece `gr.themes.*` \u52a0\u8f7d\u3002\u60a8\u53ef\u4ee5\u6269\u5c55\u8fd9\u4e9b\u4e3b\u9898\u6216\u4ece\u5934\u5f00\u59cb\u521b\u5efa\u81ea\u5df1\u7684\u4e3b\u9898 - \u6709\u5173\u66f4\u591a\u8be6\u7ec6\u4fe1\u606f\uff0c\u8bf7\u53c2\u9605[\u4e3b\u9898\u6307\u5357](https://gradio.app/theming-guide)\u3002\n\n\u8981\u589e\u52a0\u989d\u5916\u7684\u6837\u5f0f\u80fd\u529b\uff0c\u60a8\u53ef\u4ee5 with `css=` \u5173\u952e\u5b57\u5c06\u4efb\u4f55 CSS \u4f20\u9012\u7ed9\u60a8\u7684\u5e94\u7528\u7a0b\u5e8f\u3002\nGradio \u5e94\u7528\u7a0b\u5e8f\u7684\u57fa\u7c7b\u662f `gradio-container`\uff0c\u56e0\u6b64\u4ee5\u4e0b\u662f\u4e00\u4e2a\u66f4\u6539 Gradio \u5e94\u7528\u7a0b\u5e8f\u80cc\u666f\u989c\u8272\u7684\u793a\u4f8b\uff1a\n\n```python\nwith `gr.Interface(css=\".gradio-container {background-color: red}\") as demo:\n    ...\n```\n\n## \u961f\u5217 (Queuing)",
      "\u5982\u679c\u60a8\u7684\u5e94\u7528\u7a0b\u5e8f\u9884\u8ba1\u4f1a\u6709\u5927\u91cf\u6d41\u91cf\uff0c\u8bf7 with `queue()` \u65b9\u6cd5\u6765\u63a7\u5236\u5904\u7406\u901f\u7387\u3002\u8fd9\u5c06\u6392\u961f\u5904\u7406\u8c03\u7528\uff0c\u56e0\u6b64\u4e00\u6b21\u53ea\u5904\u7406\u4e00\u5b9a\u6570\u91cf\u7684\u8bf7\u6c42\u3002\u961f\u5217\u4f7f\u7528 Websockets\uff0c\u8fd8\u53ef\u4ee5\u9632\u6b62\u7f51\u7edc\u8d85\u65f6\uff0c\u56e0\u6b64\u5982\u679c\u60a8\u7684\u51fd\u6570\u7684\u63a8\u7406\u65f6\u95f4\u5f88\u957f\uff08> 1 \u5206\u949f\uff09\uff0c\u5e94\u4f7f\u7528\u961f\u5217\u3002\n\nwith `Interface`\uff1a\n\n```python\ndemo = gr.Interface(...).queue()\ndemo.launch()\n```\n\nwith `Blocks`\uff1a\n\n```python\nwith gr.Blocks() as demo\uff1a\n    #...\ndemo.queue()\ndemo.launch()\n```\n\n\u60a8\u53ef\u4ee5\u901a\u8fc7\u4ee5\u4e0b\u65b9\u5f0f\u63a7\u5236\u4e00\u6b21\u5904\u7406\u7684\u8bf7\u6c42\u6570\u91cf\uff1a\n\n```python\ndemo.queue(concurrency_count=3)\n```\n\n\u67e5\u770b\u6709\u5173\u914d\u7f6e\u5176\u4ed6\u961f\u5217\u53c2\u6570\u7684[\u961f\u5217\u6587\u6863](/docs/#queue)\u3002",
      "\u5728 Blocks \u4e2d\u6307\u5b9a\u4ec5\u5bf9\u67d0\u4e9b\u51fd\u6570\u8fdb\u884c\u6392\u961f\uff1a\n\n```python\nwith gr.Blocks() as demo2\uff1a\n    num1 = gr.Number()\n    num2 = gr.Number()\n    output = gr.Number()\n    gr.Button(\"Add\").click(\n        lambda a, b: a + b, [num1, num2], output)\n    gr.Button(\"Multiply\").click(\n        lambda a, b: a * b, [num1, num2], output, queue=True)\ndemo2.launch()\n```\n\n## \u8fed\u4ee3\u8f93\u51fa (Iterative Outputs)",
      "\u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\uff0c\u60a8\u53ef\u80fd\u9700\u8981\u4f20\u8f93\u4e00\u7cfb\u5217\u8f93\u51fa\u800c\u4e0d\u662f\u4e00\u6b21\u663e\u793a\u5355\u4e2a\u8f93\u51fa\u3002\u4f8b\u5982\uff0c\u60a8\u53ef\u80fd\u6709\u4e00\u4e2a\u56fe\u50cf\u751f\u6210\u6a21\u578b\uff0c\u5e0c\u671b\u663e\u793a\u751f\u6210\u7684\u6bcf\u4e2a\u6b65\u9aa4\u7684\u56fe\u50cf\uff0c\u76f4\u5230\u6700\u7ec8\u56fe\u50cf\u3002\u6216\u8005\u60a8\u53ef\u80fd\u6709\u4e00\u4e2a\u804a\u5929\u673a\u5668\u4eba\uff0c\u5b83\u9010\u5b57\u9010\u53e5\u5730\u6d41\u5f0f\u4f20\u8f93\u54cd\u5e94\uff0c\u800c\u4e0d\u662f\u4e00\u6b21\u8fd4\u56de\u5168\u90e8\u54cd\u5e94\u3002",
      "\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u60a8\u53ef\u4ee5\u5c06**\u751f\u6210\u5668**\u51fd\u6570\u63d0\u4f9b\u7ed9 Gradio\uff0c\u800c\u4e0d\u662f\u5e38\u89c4\u51fd\u6570\u3002\u5728 Python \u4e2d\u521b\u5efa\u751f\u6210\u5668\u975e\u5e38\u7b80\u5355\uff1a\u51fd\u6570\u4e0d\u5e94\u8be5\u6709\u4e00\u4e2a\u5355\u72ec\u7684 `return` \u503c\uff0c\u800c\u662f\u5e94\u8be5 with `yield` \u8fde\u7eed\u8fd4\u56de\u4e00\u7cfb\u5217\u503c\u3002\u901a\u5e38\uff0c`yield` \u8bed\u53e5\u653e\u7f6e\u5728\u67d0\u79cd\u5faa\u73af\u4e2d\u3002\u4e0b\u9762\u662f\u4e00\u4e2a\u7b80\u5355\u793a\u4f8b\uff0c\u751f\u6210\u5668\u53ea\u662f\u7b80\u5355\u8ba1\u6570\u5230\u7ed9\u5b9a\u6570\u5b57\uff1a\n\n```python\ndef my_generator(x):\n    for i in range(x):\n        yield i\n```\n\n\u60a8\u4ee5\u4e0e\u5e38\u89c4\u51fd\u6570\u76f8\u540c\u7684\u65b9\u5f0f\u5c06\u751f\u6210\u5668\u63d0\u4f9b\u7ed9 Gradio\u3002\u4f8b\u5982\uff0c\u8fd9\u662f\u4e00\u4e2a\uff08\u865a\u62df\u7684\uff09\u56fe\u50cf\u751f\u6210\u6a21\u578b\uff0c\u5b83\u5728\u8f93\u51fa\u56fe\u50cf\u4e4b\u524d\u751f\u6210\u6570\u4e2a\u6b65\u9aa4\u7684\u566a\u97f3\uff1a",
      "$code_fake_diffusion\n$demo_fake_diffusion\n\n\u8bf7\u6ce8\u610f\uff0c\u6211\u4eec\u5728\u8fed\u4ee3\u5668\u4e2d\u6dfb\u52a0\u4e86 `time.sleep(1)`\uff0c\u4ee5\u521b\u5efa\u6b65\u9aa4\u4e4b\u95f4\u7684\u4eba\u5de5\u6682\u505c\uff0c\u4ee5\u4fbf\u60a8\u53ef\u4ee5\u89c2\u5bdf\u8fed\u4ee3\u5668\u7684\u6b65\u9aa4\uff08\u5728\u771f\u5b9e\u7684\u56fe\u50cf\u751f\u6210\u6a21\u578b\u4e2d\uff0c\u8fd9\u53ef\u80fd\u662f\u4e0d\u5fc5\u8981\u7684\uff09\u3002\n\n\u5c06\u751f\u6210\u5668\u63d0\u4f9b\u7ed9 Gradio **\u9700\u8981**\u5728\u5e95\u5c42 Interface \u6216 Blocks \u4e2d\u542f\u7528\u961f\u5217\uff08\u8bf7\u53c2\u9605\u4e0a\u9762\u7684\u961f\u5217\u90e8\u5206\uff09\u3002\n\n## \u8fdb\u5ea6\u6761",
      "Gradio \u652f\u6301\u521b\u5efa\u81ea\u5b9a\u4e49\u8fdb\u5ea6\u6761\uff0c\u4ee5\u4fbf\u60a8\u53ef\u4ee5\u81ea\u5b9a\u4e49\u548c\u63a7\u5236\u5411\u7528\u6237\u663e\u793a\u7684\u8fdb\u5ea6\u66f4\u65b0\u3002\u8981\u542f\u7528\u6b64\u529f\u80fd\uff0c\u53ea\u9700\u4e3a\u65b9\u6cd5\u6dfb\u52a0\u4e00\u4e2a\u9ed8\u8ba4\u503c\u4e3a `gr.Progress` \u5b9e\u4f8b\u7684\u53c2\u6570\u5373\u53ef\u3002\u7136\u540e\uff0c\u60a8\u53ef\u4ee5\u76f4\u63a5\u8c03\u7528\u6b64\u5b9e\u4f8b\u5e76\u4f20\u5165 0 \u5230 1 \u4e4b\u95f4\u7684\u6d6e\u70b9\u6570\u6765\u66f4\u65b0\u8fdb\u5ea6\u7ea7\u522b\uff0c\u6216\u8005 with `Progress` \u5b9e\u4f8b\u7684 `tqdm()` \u65b9\u6cd5\u6765\u8ddf\u8e2a\u53ef\u8fed\u4ee3\u5bf9\u8c61\u4e0a\u7684\u8fdb\u5ea6\uff0c\u5982\u4e0b\u6240\u793a\u3002\u5fc5\u987b\u542f\u7528\u961f\u5217\u4ee5\u8fdb\u884c\u8fdb\u5ea6\u66f4\u65b0\u3002\n\n$code_progress_simple\n$demo_progress_simple",
      "\u5982\u679c\u60a8 with `tqdm` \u5e93\uff0c\u5e76\u4e14\u5e0c\u671b\u4ece\u51fd\u6570\u5185\u90e8\u7684\u4efb\u4f55 `tqdm.tqdm` \u81ea\u52a8\u62a5\u544a\u8fdb\u5ea6\u66f4\u65b0\uff0c\u8bf7\u5c06\u9ed8\u8ba4\u53c2\u6570\u8bbe\u7f6e\u4e3a `gr.Progress(track_tqdm=True)`\uff01\n\n## \u6279\u5904\u7406\u51fd\u6570 (Batch Functions)\n\nGradio \u652f\u6301\u4f20\u9012*\u6279\u5904\u7406*\u51fd\u6570\u3002\u6279\u5904\u7406\u51fd\u6570\u53ea\u662f\u63a5\u53d7\u8f93\u5165\u5217\u8868\u5e76\u8fd4\u56de\u9884\u6d4b\u5217\u8868\u7684\u51fd\u6570\u3002\n\n\u4f8b\u5982\uff0c\u8fd9\u662f\u4e00\u4e2a\u6279\u5904\u7406\u51fd\u6570\uff0c\u5b83\u63a5\u53d7\u4e24\u4e2a\u8f93\u5165\u5217\u8868\uff08\u4e00\u4e2a\u5355\u8bcd\u5217\u8868\u548c\u4e00\u4e2a\u6574\u6570\u5217\u8868\uff09\uff0c\u5e76\u8fd4\u56de\u4fee\u526a\u8fc7\u7684\u5355\u8bcd\u5217\u8868\u4f5c\u4e3a\u8f93\u51fa\uff1a\n\n```python\nimport time",
      "def trim_words(words, lens):\n    trimmed_words = []\n    time.sleep(5)\n    for w, l in zip(words, lens):\n        trimmed_words.append(w[:int(l)])\n    return [trimmed_words]\n    for w, l in zip(words, lens):\n```\n\n\u4f7f\u7528\u6279\u5904\u7406\u51fd\u6570\u7684\u4f18\u70b9\u662f\uff0c\u5982\u679c\u542f\u7528\u4e86\u961f\u5217\uff0cGradio \u670d\u52a1\u5668\u53ef\u4ee5\u81ea\u52a8*\u6279\u5904\u7406*\u4f20\u5165\u7684\u8bf7\u6c42\u5e76\u5e76\u884c\u5904\u7406\u5b83\u4eec\uff0c\u4ece\u800c\u53ef\u80fd\u52a0\u5feb\u6f14\u793a\u901f\u5ea6\u3002\u4ee5\u4e0b\u662f Gradio \u4ee3\u7801\u7684\u793a\u4f8b\uff08\u8bf7\u6ce8\u610f `batch=True` \u548c `max_batch_size=16` - \u8fd9\u4e24\u4e2a\u53c2\u6570\u90fd\u53ef\u4ee5\u4f20\u9012\u7ed9\u4e8b\u4ef6\u89e6\u53d1\u5668\u6216 `Interface` \u7c7b\uff09\n\nwith `Interface`\uff1a",
      "```python\ndemo = gr.Interface(trim_words, [\"textbox\", \"number\"], [\"output\"],\n                    batch=True, max_batch_size=16)\ndemo.queue()\ndemo.launch()\n```\n\nwith `Blocks`\uff1a\n\n```python\nimport gradio as gr\n\nwith gr.Blocks() as demo:\n    with gr.Row():\n        word = gr.Textbox(label=\"word\")\n        leng = gr.Number(label=\"leng\")\n        output = gr.Textbox(label=\"Output\")\n    with gr.Row():\n        run = gr.Button()\n\n    event = run.click(trim_words, [word, leng], output, batch=True, max_batch_size=16)\n\ndemo.queue()\ndemo.launch()\n```",
      "\u5728\u4e0a\u9762\u7684\u793a\u4f8b\u4e2d\uff0c\u53ef\u4ee5\u5e76\u884c\u5904\u7406 16 \u4e2a\u8bf7\u6c42\uff08\u603b\u63a8\u7406\u65f6\u95f4\u4e3a 5 \u79d2\uff09\uff0c\u800c\u4e0d\u662f\u5206\u522b\u5904\u7406\u6bcf\u4e2a\u8bf7\u6c42\uff08\u603b\u63a8\u7406\u65f6\u95f4\u4e3a 80 \u79d2\uff09\u3002\u8bb8\u591a Hugging Face \u7684 `transformers` \u548c `diffusers` \u6a21\u578b\u5728 Gradio \u7684\u6279\u5904\u7406\u6a21\u5f0f\u4e0b\u81ea\u7136\u5de5\u4f5c\uff1a\u8fd9\u662f[\u4f7f\u7528\u6279\u5904\u7406\u751f\u6210\u56fe\u50cf\u7684\u793a\u4f8b\u6f14\u793a](https://github.com/gradio-app/gradio/blob/main/demo/diffusers_with_batching/run.py)\n\n\u6ce8\u610f\uff1a\u4f7f\u7528 Gradio \u7684\u6279\u5904\u7406\u51fd\u6570 **requires** \u5728\u5e95\u5c42 Interface \u6216 Blocks \u4e2d\u542f\u7528\u961f\u5217\uff08\u8bf7\u53c2\u9605\u4e0a\u9762\u7684\u961f\u5217\u90e8\u5206\uff09\u3002\n\n## Gradio \u7b14\u8bb0\u672c (Colab Notebooks)",
      "Gradio \u53ef\u4ee5\u5728\u4efb\u4f55\u8fd0\u884c Python \u7684\u5730\u65b9\u8fd0\u884c\uff0c\u5305\u62ec\u672c\u5730 Jupyter \u7b14\u8bb0\u672c\u548c\u534f\u4f5c\u7b14\u8bb0\u672c\uff0c\u5982[Google Colab](https://colab.research.google.com/)\u3002\u5bf9\u4e8e\u672c\u5730 Jupyter \u7b14\u8bb0\u672c\u548c Google Colab \u7b14\u8bb0\u672c\uff0cGradio \u5728\u672c\u5730\u670d\u52a1\u5668\u4e0a\u8fd0\u884c\uff0c\u60a8\u53ef\u4ee5\u5728\u6d4f\u89c8\u5668\u4e2d\u4e0e\u4e4b\u4ea4\u4e92\u3002\uff08\u6ce8\u610f\uff1a\u5bf9\u4e8e Google Colab\uff0c\u8fd9\u662f\u901a\u8fc7[\u670d\u52a1\u5de5\u4f5c\u5668\u96a7\u9053](https://github.com/tensorflow/tensorboard/blob/master/docs/design/colab_integration.md)\u5b9e\u73b0\u7684\uff0c\u60a8\u7684\u6d4f\u89c8\u5668\u9700\u8981\u542f\u7528 cookies\u3002\uff09\u5bf9\u4e8e\u5176\u4ed6\u8fdc\u7a0b\u7b14\u8bb0\u672c\uff0cGradio \u4e5f\u5c06\u5728\u670d\u52a1\u5668\u4e0a\u8fd0\u884c\uff0c\u4f46\u60a8\u9700\u8981\u4f7f\u7528[SSH \u96a7\u9053](https://coderwall",
      ".com/p/ohk6cg/remote-access-to-ipython-notebooks-via-ssh)\u5728\u672c\u5730\u6d4f\u89c8\u5668\u4e2d\u67e5\u770b\u5e94\u7528\u7a0b\u5e8f\u3002\u901a\u5e38\uff0c\u66f4\u7b80\u5355\u7684\u9009\u62e9\u662f\u4f7f\u7528 Gradio \u5185\u7f6e\u7684\u516c\u5171\u94fe\u63a5\uff0c[\u5728\u4e0b\u4e00\u7bc7\u6307\u5357\u4e2d\u8ba8\u8bba](/sharing-your-app/#sharing-demos)\u3002",
      "!--Copyright 2023 The HuggingFace Team. All rights reserved.\n\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\nthe License. You may obtain a copy of the License at\n\nhttp://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software distributed under the License is distributed on\nan \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n\n\u26a0\ufe0f Note that this file is in Markdown but contain specific syntax for our doc-builder (similar to MDX) that may not be\nrendered properly in your Markdown viewer.\n\n-->\n\n# Training on TPU with TensorFlow\n\n<Tip>",
      "If you don't need long explanations and just want TPU code samples to get started with, check out [our TPU example notebook!](https://colab.research.google.com/github/huggingface/notebooks/blob/main/examples/tpu_training-tf.ipynb)\n\n</Tip>\n\n### What is a TPU?\n\nA TPU is a **Tensor Processing Unit.** They are hardware designed by Google, which are used to greatly speed up the tensor computations within neural networks, much like GPUs. They can be used for both network training and inference. They are generally accessed through Google\u2019s cloud services, but small TPUs can also be accessed directly for free through Google Colab and Kaggle Kernels.",
      "Because [all TensorFlow models in \ud83e\udd17 Transformers are Keras models](https://huggingface.co/blog/tensorflow-philosophy), most of the methods in this document are generally applicable to TPU training for any Keras model! However, there are a few points that are specific to the HuggingFace ecosystem (hug-o-system?) of Transformers and Datasets, and we\u2019ll make sure to flag them up when we get to them.\n\n### What kinds of TPU are available?\n\nNew users are often very confused by the range of TPUs, and the different ways to access them. The first key distinction to understand is the difference between **TPU Nodes** and **TPU VMs.**",
      "When you use a **TPU Node**, you are effectively indirectly accessing a remote TPU. You will need a separate VM, which will initialize your network and data pipeline and then forward them to the remote node. When you use a TPU on Google Colab, you are accessing it in the **TPU Node** style.\n\nUsing TPU Nodes can have some quite unexpected behaviour for people who aren\u2019t used to them! In particular, because the TPU is located on a physically different system to the machine you\u2019re running your Python code on, your data cannot be local to your machine - any data pipeline that loads from your machine\u2019s internal storage will totally fail! Instead, data must be stored in Google Cloud Storage where your data pipeline can still access it, even when the pipeline is running on the remote TPU node.\n\n<Tip>",
      "If you can fit all your data in memory as `np.ndarray` or `tf.Tensor`, then you can `fit()` on that data even when using Colab or a TPU Node, without needing to upload it to Google Cloud Storage.\n\n</Tip>\n\n<Tip>\n\n**\ud83e\udd17Specific Hugging Face Tip\ud83e\udd17:** The methods `Dataset.to_tf_dataset()` and its higher-level wrapper `model.prepare_tf_dataset()` , which you will see throughout our TF code examples, will both fail on a TPU Node. The reason for this is that even though they create a `tf.data.Dataset` it is not a \u201cpure\u201d `tf.data` pipeline and uses `tf.numpy_function` or `Dataset.from_generator()` to stream data from the underlying HuggingFace `Dataset`. This HuggingFace `Dataset` is backed by data that is on a local disc and which the remote TPU Node will not be able to read.\n\n</Tip>",
      "The second way to access a TPU is via a **TPU VM.** When using a TPU VM, you connect directly to the machine that the TPU is attached to, much like training on a GPU VM. TPU VMs are generally easier to work with, particularly when it comes to your data pipeline. All of the above warnings do not apply to TPU VMs!",
      "This is an opinionated document, so here\u2019s our opinion: **Avoid using TPU Node if possible.** It is more confusing and more difficult to debug than TPU VMs. It is also likely to be unsupported in future - Google\u2019s latest TPU, TPUv4, can only be accessed as a TPU VM, which suggests that TPU Nodes are increasingly going to become a \u201clegacy\u201d access method. However, we understand that the only free TPU access is on Colab and Kaggle Kernels, which uses TPU Node - so we\u2019ll try to explain how to handle it if you have to! Check the [TPU example notebook](https://colab.research.google.com/github/huggingface/notebooks/blob/main/examples/tpu_training-tf.ipynb) for code samples that explain this in more detail.\n\n### What sizes of TPU are available?",
      "A single TPU (a v2-8/v3-8/v4-8) runs 8 replicas. TPUs exist in **pods** that can run hundreds or thousands of replicas simultaneously. When you use more than a single TPU but less than a whole pod (for example, a v3-32), your TPU fleet is referred to as a **pod slice.**\n\nWhen you access a free TPU via Colab, you generally get a single v2-8 TPU.\n\n### I keep hearing about this XLA thing. What\u2019s XLA, and how does it relate to TPUs?",
      "XLA is an optimizing compiler, used by both TensorFlow and JAX. In JAX it is the only compiler, whereas in TensorFlow it is optional (but mandatory on TPU!). The easiest way to enable it when training a Keras model is to pass the argument `jit_compile=True` to `model.compile()`. If you don\u2019t get any errors and performance is good, that\u2019s a great sign that you\u2019re ready to move to TPU!\n\nDebugging on TPU is generally a bit harder than on CPU/GPU, so we recommend getting your code running on CPU/GPU with XLA first before trying it on TPU. You don\u2019t have to train for long, of course - just for a few steps to make sure that your model and data pipeline are working like you expect them to.\n\n<Tip>",
      "XLA compiled code is usually faster - so even if you\u2019re not planning to run on TPU, adding `jit_compile=True` can improve your performance. Be sure to note the caveats below about XLA compatibility, though!\n\n</Tip>\n\n<Tip warning={true}>\n\n**Tip born of painful experience:** Although using `jit_compile=True` is a good way to get a speed boost and test if your CPU/GPU code is XLA-compatible, it can actually cause a lot of problems if you leave it in when actually training on TPU. XLA compilation will happen implicitly on TPU, so remember to remove that line before actually running your code on a TPU!\n\n</Tip>\n\n### How do I make my model XLA compatible?",
      "In many cases, your code is probably XLA-compatible already! However, there are a few things that work in normal TensorFlow that don\u2019t work in XLA. We\u2019ve distilled them into three core rules below:\n\n<Tip>\n\n**\ud83e\udd17Specific HuggingFace Tip\ud83e\udd17:** We\u2019ve put a lot of effort into rewriting our TensorFlow models and loss functions to be XLA-compatible. Our models and loss functions generally obey rule #1 and #2 by default, so you can skip over them if you\u2019re using `transformers` models. Don\u2019t forget about these rules when writing your own models and loss functions, though!\n\n</Tip>\n\n#### XLA Rule #1: Your code cannot have \u201cdata-dependent conditionals\u201d\n\nWhat that means is that any `if` statement cannot depend on values inside a `tf.Tensor`. For example, this code block cannot be compiled with XLA!",
      "```python\nif tf.reduce_sum(tensor) > 10:\n    tensor = tensor / 2.0\n```\n\nThis might seem very restrictive at first, but most neural net code doesn\u2019t need to do this. You can often get around this restriction by using `tf.cond` (see the documentation [here](https://www.tensorflow.org/api_docs/python/tf/cond)) or by removing the conditional and finding a clever math trick with indicator variables instead, like so:\n\n```python\nsum_over_10 = tf.cast(tf.reduce_sum(tensor) > 10, tf.float32)\ntensor = tensor / (1.0 + sum_over_10)\n```\n\nThis code has exactly the same effect as the code above, but by avoiding a conditional, we ensure it will compile with XLA without problems!\n\n#### XLA Rule #2: Your code cannot have \u201cdata-dependent shapes\u201d",
      "What this means is that the shape of all of the `tf.Tensor` objects in your code cannot depend on their values. For example, the function `tf.unique` cannot be compiled with XLA, because it returns a `tensor` containing one instance of each unique value in the input. The shape of this output will obviously be different depending on how repetitive the input `Tensor` was, and so XLA refuses to handle it!\n\nIn general, most neural network code obeys rule #2 by default. However, there are a few common cases where it becomes a problem. One very common one is when you use **label masking**, setting your labels to a negative value to indicate that those positions should be ignored when computing the loss. If you look at NumPy or PyTorch loss functions that support label masking, you will often see code like this that uses [boolean indexing](https://numpy.org/doc/stable/user/basics.indexing.html#boolean-array-indexing):",
      "```python\nlabel_mask = labels >= 0\nmasked_outputs = outputs[label_mask]\nmasked_labels = labels[label_mask]\nloss = compute_loss(masked_outputs, masked_labels)\nmean_loss = torch.mean(loss)\n```\n\nThis code is totally fine in NumPy or PyTorch, but it breaks in XLA! Why? Because the shape of `masked_outputs` and `masked_labels` depends on how many positions are masked - that makes it a **data-dependent shape.** However, just like for rule #1, we can often rewrite this code to yield exactly the same output without any data-dependent shapes.\n\n```python\nlabel_mask = tf.cast(labels >= 0, tf.float32)\nloss = compute_loss(outputs, labels)\nloss = loss * label_mask  # Set negative label positions to 0\nmean_loss = tf.reduce_sum(loss) / tf.reduce_sum(label_mask)\n```",
      "Here, we avoid data-dependent shapes by computing the loss for every position, but zeroing out the masked positions in both the numerator and denominator when we calculate the mean, which yields exactly the same result as the first block while maintaining XLA compatibility. Note that we use the same trick as in rule #1 - converting a `tf.bool` to `tf.float32` and using it as an indicator variable. This is a really useful trick, so remember it if you need to convert your own code to XLA!\n\n#### XLA Rule #3: XLA will need to recompile your model for every different input shape it sees",
      "This is the big one. What this means is that if your input shapes are very variable, XLA will have to recompile your model over and over, which will create huge performance problems. This commonly arises in NLP models, where input texts have variable lengths after tokenization. In other modalities, static shapes are more common and this rule is much less of a problem.\n\nHow can you get around rule #3? The key is **padding** - if you pad all your inputs to the same length, and then use an `attention_mask`, you can get the same results as you\u2019d get from variable shapes, but without any XLA issues. However, excessive padding can cause severe slowdown too - if you pad all your samples to the maximum length in the whole dataset, you might end up with batches consisting endless padding tokens, which will waste a lot of compute and memory!",
      "There isn\u2019t a perfect solution to this problem. However, you can try some tricks. One very useful trick is to **pad batches of samples up to a multiple of a number like 32 or 64 tokens.** This often only increases the number of tokens by a small amount, but it hugely reduces the number of unique input shapes, because every input shape now has to be a multiple of 32 or 64. Fewer unique input shapes means fewer XLA compilations!\n\n<Tip>\n\n**\ud83e\udd17Specific HuggingFace Tip\ud83e\udd17:** Our tokenizers and data collators have methods that can help you here. You can use `padding=\"max_length\"` or `padding=\"longest\"` when calling tokenizers to get them to output padded data. Our tokenizers and data collators also have a `pad_to_multiple_of` argument that you can use to reduce the number of unique input shapes you see!\n\n</Tip>",
      "### How do I actually train my model on TPU?\n\nOnce your training is XLA-compatible and (if you\u2019re using TPU Node / Colab) your dataset has been prepared appropriately, running on TPU is surprisingly easy! All you really need to change in your code is to add a few lines to initialize your TPU, and to ensure that your model and dataset are created inside a `TPUStrategy` scope. Take a look at [our TPU example notebook](https://colab.research.google.com/github/huggingface/notebooks/blob/main/examples/tpu_training-tf.ipynb) to see this in action!\n\n### Summary\n\nThere was a lot in here, so let\u2019s summarize with a quick checklist you can follow when you want to get your model ready for TPU training:",
      "- Make sure your code follows the three rules of XLA\n- Compile your model with `jit_compile=True` on CPU/GPU and confirm that you can train it with XLA\n- Either load your dataset into memory or use a TPU-compatible dataset loading approach (see [notebook](https://colab.research.google.com/github/huggingface/notebooks/blob/main/examples/tpu_training-tf.ipynb))\n- Migrate your code either to Colab (with accelerator set to \u201cTPU\u201d) or a TPU VM on Google Cloud\n- Add TPU initializer code (see [notebook](https://colab.research.google.com/github/huggingface/notebooks/blob/main/examples/tpu_training-tf.ipynb))",
      "- Create your `TPUStrategy` and make sure dataset loading and model creation are inside the `strategy.scope()` (see [notebook](https://colab.research.google.com/github/huggingface/notebooks/blob/main/examples/tpu_training-tf.ipynb))\n- Don\u2019t forget to take `jit_compile=True` out again when you move to TPU!\n- \ud83d\ude4f\ud83d\ude4f\ud83d\ude4f\ud83e\udd7a\ud83e\udd7a\ud83e\udd7a\n- Call model.fit()\n- You did it!",
      "Gradio Demo: blocks_random_slider\n\n\n```\n!pip install -q gradio \n```\n\n\n```\n\nimport gradio as gr\n\n\ndef func(slider_1, slider_2):\n    return slider_1 * 5 + slider_2\n\n\nwith gr.Blocks() as demo:\n    slider = gr.Slider(minimum=-10.2, maximum=15, label=\"Random Slider (Static)\", randomize=True)\n    slider_1 = gr.Slider(minimum=100, maximum=200, label=\"Random Slider (Input 1)\", randomize=True)\n    slider_2 = gr.Slider(minimum=10, maximum=23.2, label=\"Random Slider (Input 2)\", randomize=True)\n    slider_3 = gr.Slider(value=3, label=\"Non random slider\")\n    btn = gr.Button(\"Run\")\n    btn.click(func, inputs=[slider_1, slider_2], outputs=gr.Number())",
      "if __name__ == \"__main__\":\n    demo.launch()\n\n```",
      "Git over SSH\n\nYou can access and write data in repositories on huggingface.co using SSH (Secure Shell Protocol). When you connect via SSH, you authenticate using a private key file on your local machine.\n\nSome actions, such as pushing changes, or cloning private repositories, will require you to upload your SSH public key to your account on huggingface.co.\n\nYou can use a pre-existing SSH key, or generate a new one specifically for huggingface.co.\n\n## Checking for existing SSH keys\n\nIf you have an existing SSH key, you can use that key to authenticate Git operations over SSH.\n\nSSH keys are usually located under `~/.ssh` on Mac & Linux, and under `C:\\\\Users\\\\<username>\\\\.ssh` on Windows. List files under that directory and look for files of the form:\n\n- id_rsa.pub\n- id_ecdsa.pub\n- id_ed25519.pub\n\nThose files contain your SSH public key.",
      "If you don't have such file under `~/.ssh`, you will have to [generate a new key](#generating-a-new-ssh-keypair). Otherwise, you can [add your existing SSH public key(s) to your huggingface.co account](#add-a-ssh-key-to-your-account).\n\n## Generating a new SSH keypair\n\nIf you don't have any SSH keys on your machine, you can use `ssh-keygen` to generate a new SSH key pair (public + private keys):\n\n```\n$ ssh-keygen -t ed25519 -C \"your.email@example.co\"\n```\n\nWe recommend entering a passphrase when you are prompted to. A passphrase is an extra layer of security: it is a password that will be prompted whenever you use your SSH key.\n\nOnce your new key is generated, add it to your SSH agent with `ssh-add`:\n\n```\n$ ssh-add ~/.ssh/id_ed25519\n```",
      "If you chose a different location than the default to store your SSH key, you would have to replace `~/.ssh/id_ed25519` with the file location you used.\n\n## Add a SSH key to your account\n\nTo access private repositories with SSH, or to push changes via SSH, you will need to add your SSH public key to your huggingface.co account. You can manage your SSH keys [in your user settings](https://huggingface.co/settings/keys).\n\nTo add a SSH key to your account, click on the \"Add SSH key\" button.\n\nThen, enter a name for this key (for example, \"Personal computer\"), and copy and paste the content of your **public** SSH key in the area below. The public key is located in the `~/.ssh/id_XXXX.pub` file you found or generated in the previous steps.",
      "Click on \"Add key\", and voil\u00e0! You have added a SSH key to your huggingface.co account.\n\n\n## Testing your SSH authentication\n\nOnce you have added your SSH key to your huggingface.co account, you can test that the connection works as expected.\n\nIn a terminal, run:\n```\n$ ssh -T git@hf.co\n```\n\nIf you see a message with your username, congrats! Everything went well, you are ready to use git over SSH.\n\nOtherwise, if the message states something like the following, make sure your SSH key is actually used by your SSH agent.\n```\nHi anonymous, welcome to Hugging Face.\n```",
      "!---\nCopyright 2022 The HuggingFace Team. All rights reserved.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n-->\n\n# Token classification with LayoutLMv3 (PyTorch version)",
      "This directory contains a script, `run_funsd_cord.py`, that can be used to fine-tune (or evaluate) LayoutLMv3 on form understanding datasets, such as [FUNSD](https://guillaumejaume.github.io/FUNSD/) and [CORD](https://github.com/clovaai/cord).\n\nThe script `run_funsd_cord.py` leverages the \ud83e\udd17 Datasets library and the Trainer API. You can easily customize it to your needs.\n\n## Fine-tuning on FUNSD\n\nFine-tuning LayoutLMv3 for token classification on [FUNSD](https://guillaumejaume.github.io/FUNSD/) can be done as follows:",
      "```bash\npython run_funsd_cord.py \\\n  --model_name_or_path microsoft/layoutlmv3-base \\\n  --dataset_name funsd \\\n  --output_dir layoutlmv3-test \\\n  --do_train \\\n  --do_eval \\\n  --max_steps 1000 \\\n  --evaluation_strategy steps \\\n  --eval_steps 100 \\\n  --learning_rate 1e-5 \\\n  --load_best_model_at_end \\\n  --metric_for_best_model \"eval_f1\" \\\n  --push_to_hub \\\n  --push_to_hub\u00b0model_id layoutlmv3-finetuned-funsd\n```",
      "\ud83d\udc40 The resulting model can be found here: https://huggingface.co/nielsr/layoutlmv3-finetuned-funsd. By specifying the `push_to_hub` flag, the model gets uploaded automatically to the hub (regularly), together with a model card, which includes metrics such as precision, recall and F1. Note that you can easily update the model card, as it's just a README file of the respective repo on the hub.\n\nThere's also the \"Training metrics\" [tab](https://huggingface.co/nielsr/layoutlmv3-finetuned-funsd/tensorboard), which shows Tensorboard logs over the course of training. Pretty neat, huh?\n\n## Fine-tuning on CORD\n\nFine-tuning LayoutLMv3 for token classification on [CORD](https://github.com/clovaai/cord) can be done as follows:",
      "```bash\npython run_funsd_cord.py \\\n  --model_name_or_path microsoft/layoutlmv3-base \\\n  --dataset_name cord \\\n  --output_dir layoutlmv3-test \\\n  --do_train \\\n  --do_eval \\\n  --max_steps 1000 \\\n  --evaluation_strategy steps \\\n  --eval_steps 100 \\\n  --learning_rate 5e-5 \\\n  --load_best_model_at_end \\\n  --metric_for_best_model \"eval_f1\" \\\n  --push_to_hub \\\n  --push_to_hub\u00b0model_id layoutlmv3-finetuned-cord\n```\n\n\ud83d\udc40 The resulting model can be found here: https://huggingface.co/nielsr/layoutlmv3-finetuned-cord. Note that a model card gets generated automatically in case you specify the `push_to_hub` flag.",
      "State in Blocks\n\nWe covered [State in Interfaces](https://gradio.app/interface-state), this guide takes a look at state in Blocks, which works mostly the same.\n\n## Global State\n\nGlobal state in Blocks works the same as in Interface. Any variable created outside a function call is a reference shared between all users.\n\n## Session State\n\nGradio supports session **state**, where data persists across multiple submits within a page session, in Blocks apps as well. To reiterate, session data is _not_ shared between different users of your model. To store data in a session state, you need to do three things:\n\n1. Create a `gr.State()` object. If there is a default value to this stateful object, pass that into the constructor.\n2. In the event listener, put the `State` object as an input and output.\n3. In the event listener function, add the variable to the input parameters and the return value.",
      "Let's take a look at a game of hangman.\n\n$code_hangman\n$demo_hangman\n\nLet's see how we do each of the 3 steps listed above in this game:\n\n1. We store the used letters in `used_letters_var`. In the constructor of `State`, we set the initial value of this to `[]`, an empty list.\n2. In `btn.click()`, we have a reference to `used_letters_var` in both the inputs and outputs.\n3. In `guess_letter`, we pass the value of this `State` to `used_letters`, and then return an updated value of this `State` in the return statement.\n\nWith more complex apps, you will likely have many State variables storing session state in a single Blocks app.\n\nLearn more about `State` in the [docs](https://gradio.app/docs#state).",
      "\u5982\u4f55\u4f7f\u7528\u5730\u56fe\u7ec4\u4ef6\u7ed8\u5236\u56fe\u8868\n\nRelated spaces:\nTags: PLOTS, MAPS\n\n## \u7b80\u4ecb\n\n\u672c\u6307\u5357\u4ecb\u7ecd\u5982\u4f55\u4f7f\u7528 Gradio \u7684 `Plot` \u7ec4\u4ef6\u5728\u5730\u56fe\u4e0a\u7ed8\u5236\u5730\u7406\u6570\u636e\u3002Gradio \u7684 `Plot` \u7ec4\u4ef6\u53ef\u4ee5\u4e0e Matplotlib\u3001Bokeh \u548c Plotly \u4e00\u8d77\u4f7f\u7528\u3002\u5728\u672c\u6307\u5357\u4e2d\uff0c\u6211\u4eec\u5c06\u4f7f\u7528 Plotly \u8fdb\u884c\u64cd\u4f5c\u3002Plotly \u53ef\u4ee5\u8ba9\u5f00\u53d1\u4eba\u5458\u8f7b\u677e\u521b\u5efa\u5404\u79cd\u5730\u56fe\u6765\u5c55\u793a\u4ed6\u4eec\u7684\u5730\u7406\u6570\u636e\u3002\u70b9\u51fb[\u8fd9\u91cc](https://plotly.com/python/maps/)\u67e5\u770b\u4e00\u4e9b\u793a\u4f8b\u3002\n\n## \u6982\u8ff0",
      "\u6211\u4eec\u5c06\u4f7f\u7528\u7ebd\u7ea6\u5e02\u7684 Airbnb \u6570\u636e\u96c6\uff0c\u8be5\u6570\u636e\u96c6\u6258\u7ba1\u5728 kaggle \u4e0a\uff0c\u70b9\u51fb[\u8fd9\u91cc](https://www.kaggle.com/datasets/dgomonov/new-york-city-airbnb-open-data)\u3002\u6211\u5df2\u7ecf\u5c06\u5176\u4e0a\u4f20\u5230 Hugging Face Hub \u4f5c\u4e3a\u4e00\u4e2a\u6570\u636e\u96c6\uff0c\u65b9\u4fbf\u4f7f\u7528\u548c\u4e0b\u8f7d\uff0c\u70b9\u51fb[\u8fd9\u91cc](https://huggingface.co/datasets/gradio/NYC-Airbnb-Open-Data)\u3002\u4f7f\u7528\u8fd9\u4e9b\u6570\u636e\uff0c\u6211\u4eec\u5c06\u5728\u5730\u56fe\u4e0a\u7ed8\u5236 Airbnb \u7684\u4f4d\u7f6e\uff0c\u5e76\u5141\u8bb8\u57fa\u4e8e\u4ef7\u683c\u548c\u4f4d\u7f6e\u8fdb\u884c\u7b5b\u9009\u3002\u4e0b\u9762\u662f\u6211\u4eec\u5c06\u8981\u6784\u5efa\u7684\u6f14\u793a\u3002 \u26a1\ufe0f\n\n$demo_map_airbnb\n\n## \u6b65\u9aa4 1-\u52a0\u8f7d CSV \u6570\u636e \ud83d\udcbe\n\n\u8ba9\u6211\u4eec\u9996\u5148\u4ece Hugging Face Hub \u52a0\u8f7d\u7ebd\u7ea6\u5e02\u7684 Airbnb \u6570\u636e\u3002",
      "```python\nfrom datasets import load_dataset\n\ndataset = load_dataset(\"gradio/NYC-Airbnb-Open-Data\", split=\"train\")\ndf = dataset.to_pandas()\n\ndef filter_map(min_price, max_price, boroughs):\n    new_df = df[(df['neighbourhood_group'].isin(boroughs)) &\n            (df['price'] > min_price) & (df['price'] < max_price)]\n    names = new_df[\"name\"].tolist()\n    prices = new_df[\"price\"].tolist()\n    text_list = [(names[i], prices[i]) for i in range(0, len(names))]\n```",
      "\u5728\u4e0a\u9762\u7684\u4ee3\u7801\u4e2d\uff0c\u6211\u4eec\u5148\u5c06 CSV \u6570\u636e\u52a0\u8f7d\u5230\u4e00\u4e2a pandas dataframe \u4e2d\u3002\u8ba9\u6211\u4eec\u9996\u5148\u5b9a\u4e49\u4e00\u4e2a\u51fd\u6570\uff0c\u8fd9\u5c06\u4f5c\u4e3a gradio \u5e94\u7528\u7a0b\u5e8f\u7684\u9884\u6d4b\u51fd\u6570\u3002\u8be5\u51fd\u6570\u5c06\u63a5\u53d7\u6700\u4f4e\u4ef7\u683c\u3001\u6700\u9ad8\u4ef7\u683c\u8303\u56f4\u548c\u7b5b\u9009\u7ed3\u679c\u5730\u533a\u7684\u5217\u8868\u4f5c\u4e3a\u53c2\u6570\u3002\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u4f20\u5165\u7684\u503c (`min_price`\u3001`max_price` \u548c\u5730\u533a\u5217\u8868) \u6765\u7b5b\u9009\u6570\u636e\u6846\u5e76\u521b\u5efa `new_df`\u3002\u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u5c06\u521b\u5efa\u5305\u542b\u6bcf\u4e2a Airbnb \u7684\u540d\u79f0\u548c\u4ef7\u683c\u7684 `text_list`\uff0c\u4ee5\u4fbf\u5728\u5730\u56fe\u4e0a\u4f7f\u7528\u4f5c\u4e3a\u6807\u7b7e\u3002\n\n## \u6b65\u9aa4 2-\u5730\u56fe\u56fe\u8868 \ud83c\udf10",
      "Plotly \u4f7f\u5f97\u5904\u7406\u5730\u56fe\u53d8\u5f97\u5f88\u5bb9\u6613\u3002\u8ba9\u6211\u4eec\u770b\u4e00\u4e0b\u4e0b\u9762\u7684\u4ee3\u7801\uff0c\u4e86\u89e3\u5982\u4f55\u521b\u5efa\u5730\u56fe\u56fe\u8868\u3002\n\n```python\nimport plotly.graph_objects as go\n\nfig = go.Figure(go.Scattermapbox(\n            customdata=text_list,\n            lat=new_df['latitude'].tolist(),\n            lon=new_df['longitude'].tolist(),\n            mode='markers',\n            marker=go.scattermapbox.Marker(\n                size=6\n            ),\n            hoverinfo=\"text\",\n            hovertemplate='<b>Name</b>: %{customdata[0]}<br><b>Price</b>: $%{customdata[1]}'\n        ))",
      "fig.update_layout(\n    mapbox_style=\"open-street-map\",\n    hovermode='closest',\n    mapbox=dict(\n        bearing=0,\n        center=go.layout.mapbox.Center(\n            lat=40.67,\n            lon=-73.90\n        ),\n        pitch=0,\n        zoom=9\n    ),\n)\n```\n\n\u4e0a\u9762\u7684\u4ee3\u7801\u4e2d\uff0c\u6211\u4eec\u901a\u8fc7\u4f20\u5165\u7ecf\u7eac\u5ea6\u5217\u8868\u6765\u521b\u5efa\u4e00\u4e2a\u6563\u70b9\u56fe\u3002\u6211\u4eec\u8fd8\u4f20\u5165\u4e86\u540d\u79f0\u548c\u4ef7\u683c\u7684\u81ea\u5b9a\u4e49\u6570\u636e\uff0c\u4ee5\u4fbf\u5728\u9f20\u6807\u60ac\u505c\u5728\u6bcf\u4e2a\u6807\u8bb0\u4e0a\u65f6\u663e\u793a\u989d\u5916\u7684\u4fe1\u606f\u3002\u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u4f7f\u7528 `update_layout` \u6765\u6307\u5b9a\u5176\u4ed6\u5730\u56fe\u8bbe\u7f6e\uff0c\u4f8b\u5982\u7f29\u653e\u548c\u5c45\u4e2d\u3002\n\n\u6709\u5173\u4f7f\u7528 Mapbox \u548c Plotly \u521b\u5efa\u6563\u70b9\u56fe\u7684\u66f4\u591a\u4fe1\u606f\uff0c\u8bf7\u70b9\u51fb[\u8fd9\u91cc](https://plotly.com/python/scattermapbox/)\u3002",
      "## \u6b65\u9aa4 3-Gradio \u5e94\u7528\u7a0b\u5e8f \u26a1\ufe0f\n\n\u6211\u4eec\u5c06\u4f7f\u7528\u4e24\u4e2a `gr.Number` \u7ec4\u4ef6\u548c\u4e00\u4e2a `gr.CheckboxGroup` \u7ec4\u4ef6\uff0c\u5141\u8bb8\u7528\u6237\u6307\u5b9a\u4ef7\u683c\u8303\u56f4\u548c\u5730\u533a\u4f4d\u7f6e\u3002\u7136\u540e\uff0c\u6211\u4eec\u5c06\u4f7f\u7528 `gr.Plot` \u7ec4\u4ef6\u4f5c\u4e3a\u6211\u4eec\u4e4b\u524d\u521b\u5efa\u7684 Plotly + Mapbox \u5730\u56fe\u7684\u8f93\u51fa\u3002",
      "```python\nwith gr.Blocks() as demo:\n    with gr.Column():\n        with gr.Row():\n            min_price = gr.Number(value=250, label=\"Minimum Price\")\n            max_price = gr.Number(value=1000, label=\"Maximum Price\")\n        boroughs = gr.CheckboxGroup(choices=[\"Queens\", \"Brooklyn\", \"Manhattan\", \"Bronx\", \"Staten Island\"], value=[\"Queens\", \"Brooklyn\"], label=\"Select Boroughs:\")\n        btn = gr.Button(value=\"Update Filter\")\n        map = gr.Plot()\n    demo.load(filter_map, [min_price, max_price, boroughs], map)\n    btn.click(filter_map, [min_price, max_price, boroughs], map)\n```",
      "\u6211\u4eec\u4f7f\u7528 `gr.Column` \u548c `gr.Row` \u5e03\u5c40\u8fd9\u4e9b\u7ec4\u4ef6\uff0c\u5e76\u4e3a\u6f14\u793a\u52a0\u8f7d\u65f6\u548c\u70b9\u51fb \" \u66f4\u65b0\u7b5b\u9009 \" \u6309\u94ae\u65f6\u6dfb\u52a0\u4e86\u4e8b\u4ef6\u89e6\u53d1\u5668\uff0c\u4ee5\u89e6\u53d1\u5730\u56fe\u66f4\u65b0\u65b0\u7684\u7b5b\u9009\u6761\u4ef6\u3002\n\n\u4ee5\u4e0b\u662f\u5b8c\u6574\u6f14\u793a\u4ee3\u7801\uff1a\n\n$code_map_airbnb\n\n## \u6b65\u9aa4 4-\u90e8\u7f72 Deployment \ud83e\udd17\n\n\u5982\u679c\u4f60\u8fd0\u884c\u4e0a\u9762\u7684\u4ee3\u7801\uff0c\u4f60\u7684\u5e94\u7528\u7a0b\u5e8f\u5c06\u5728\u672c\u5730\u8fd0\u884c\u3002\n\u5982\u679c\u8981\u83b7\u53d6\u4e34\u65f6\u5171\u4eab\u94fe\u63a5\uff0c\u53ef\u4ee5\u5c06 `share=True` \u53c2\u6570\u4f20\u9012\u7ed9 `launch`\u3002\n\n\u4f46\u5982\u679c\u4f60\u60f3\u8981\u4e00\u4e2a\u6c38\u4e45\u7684\u90e8\u7f72\u89e3\u51b3\u65b9\u6848\u5462\uff1f\n\u8ba9\u6211\u4eec\u5c06\u6211\u4eec\u7684 Gradio \u5e94\u7528\u7a0b\u5e8f\u90e8\u7f72\u5230\u514d\u8d39\u7684 HuggingFace Spaces \u5e73\u53f0\u3002",
      "\u5982\u679c\u4f60\u4ee5\u524d\u6ca1\u6709\u4f7f\u7528\u8fc7 Spaces\uff0c\u8bf7\u6309\u7167\u4e4b\u524d\u7684\u6307\u5357[\u8fd9\u91cc](/using_hugging_face_integrations)\u3002\n\n## \u7ed3\u8bba \ud83c\udf89\n\n\u4f60\u5df2\u7ecf\u5b8c\u6210\u4e86\uff01\u8fd9\u662f\u6784\u5efa\u5730\u56fe\u6f14\u793a\u6240\u9700\u7684\u6240\u6709\u4ee3\u7801\u3002\n\n\u94fe\u63a5\u5230\u6f14\u793a\uff1a[\u5730\u56fe\u6f14\u793a](https://huggingface.co/spaces/gradio/map_airbnb)\u548c[\u5b8c\u6574\u4ee3\u7801](https://huggingface.co/spaces/gradio/map_airbnb/blob/main/run.py)\uff08\u5728 Hugging Face Spaces\uff09",
      "SE-ResNet\n\n**SE ResNet** is a variant of a [ResNet](https://www.paperswithcode.com/method/resnet) that employs [squeeze-and-excitation blocks](https://paperswithcode.com/method/squeeze-and-excitation-block) to enable the network to perform dynamic channel-wise feature recalibration.\n\n## How do I use this model on an image?\n\nTo load a pretrained model:\n\n```py\n>>> import timm\n>>> model = timm.create_model('seresnet152d', pretrained=True)\n>>> model.eval()\n```\n\nTo load and preprocess the image:\n\n```py \n>>> import urllib\n>>> from PIL import Image\n>>> from timm.data import resolve_data_config\n>>> from timm.data.transforms_factory import create_transform\n\n>>> config = resolve_data_config({}, model=model)\n>>> transform = create_transform(**config)",
      ">>> url, filename = (\"https://github.com/pytorch/hub/raw/master/images/dog.jpg\", \"dog.jpg\")\n>>> urllib.request.urlretrieve(url, filename)\n>>> img = Image.open(filename).convert('RGB')\n>>> tensor = transform(img).unsqueeze(0) # transform and add batch dimension\n```\n\nTo get the model predictions:\n\n```py\n>>> import torch\n>>> with torch.no_grad():\n...     out = model(tensor)\n>>> probabilities = torch.nn.functional.softmax(out[0], dim=0)\n>>> print(probabilities.shape)\n>>> # prints: torch.Size([1000])\n```\n\nTo get the top-5 predictions class names:",
      "```py\n>>> # Get imagenet class mappings\n>>> url, filename = (\"https://raw.githubusercontent.com/pytorch/hub/master/imagenet_classes.txt\", \"imagenet_classes.txt\")\n>>> urllib.request.urlretrieve(url, filename) \n>>> with open(\"imagenet_classes.txt\", \"r\") as f:\n...     categories = [s.strip() for s in f.readlines()]",
      ">>> # Print top categories per image\n>>> top5_prob, top5_catid = torch.topk(probabilities, 5)\n>>> for i in range(top5_prob.size(0)):\n...     print(categories[top5_catid[i]], top5_prob[i].item())\n>>> # prints class names and probabilities like:\n>>> # [('Samoyed', 0.6425196528434753), ('Pomeranian', 0.04062102362513542), ('keeshond', 0.03186424449086189), ('white wolf', 0.01739676296710968), ('Eskimo dog', 0.011717947199940681)]\n```\n\nReplace the model name with the variant you want to use, e.g. `seresnet152d`. You can find the IDs in the model summaries at the top of this page.",
      "To extract image features with this model, follow the [timm feature extraction examples](../feature_extraction), just change the name of the model you want to use.\n\n## How do I finetune this model?\n\nYou can finetune any of the pre-trained models just by changing the classifier (the last layer).\n\n```py\n>>> model = timm.create_model('seresnet152d', pretrained=True, num_classes=NUM_FINETUNE_CLASSES)\n```\nTo finetune on your own dataset, you have to write a training loop or adapt [timm's training\nscript](https://github.com/rwightman/pytorch-image-models/blob/master/train.py) to use your dataset.\n\n## How do I train this model?\n\nYou can follow the [timm recipe scripts](../scripts) for training a new model afresh.\n\n## Citation",
      "```BibTeX\n@misc{hu2019squeezeandexcitation,\n      title={Squeeze-and-Excitation Networks}, \n      author={Jie Hu and Li Shen and Samuel Albanie and Gang Sun and Enhua Wu},\n      year={2019},\n      eprint={1709.01507},\n      archivePrefix={arXiv},\n      primaryClass={cs.CV}\n}\n```",
      "<!--\nType: model-index\nCollections:\n- Name: SE ResNet\n  Paper:\n    Title: Squeeze-and-Excitation Networks\n    URL: https://paperswithcode.com/paper/squeeze-and-excitation-networks\nModels:\n- Name: seresnet152d\n  In Collection: SE ResNet\n  Metadata:\n    FLOPs: 20161904304\n    Parameters: 66840000\n    File Size: 268144497\n    Architecture:\n    - 1x1 Convolution\n    - Batch Normalization\n    - Bottleneck Residual Block\n    - Convolution\n    - Global Average Pooling\n    - Max Pooling\n    - ReLU\n    - Residual Block\n    - Residual Connection\n    - Softmax\n    - Squeeze-and-Excitation Block\n    Tasks:\n    - Image Classification\n    Training Techniques:",
      "- Label Smoothing\n    - SGD with Momentum\n    - Weight Decay\n    Training Data:\n    - ImageNet\n    Training Resources: 8x NVIDIA Titan X GPUs\n    ID: seresnet152d\n    LR: 0.6\n    Epochs: 100\n    Layers: 152\n    Dropout: 0.2\n    Crop Pct: '0.94'\n    Momentum: 0.9\n    Batch Size: 1024\n    Image Size: '256'\n    Interpolation: bicubic\n  Code: https://github.com/rwightman/pytorch-image-models/blob/a7f95818e44b281137503bcf4b3e3e94d8ffa52f/timm/models/resnet.py#L1206",
      "Weights: https://github.com/rwightman/pytorch-image-models/releases/download/v0.1-weights/seresnet152d_ra2-04464dd2.pth\n  Results:\n  - Task: Image Classification\n    Dataset: ImageNet\n    Metrics:\n      Top 1 Accuracy: 83.74%\n      Top 5 Accuracy: 96.77%\n- Name: seresnet50\n  In Collection: SE ResNet\n  Metadata:\n    FLOPs: 5285062320\n    Parameters: 28090000\n    File Size: 112621903\n    Architecture:\n    - 1x1 Convolution\n    - Batch Normalization\n    - Bottleneck Residual Block\n    - Convolution\n    - Global Average Pooling\n    - Max Pooling\n    - ReLU\n    - Residual Block\n    - Residual Connection\n    - Softmax",
      "- Squeeze-and-Excitation Block\n    Tasks:\n    - Image Classification\n    Training Techniques:\n    - Label Smoothing\n    - SGD with Momentum\n    - Weight Decay\n    Training Data:\n    - ImageNet\n    Training Resources: 8x NVIDIA Titan X GPUs\n    ID: seresnet50\n    LR: 0.6\n    Epochs: 100\n    Layers: 50\n    Dropout: 0.2\n    Crop Pct: '0.875'\n    Momentum: 0.9\n    Batch Size: 1024\n    Image Size: '224'\n    Interpolation: bicubic\n  Code: https://github.com/rwightman/pytorch-image-models/blob/a7f95818e44b281137503bcf4b3e3e94d8ffa52f/timm/models/resnet.py#L1180",
      "Weights: https://github.com/rwightman/pytorch-image-models/releases/download/v0.1-weights/seresnet50_ra_224-8efdb4bb.pth\n  Results:\n  - Task: Image Classification\n    Dataset: ImageNet\n    Metrics:\n      Top 1 Accuracy: 80.26%\n      Top 5 Accuracy: 95.07%\n-->"
    ]
  },
  {
    "chunk_size": 200,
    "chunk_overlap": 20,
    "limit": 10,
    "texts": [
      "Create an Endpoint\n\nAfter your first login, you will be directed to the [Endpoint creation page](https://ui.endpoints.huggingface.co/new). As an example, this guide will go through the steps to deploy [distilbert-base-uncased-finetuned-sst-2-english](https://huggingface.co/distilbert-base-uncased-finetuned-sst-2-english) for text classification. \n\n## 1. Enter the Hugging Face Repository ID and your desired endpoint name:\n\n<img src=\"https://raw.githubusercontent.com/huggingface/hf-endpoints-documentation/main/assets/1_repository.png\" alt=\"select repository\" />",
      "## 2. Select your Cloud Provider and region. Initially, only AWS will be available as a Cloud Provider with the `us-east-1` and `eu-west-1` regions. We will add Azure soon, and if you need to test Endpoints with other Cloud Providers or regions, please let us know.\n\n<img src=\"https://raw.githubusercontent.com/huggingface/hf-endpoints-documentation/main/assets/1_region.png\" alt=\"select region\" />\n\n## 3. Define the [Security Level](security) for the Endpoint:\n\n<img src=\"https://raw.githubusercontent.com/huggingface/hf-endpoints-documentation/main/assets/1_security.png\" alt=\"define security\" />",
      "## 4. Create your Endpoint by clicking **Create Endpoint**. By default, your Endpoint is created with a medium CPU (2 x 4GB vCPUs with Intel Xeon Ice Lake) The cost estimate assumes the Endpoint will be up for an entire month, and does not take autoscaling into account.\n\n<img src=\"https://raw.githubusercontent.com/huggingface/hf-endpoints-documentation/main/assets/1_create_cost.png\" alt=\"create endpoint\" />\n\n## 5. Wait for the Endpoint to build, initialize and run which can take between 1 to 5 minutes.\n\n<img src=\"https://raw.githubusercontent.com/huggingface/hf-endpoints-documentation/main/assets/overview.png\" alt=\"overview\" />\n\n## 6. Test your Endpoint in the overview with the Inference widget \ud83c\udfc1 \ud83c\udf89!",
      "<img src=\"https://raw.githubusercontent.com/huggingface/hf-endpoints-documentation/main/assets/1_inference.png\" alt=\"run inference\" />",
      "Choosing a metric for your task\n\n**So you've trained your model and want to see how well it\u2019s doing on a dataset of your choice. Where do you start?**\n\nThere is no \u201cone size fits all\u201d approach to choosing an evaluation metric, but some good guidelines to keep in mind are:\n\n## Categories of metrics\n\nThere are 3 high-level categories of metrics:",
      "## Categories of metrics\n\nThere are 3 high-level categories of metrics:\n\n1. *Generic metrics*, which can be applied to a variety of situations and datasets, such as precision and accuracy.\n2. *Task-specific metrics*, which are limited to a given task, such as Machine Translation (often evaluated using metrics [BLEU](https://huggingface.co/metrics/bleu) or [ROUGE](https://huggingface.co/metrics/rouge)) or Named Entity Recognition (often evaluated with [seqeval](https://huggingface.co/metrics/seqeval)).\n3. *Dataset-specific metrics*, which aim to measure model performance on specific benchmarks: for instance, the [GLUE benchmark](https://huggingface.co/datasets/glue) has a dedicated [evaluation metric](https://huggingface.co/metrics/glue).\n\nLet's look at each of these three cases:\n\n### Generic metrics",
      "Let's look at each of these three cases:\n\n### Generic metrics\n\nMany of the metrics used in the Machine Learning community are quite generic and can be applied in a variety of tasks and datasets.\n\nThis is the case for metrics like [accuracy](https://huggingface.co/metrics/accuracy) and [precision](https://huggingface.co/metrics/precision), which can be used for evaluating labeled (supervised) datasets, as well as [perplexity](https://huggingface.co/metrics/perplexity), which can be used for evaluating different kinds of (unsupervised) generative tasks.",
      "To see the input structure of a given metric, you can look at its metric card. For example, in the case of [precision](https://huggingface.co/metrics/precision), the format is:\n```\n>>> precision_metric = evaluate.load(\"precision\")\n>>> results = precision_metric.compute(references=[0, 1], predictions=[0, 1])\n>>> print(results)\n{'precision': 1.0}\n```\n\n### Task-specific metrics",
      "### Task-specific metrics\n\nPopular ML tasks like Machine Translation and Named Entity Recognition have specific metrics that can be used to compare models. For example, a series of different metrics have been proposed for text generation, ranging from [BLEU](https://huggingface.co/metrics/bleu) and its derivatives such as [GoogleBLEU](https://huggingface.co/metrics/google_bleu) and [GLEU](https://huggingface.co/metrics/gleu), but also [ROUGE](https://huggingface.co/metrics/rouge), [MAUVE](https://huggingface.co/metrics/mauve), etc.\n\nYou can find the right metric for your task by:",
      "You can find the right metric for your task by:\n\n- **Looking at the [Task pages](https://huggingface.co/tasks)** to see what metrics can be used for evaluating models for a given task.\n- **Checking out leaderboards** on sites like [Papers With Code](https://paperswithcode.com/) (you can search by task and by dataset).\n-  **Reading the metric cards** for the relevant metrics and see which ones are a good fit for your use case. For example, see the [BLEU metric card](https://github.com/huggingface/evaluate/tree/main/metrics/bleu) or [SQuaD metric card](https://github.com/huggingface/evaluate/tree/main/metrics/squad).\n- **Looking at papers and blog posts** published on the topic and see what metrics they report. This can change over time, so try to pick papers from the last couple of years!\n\n### Dataset-specific metrics",
      "### Dataset-specific metrics\n\nSome datasets have specific metrics associated with them -- this is especially in the case of popular benchmarks like [GLUE](https://huggingface.co/metrics/glue) and [SQuAD](https://huggingface.co/metrics/squad).\n\n<Tip warning={true}>\n\ud83d\udca1\nGLUE is actually a collection of different subsets on different tasks, so first you need to choose the one that corresponds to the NLI task, such as mnli, which is described as \u201ccrowdsourced collection of sentence pairs with textual entailment annotations\u201d\n</Tip>",
      "If you are evaluating your model on a benchmark dataset like the ones mentioned above, you can use its dedicated evaluation metric. Make sure you respect the format that they require. For example, to evaluate your model on the [SQuAD](https://huggingface.co/datasets/squad) dataset, you need to feed the `question` and `context` into your model and return the `prediction_text`, which should be compared with the `references` (based on matching the `id` of the question) :",
      "```\n>>> from evaluate import load\n>>> squad_metric = load(\"squad\")\n>>> predictions = [{'prediction_text': '1976', 'id': '56e10a3be3433e1400422b22'}]\n>>> references = [{'answers': {'answer_start': [97], 'text': ['1976']}, 'id': '56e10a3be3433e1400422b22'}]\n>>> results = squad_metric.compute(predictions=predictions, references=references)\n>>> results\n{'exact_match': 100.0, 'f1': 100.0}\n```\n\nYou can find examples of dataset structures by consulting the \"Dataset Preview\" function or the dataset card for a given dataset, and you can see how to use its dedicated evaluation function based on the metric card.",
      "\u4e3b\u8981\u7279\u70b9\n\n\u8ba9\u6211\u4eec\u6765\u4ecb\u7ecd\u4e00\u4e0b Gradio \u6700\u53d7\u6b22\u8fce\u7684\u4e00\u4e9b\u529f\u80fd\uff01\u8fd9\u91cc\u662f Gradio \u7684\u4e3b\u8981\u7279\u70b9\uff1a\n\n1. [\u6dfb\u52a0\u793a\u4f8b\u8f93\u5165](#example-inputs)\n2. [\u4f20\u9012\u81ea\u5b9a\u4e49\u9519\u8bef\u6d88\u606f](#errors)\n3. [\u6dfb\u52a0\u63cf\u8ff0\u5185\u5bb9](#descriptive-content)\n4. [\u8bbe\u7f6e\u65d7\u6807](#flagging)\n5. [\u9884\u5904\u7406\u548c\u540e\u5904\u7406](#preprocessing-and-postprocessing)\n6. [\u6837\u5f0f\u5316\u6f14\u793a](#styling)\n7. [\u6392\u961f\u7528\u6237](#queuing)\n8. [\u8fed\u4ee3\u8f93\u51fa](#iterative-outputs)\n9. [\u8fdb\u5ea6\u6761](#progress-bars)\n10. [\u6279\u5904\u7406\u51fd\u6570](#batch-functions)\n11. [\u5728\u534f\u4f5c\u7b14\u8bb0\u672c\u4e0a\u8fd0\u884c](#colab-notebooks)\n\n## \u793a\u4f8b\u8f93\u5165",
      "## \u793a\u4f8b\u8f93\u5165\n\n\u60a8\u53ef\u4ee5\u63d0\u4f9b\u7528\u6237\u53ef\u4ee5\u8f7b\u677e\u52a0\u8f7d\u5230 \"Interface\" \u4e2d\u7684\u793a\u4f8b\u6570\u636e\u3002\u8fd9\u5bf9\u4e8e\u6f14\u793a\u6a21\u578b\u671f\u671b\u7684\u8f93\u5165\u7c7b\u578b\u4ee5\u53ca\u6f14\u793a\u6570\u636e\u96c6\u548c\u6a21\u578b\u4e00\u8d77\u63a2\u7d22\u7684\u65b9\u5f0f\u975e\u5e38\u6709\u5e2e\u52a9\u3002\u8981\u52a0\u8f7d\u793a\u4f8b\u6570\u636e\uff0c\u60a8\u53ef\u4ee5\u5c06\u5d4c\u5957\u5217\u8868\u63d0\u4f9b\u7ed9 Interface \u6784\u9020\u51fd\u6570\u7684 `examples=` \u5173\u952e\u5b57\u53c2\u6570\u3002\u5916\u90e8\u5217\u8868\u4e2d\u7684\u6bcf\u4e2a\u5b50\u5217\u8868\u8868\u793a\u4e00\u4e2a\u6570\u636e\u6837\u672c\uff0c\u5b50\u5217\u8868\u4e2d\u7684\u6bcf\u4e2a\u5143\u7d20\u8868\u793a\u6bcf\u4e2a\u8f93\u5165\u7ec4\u4ef6\u7684\u8f93\u5165\u3002\u6709\u5173\u6bcf\u4e2a\u7ec4\u4ef6\u7684\u793a\u4f8b\u6570\u636e\u683c\u5f0f\u5728[Docs](https://gradio.app/docs#components)\u4e2d\u6709\u8bf4\u660e\u3002\n\n$code_calculator\n$demo_calculator",
      "$code_calculator\n$demo_calculator\n\n\u60a8\u53ef\u4ee5\u5c06\u5927\u578b\u6570\u636e\u96c6\u52a0\u8f7d\u5230\u793a\u4f8b\u4e2d\uff0c\u901a\u8fc7 Gradio \u6d4f\u89c8\u548c\u4e0e\u6570\u636e\u96c6\u8fdb\u884c\u4ea4\u4e92\u3002\u793a\u4f8b\u5c06\u81ea\u52a8\u5206\u9875\uff08\u53ef\u4ee5\u901a\u8fc7 Interface \u7684 `examples_per_page` \u53c2\u6570\u8fdb\u884c\u914d\u7f6e\uff09\u3002\n\n\u7ee7\u7eed\u4e86\u89e3\u793a\u4f8b\uff0c\u8bf7\u53c2\u9605[\u66f4\u591a\u793a\u4f8b](https://gradio.app/more-on-examples)\u6307\u5357\u3002\n\n## \u9519\u8bef\n\n\u60a8\u5e0c\u671b\u5411\u7528\u6237\u4f20\u9012\u81ea\u5b9a\u4e49\u9519\u8bef\u6d88\u606f\u3002\u4e3a\u6b64\uff0cwith `gr.Error(\"custom message\")` \u6765\u663e\u793a\u9519\u8bef\u6d88\u606f\u3002\u5982\u679c\u5728\u4e0a\u9762\u7684\u8ba1\u7b97\u5668\u793a\u4f8b\u4e2d\u5c1d\u8bd5\u9664\u4ee5\u96f6\uff0c\u5c06\u663e\u793a\u81ea\u5b9a\u4e49\u9519\u8bef\u6d88\u606f\u7684\u5f39\u51fa\u6a21\u6001\u7a97\u53e3\u3002\u4e86\u89e3\u6709\u5173\u9519\u8bef\u7684\u66f4\u591a\u4fe1\u606f\uff0c\u8bf7\u53c2\u9605[\u6587\u6863](https://gradio.app/docs#error)\u3002",
      "## \u63cf\u8ff0\u6027\u5185\u5bb9\n\n\u5728\u524d\u9762\u7684\u793a\u4f8b\u4e2d\uff0c\u60a8\u53ef\u80fd\u5df2\u7ecf\u6ce8\u610f\u5230 Interface \u6784\u9020\u51fd\u6570\u4e2d\u7684 `title=` \u548c `description=` \u5173\u952e\u5b57\u53c2\u6570\uff0c\u5e2e\u52a9\u7528\u6237\u4e86\u89e3\u60a8\u7684\u5e94\u7528\u7a0b\u5e8f\u3002\n\nInterface \u6784\u9020\u51fd\u6570\u4e2d\u6709\u4e09\u4e2a\u53c2\u6570\u7528\u4e8e\u6307\u5b9a\u6b64\u5185\u5bb9\u5e94\u653e\u7f6e\u5728\u54ea\u91cc\uff1a\n\n- `title`\uff1a\u63a5\u53d7\u6587\u672c\uff0c\u5e76\u53ef\u4ee5\u5c06\u5176\u663e\u793a\u5728\u754c\u9762\u7684\u9876\u90e8\uff0c\u4e5f\u5c06\u6210\u4e3a\u9875\u9762\u6807\u9898\u3002\n- `description`\uff1a\u63a5\u53d7\u6587\u672c\u3001Markdown \u6216 HTML\uff0c\u5e76\u5c06\u5176\u653e\u7f6e\u5728\u6807\u9898\u6b63\u4e0b\u65b9\u3002\n- `article`\uff1a\u4e5f\u63a5\u53d7\u6587\u672c\u3001Markdown \u6216 HTML\uff0c\u5e76\u5c06\u5176\u653e\u7f6e\u5728\u754c\u9762\u4e0b\u65b9\u3002\n\n![annotated](/assets/guides/annotated.png)",
      "![annotated](/assets/guides/annotated.png)\n\n\u5982\u679c\u60a8\u4f7f\u7528\u7684\u662f `Blocks` API\uff0c\u5219\u53ef\u4ee5 with `gr.Markdown(...)` \u6216 `gr.HTML(...)` \u7ec4\u4ef6\u5728\u4efb\u4f55\u4f4d\u7f6e\u63d2\u5165\u6587\u672c\u3001Markdown \u6216 HTML\uff0c\u5176\u4e2d\u63cf\u8ff0\u6027\u5185\u5bb9\u4f4d\u4e8e `Component` \u6784\u9020\u51fd\u6570\u5185\u90e8\u3002\n\n\u53e6\u4e00\u4e2a\u6709\u7528\u7684\u5173\u952e\u5b57\u53c2\u6570\u662f `label=`\uff0c\u5b83\u5b58\u5728\u4e8e\u6bcf\u4e2a `Component` \u4e2d\u3002\u8fd9\u4fee\u6539\u4e86\u6bcf\u4e2a `Component` \u9876\u90e8\u7684\u6807\u7b7e\u6587\u672c\u3002\u8fd8\u53ef\u4ee5\u4e3a\u8bf8\u5982 `Textbox` \u6216 `Radio` \u4e4b\u7c7b\u7684\u8868\u5355\u5143\u7d20\u6dfb\u52a0 `info=` \u5173\u952e\u5b57\u53c2\u6570\uff0c\u4ee5\u63d0\u4f9b\u6709\u5173\u5176\u7528\u6cd5\u7684\u8fdb\u4e00\u6b65\u4fe1\u606f\u3002\n\n```python\ngr.Number(label='\u5e74\u9f84', info='\u4ee5\u5e74\u4e3a\u5355\u4f4d\uff0c\u5fc5\u987b\u5927\u4e8e0')\n```\n\n## \u65d7\u6807",
      "## \u65d7\u6807\n\n\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\"Interface\" \u5c06\u6709\u4e00\u4e2a \"Flag\" \u6309\u94ae\u3002\u5f53\u7528\u6237\u6d4b\u8bd5\u60a8\u7684 `Interface` \u65f6\uff0c\u5982\u679c\u770b\u5230\u6709\u8da3\u7684\u8f93\u51fa\uff0c\u4f8b\u5982\u9519\u8bef\u6216\u610f\u5916\u7684\u6a21\u578b\u884c\u4e3a\uff0c\u4ed6\u4eec\u53ef\u4ee5\u5c06\u8f93\u5165\u6807\u8bb0\u4e3a\u60a8\u8fdb\u884c\u67e5\u770b\u3002\u5728\u7531 `Interface` \u6784\u9020\u51fd\u6570\u7684 `flagging_dir=` \u53c2\u6570\u63d0\u4f9b\u7684\u76ee\u5f55\u4e2d\uff0c\u5c06\u8bb0\u5f55\u6807\u8bb0\u7684\u8f93\u5165\u5230\u4e00\u4e2a CSV \u6587\u4ef6\u4e2d\u3002\u5982\u679c\u754c\u9762\u6d89\u53ca\u6587\u4ef6\u6570\u636e\uff0c\u4f8b\u5982\u56fe\u50cf\u548c\u97f3\u9891\u7ec4\u4ef6\uff0c\u5c06\u521b\u5efa\u6587\u4ef6\u5939\u6765\u5b58\u50a8\u8fd9\u4e9b\u6807\u8bb0\u7684\u6570\u636e\u3002\n\n\u4f8b\u5982\uff0c\u5bf9\u4e8e\u4e0a\u9762\u663e\u793a\u7684\u8ba1\u7b97\u5668\u754c\u9762\uff0c\u6211\u4eec\u5c06\u5728\u4e0b\u9762\u7684\u65d7\u6807\u76ee\u5f55\u4e2d\u5b58\u50a8\u6807\u8bb0\u7684\u6570\u636e\uff1a\n\n```directory\n+-- calculator.py\n+-- flagged/\n|   +-- logs.csv\n```",
      "_flagged/logs.csv_\n\n```csv\nnum1,operation,num2,Output\n5,add,7,12\n6,subtract,1.5,4.5\n```\n\n\u4e0e\u65e9\u671f\u663e\u793a\u7684\u51b7\u8272\u754c\u9762\u76f8\u5bf9\u5e94\uff0c\u6211\u4eec\u5c06\u5728\u4e0b\u9762\u7684\u65d7\u6807\u76ee\u5f55\u4e2d\u5b58\u50a8\u6807\u8bb0\u7684\u6570\u636e\uff1a\n\n```directory\n+-- sepia.py\n+-- flagged/\n|   +-- logs.csv\n|   +-- im/\n|   |   +-- 0.png\n|   |   +-- 1.png\n|   +-- Output/\n|   |   +-- 0.png\n|   |   +-- 1.png\n```\n\n_flagged/logs.csv_\n\n```csv\nim,Output\nim/0.png,Output/0.png\nim/1.png,Output/1.png\n```",
      "\u5982\u679c\u60a8\u5e0c\u671b\u7528\u6237\u63d0\u4f9b\u65d7\u6807\u539f\u56e0\uff0c\u53ef\u4ee5\u5c06\u5b57\u7b26\u4e32\u5217\u8868\u4f20\u9012\u7ed9 Interface \u7684 `flagging_options` \u53c2\u6570\u3002\u7528\u6237\u5728\u8fdb\u884c\u65d7\u6807\u65f6\u5fc5\u987b\u9009\u62e9\u5176\u4e2d\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u8fd9\u5c06\u4f5c\u4e3a\u9644\u52a0\u5217\u4fdd\u5b58\u5230 CSV \u4e2d\u3002\n\n## \u9884\u5904\u7406\u548c\u540e\u5904\u7406 (Preprocessing and Postprocessing)\n\n![annotated](/assets/img/dataflow.svg)\n\n\u5982\u60a8\u6240\u89c1\uff0cGradio \u5305\u62ec\u53ef\u4ee5\u5904\u7406\u5404\u79cd\u4e0d\u540c\u6570\u636e\u7c7b\u578b\u7684\u7ec4\u4ef6\uff0c\u4f8b\u5982\u56fe\u50cf\u3001\u97f3\u9891\u548c\u89c6\u9891\u3002\u5927\u591a\u6570\u7ec4\u4ef6\u90fd\u53ef\u4ee5\u7528\u4f5c\u8f93\u5165\u6216\u8f93\u51fa\u3002",
      "\u5f53\u7ec4\u4ef6\u7528\u4f5c\u8f93\u5165\u65f6\uff0cGradio \u81ea\u52a8\u5904\u7406*\u9884\u5904\u7406*\uff0c\u5c06\u6570\u636e\u4ece\u7528\u6237\u6d4f\u89c8\u5668\u53d1\u9001\u7684\u7c7b\u578b\uff08\u4f8b\u5982\u7f51\u7edc\u6444\u50cf\u5934\u5feb\u7167\u7684 base64 \u8868\u793a\uff09\u8f6c\u6362\u4e3a\u60a8\u7684\u51fd\u6570\u53ef\u4ee5\u63a5\u53d7\u7684\u5f62\u5f0f\uff08\u4f8b\u5982 `numpy` \u6570\u7ec4\uff09\u3002\n\n\u540c\u6837\uff0c\u5f53\u7ec4\u4ef6\u7528\u4f5c\u8f93\u51fa\u65f6\uff0cGradio \u81ea\u52a8\u5904\u7406*\u540e\u5904\u7406*\uff0c\u5c06\u6570\u636e\u4ece\u51fd\u6570\u8fd4\u56de\u7684\u5f62\u5f0f\uff08\u4f8b\u5982\u56fe\u50cf\u8def\u5f84\u5217\u8868\uff09\u8f6c\u6362\u4e3a\u53ef\u4ee5\u5728\u7528\u6237\u6d4f\u89c8\u5668\u4e2d\u663e\u793a\u7684\u5f62\u5f0f\uff08\u4f8b\u5982\u4ee5 base64 \u683c\u5f0f\u663e\u793a\u56fe\u50cf\u7684 `Gallery`\uff09\u3002",
      "\u60a8\u53ef\u4ee5\u4f7f\u7528\u6784\u5efa\u56fe\u50cf\u7ec4\u4ef6\u65f6\u7684\u53c2\u6570\u63a7\u5236*\u9884\u5904\u7406*\u3002\u4f8b\u5982\uff0c\u5982\u679c\u60a8\u4f7f\u7528\u4ee5\u4e0b\u53c2\u6570\u5b9e\u4f8b\u5316 `Image` \u7ec4\u4ef6\uff0c\u5b83\u5c06\u5c06\u56fe\u50cf\u8f6c\u6362\u4e3a `PIL` \u7c7b\u578b\uff0c\u5e76\u5c06\u5176\u91cd\u5851\u4e3a`(100, 100)`\uff0c\u800c\u4e0d\u7ba1\u63d0\u4ea4\u65f6\u7684\u539f\u59cb\u5927\u5c0f\u5982\u4f55\uff1a\n\n```py\nimg = gr.Image(shape=(100, 100), type=\"pil\")\n```\n\n\u76f8\u53cd\uff0c\u8fd9\u91cc\u6211\u4eec\u4fdd\u7559\u56fe\u50cf\u7684\u539f\u59cb\u5927\u5c0f\uff0c\u4f46\u5728\u5c06\u5176\u8f6c\u6362\u4e3a numpy \u6570\u7ec4\u4e4b\u524d\u53cd\u8f6c\u989c\u8272\uff1a\n\n```py\nimg = gr.Image(invert_colors=True, type=\"numpy\")\n```",
      "```py\nimg = gr.Image(invert_colors=True, type=\"numpy\")\n```\n\n\u540e\u5904\u7406\u8981\u5bb9\u6613\u5f97\u591a\uff01Gradio \u81ea\u52a8\u8bc6\u522b\u8fd4\u56de\u6570\u636e\u7684\u683c\u5f0f\uff08\u4f8b\u5982 `Image` \u662f `numpy` \u6570\u7ec4\u8fd8\u662f `str` \u6587\u4ef6\u8def\u5f84\uff1f\uff09\uff0c\u5e76\u5c06\u5176\u540e\u5904\u7406\u4e3a\u53ef\u4ee5\u7531\u6d4f\u89c8\u5668\u663e\u793a\u7684\u683c\u5f0f\u3002\n\n\u8bf7\u67e5\u770b[\u6587\u6863](https://gradio.app/docs)\uff0c\u4e86\u89e3\u6bcf\u4e2a\u7ec4\u4ef6\u7684\u6240\u6709\u4e0e\u9884\u5904\u7406\u76f8\u5173\u7684\u53c2\u6570\u3002\n\n## \u6837\u5f0f (Styling)\n\nGradio \u4e3b\u9898\u662f\u81ea\u5b9a\u4e49\u5e94\u7528\u7a0b\u5e8f\u5916\u89c2\u548c\u611f\u89c9\u7684\u6700\u7b80\u5355\u65b9\u6cd5\u3002\u60a8\u53ef\u4ee5\u9009\u62e9\u591a\u79cd\u4e3b\u9898\u6216\u521b\u5efa\u81ea\u5df1\u7684\u4e3b\u9898\u3002\u8981\u8fd9\u6837\u505a\uff0c\u8bf7\u5c06 `theme=` \u53c2\u6570\u4f20\u9012\u7ed9 `Interface` \u6784\u9020\u51fd\u6570\u3002\u4f8b\u5982\uff1a\n\n```python\ndemo = gr.Interface(..., theme=gr.themes.Monochrome())\n```",
      "```python\ndemo = gr.Interface(..., theme=gr.themes.Monochrome())\n```\n\nGradio \u5e26\u6709\u4e00\u7ec4\u9884\u5148\u6784\u5efa\u7684\u4e3b\u9898\uff0c\u60a8\u53ef\u4ee5\u4ece `gr.themes.*` \u52a0\u8f7d\u3002\u60a8\u53ef\u4ee5\u6269\u5c55\u8fd9\u4e9b\u4e3b\u9898\u6216\u4ece\u5934\u5f00\u59cb\u521b\u5efa\u81ea\u5df1\u7684\u4e3b\u9898 - \u6709\u5173\u66f4\u591a\u8be6\u7ec6\u4fe1\u606f\uff0c\u8bf7\u53c2\u9605[\u4e3b\u9898\u6307\u5357](https://gradio.app/theming-guide)\u3002\n\n\u8981\u589e\u52a0\u989d\u5916\u7684\u6837\u5f0f\u80fd\u529b\uff0c\u60a8\u53ef\u4ee5 with `css=` \u5173\u952e\u5b57\u5c06\u4efb\u4f55 CSS \u4f20\u9012\u7ed9\u60a8\u7684\u5e94\u7528\u7a0b\u5e8f\u3002\nGradio \u5e94\u7528\u7a0b\u5e8f\u7684\u57fa\u7c7b\u662f `gradio-container`\uff0c\u56e0\u6b64\u4ee5\u4e0b\u662f\u4e00\u4e2a\u66f4\u6539 Gradio \u5e94\u7528\u7a0b\u5e8f\u80cc\u666f\u989c\u8272\u7684\u793a\u4f8b\uff1a\n\n```python\nwith `gr.Interface(css=\".gradio-container {background-color: red}\") as demo:\n    ...\n```",
      "## \u961f\u5217 (Queuing)\n\n\u5982\u679c\u60a8\u7684\u5e94\u7528\u7a0b\u5e8f\u9884\u8ba1\u4f1a\u6709\u5927\u91cf\u6d41\u91cf\uff0c\u8bf7 with `queue()` \u65b9\u6cd5\u6765\u63a7\u5236\u5904\u7406\u901f\u7387\u3002\u8fd9\u5c06\u6392\u961f\u5904\u7406\u8c03\u7528\uff0c\u56e0\u6b64\u4e00\u6b21\u53ea\u5904\u7406\u4e00\u5b9a\u6570\u91cf\u7684\u8bf7\u6c42\u3002\u961f\u5217\u4f7f\u7528 Websockets\uff0c\u8fd8\u53ef\u4ee5\u9632\u6b62\u7f51\u7edc\u8d85\u65f6\uff0c\u56e0\u6b64\u5982\u679c\u60a8\u7684\u51fd\u6570\u7684\u63a8\u7406\u65f6\u95f4\u5f88\u957f\uff08> 1 \u5206\u949f\uff09\uff0c\u5e94\u4f7f\u7528\u961f\u5217\u3002\n\nwith `Interface`\uff1a\n\n```python\ndemo = gr.Interface(...).queue()\ndemo.launch()\n```\n\nwith `Blocks`\uff1a\n\n```python\nwith gr.Blocks() as demo\uff1a\n    #...\ndemo.queue()\ndemo.launch()\n```\n\n\u60a8\u53ef\u4ee5\u901a\u8fc7\u4ee5\u4e0b\u65b9\u5f0f\u63a7\u5236\u4e00\u6b21\u5904\u7406\u7684\u8bf7\u6c42\u6570\u91cf\uff1a\n\n```python\ndemo.queue(concurrency_count=3)\n```",
      "```python\ndemo.queue(concurrency_count=3)\n```\n\n\u67e5\u770b\u6709\u5173\u914d\u7f6e\u5176\u4ed6\u961f\u5217\u53c2\u6570\u7684[\u961f\u5217\u6587\u6863](/docs/#queue)\u3002\n\n\u5728 Blocks \u4e2d\u6307\u5b9a\u4ec5\u5bf9\u67d0\u4e9b\u51fd\u6570\u8fdb\u884c\u6392\u961f\uff1a\n\n```python\nwith gr.Blocks() as demo2\uff1a\n    num1 = gr.Number()\n    num2 = gr.Number()\n    output = gr.Number()\n    gr.Button(\"Add\").click(\n        lambda a, b: a + b, [num1, num2], output)\n    gr.Button(\"Multiply\").click(\n        lambda a, b: a * b, [num1, num2], output, queue=True)\ndemo2.launch()\n```\n\n## \u8fed\u4ee3\u8f93\u51fa (Iterative Outputs)",
      "## \u8fed\u4ee3\u8f93\u51fa (Iterative Outputs)\n\n\u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\uff0c\u60a8\u53ef\u80fd\u9700\u8981\u4f20\u8f93\u4e00\u7cfb\u5217\u8f93\u51fa\u800c\u4e0d\u662f\u4e00\u6b21\u663e\u793a\u5355\u4e2a\u8f93\u51fa\u3002\u4f8b\u5982\uff0c\u60a8\u53ef\u80fd\u6709\u4e00\u4e2a\u56fe\u50cf\u751f\u6210\u6a21\u578b\uff0c\u5e0c\u671b\u663e\u793a\u751f\u6210\u7684\u6bcf\u4e2a\u6b65\u9aa4\u7684\u56fe\u50cf\uff0c\u76f4\u5230\u6700\u7ec8\u56fe\u50cf\u3002\u6216\u8005\u60a8\u53ef\u80fd\u6709\u4e00\u4e2a\u804a\u5929\u673a\u5668\u4eba\uff0c\u5b83\u9010\u5b57\u9010\u53e5\u5730\u6d41\u5f0f\u4f20\u8f93\u54cd\u5e94\uff0c\u800c\u4e0d\u662f\u4e00\u6b21\u8fd4\u56de\u5168\u90e8\u54cd\u5e94\u3002",
      "\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u60a8\u53ef\u4ee5\u5c06**\u751f\u6210\u5668**\u51fd\u6570\u63d0\u4f9b\u7ed9 Gradio\uff0c\u800c\u4e0d\u662f\u5e38\u89c4\u51fd\u6570\u3002\u5728 Python \u4e2d\u521b\u5efa\u751f\u6210\u5668\u975e\u5e38\u7b80\u5355\uff1a\u51fd\u6570\u4e0d\u5e94\u8be5\u6709\u4e00\u4e2a\u5355\u72ec\u7684 `return` \u503c\uff0c\u800c\u662f\u5e94\u8be5 with `yield` \u8fde\u7eed\u8fd4\u56de\u4e00\u7cfb\u5217\u503c\u3002\u901a\u5e38\uff0c`yield` \u8bed\u53e5\u653e\u7f6e\u5728\u67d0\u79cd\u5faa\u73af\u4e2d\u3002\u4e0b\u9762\u662f\u4e00\u4e2a\u7b80\u5355\u793a\u4f8b\uff0c\u751f\u6210\u5668\u53ea\u662f\u7b80\u5355\u8ba1\u6570\u5230\u7ed9\u5b9a\u6570\u5b57\uff1a\n\n```python\ndef my_generator(x):\n    for i in range(x):\n        yield i\n```\n\n\u60a8\u4ee5\u4e0e\u5e38\u89c4\u51fd\u6570\u76f8\u540c\u7684\u65b9\u5f0f\u5c06\u751f\u6210\u5668\u63d0\u4f9b\u7ed9 Gradio\u3002\u4f8b\u5982\uff0c\u8fd9\u662f\u4e00\u4e2a\uff08\u865a\u62df\u7684\uff09\u56fe\u50cf\u751f\u6210\u6a21\u578b\uff0c\u5b83\u5728\u8f93\u51fa\u56fe\u50cf\u4e4b\u524d\u751f\u6210\u6570\u4e2a\u6b65\u9aa4\u7684\u566a\u97f3\uff1a",
      "$code_fake_diffusion\n$demo_fake_diffusion\n\n\u8bf7\u6ce8\u610f\uff0c\u6211\u4eec\u5728\u8fed\u4ee3\u5668\u4e2d\u6dfb\u52a0\u4e86 `time.sleep(1)`\uff0c\u4ee5\u521b\u5efa\u6b65\u9aa4\u4e4b\u95f4\u7684\u4eba\u5de5\u6682\u505c\uff0c\u4ee5\u4fbf\u60a8\u53ef\u4ee5\u89c2\u5bdf\u8fed\u4ee3\u5668\u7684\u6b65\u9aa4\uff08\u5728\u771f\u5b9e\u7684\u56fe\u50cf\u751f\u6210\u6a21\u578b\u4e2d\uff0c\u8fd9\u53ef\u80fd\u662f\u4e0d\u5fc5\u8981\u7684\uff09\u3002\n\n\u5c06\u751f\u6210\u5668\u63d0\u4f9b\u7ed9 Gradio **\u9700\u8981**\u5728\u5e95\u5c42 Interface \u6216 Blocks \u4e2d\u542f\u7528\u961f\u5217\uff08\u8bf7\u53c2\u9605\u4e0a\u9762\u7684\u961f\u5217\u90e8\u5206\uff09\u3002\n\n## \u8fdb\u5ea6\u6761",
      "## \u8fdb\u5ea6\u6761\n\nGradio \u652f\u6301\u521b\u5efa\u81ea\u5b9a\u4e49\u8fdb\u5ea6\u6761\uff0c\u4ee5\u4fbf\u60a8\u53ef\u4ee5\u81ea\u5b9a\u4e49\u548c\u63a7\u5236\u5411\u7528\u6237\u663e\u793a\u7684\u8fdb\u5ea6\u66f4\u65b0\u3002\u8981\u542f\u7528\u6b64\u529f\u80fd\uff0c\u53ea\u9700\u4e3a\u65b9\u6cd5\u6dfb\u52a0\u4e00\u4e2a\u9ed8\u8ba4\u503c\u4e3a `gr.Progress` \u5b9e\u4f8b\u7684\u53c2\u6570\u5373\u53ef\u3002\u7136\u540e\uff0c\u60a8\u53ef\u4ee5\u76f4\u63a5\u8c03\u7528\u6b64\u5b9e\u4f8b\u5e76\u4f20\u5165 0 \u5230 1 \u4e4b\u95f4\u7684\u6d6e\u70b9\u6570\u6765\u66f4\u65b0\u8fdb\u5ea6\u7ea7\u522b\uff0c\u6216\u8005 with `Progress` \u5b9e\u4f8b\u7684 `tqdm()` \u65b9\u6cd5\u6765\u8ddf\u8e2a\u53ef\u8fed\u4ee3\u5bf9\u8c61\u4e0a\u7684\u8fdb\u5ea6\uff0c\u5982\u4e0b\u6240\u793a\u3002\u5fc5\u987b\u542f\u7528\u961f\u5217\u4ee5\u8fdb\u884c\u8fdb\u5ea6\u66f4\u65b0\u3002\n\n$code_progress_simple\n$demo_progress_simple",
      "$code_progress_simple\n$demo_progress_simple\n\n\u5982\u679c\u60a8 with `tqdm` \u5e93\uff0c\u5e76\u4e14\u5e0c\u671b\u4ece\u51fd\u6570\u5185\u90e8\u7684\u4efb\u4f55 `tqdm.tqdm` \u81ea\u52a8\u62a5\u544a\u8fdb\u5ea6\u66f4\u65b0\uff0c\u8bf7\u5c06\u9ed8\u8ba4\u53c2\u6570\u8bbe\u7f6e\u4e3a `gr.Progress(track_tqdm=True)`\uff01\n\n## \u6279\u5904\u7406\u51fd\u6570 (Batch Functions)\n\nGradio \u652f\u6301\u4f20\u9012*\u6279\u5904\u7406*\u51fd\u6570\u3002\u6279\u5904\u7406\u51fd\u6570\u53ea\u662f\u63a5\u53d7\u8f93\u5165\u5217\u8868\u5e76\u8fd4\u56de\u9884\u6d4b\u5217\u8868\u7684\u51fd\u6570\u3002\n\n\u4f8b\u5982\uff0c\u8fd9\u662f\u4e00\u4e2a\u6279\u5904\u7406\u51fd\u6570\uff0c\u5b83\u63a5\u53d7\u4e24\u4e2a\u8f93\u5165\u5217\u8868\uff08\u4e00\u4e2a\u5355\u8bcd\u5217\u8868\u548c\u4e00\u4e2a\u6574\u6570\u5217\u8868\uff09\uff0c\u5e76\u8fd4\u56de\u4fee\u526a\u8fc7\u7684\u5355\u8bcd\u5217\u8868\u4f5c\u4e3a\u8f93\u51fa\uff1a\n\n```python\nimport time",
      "```python\nimport time\n\ndef trim_words(words, lens):\n    trimmed_words = []\n    time.sleep(5)\n    for w, l in zip(words, lens):\n        trimmed_words.append(w[:int(l)])\n    return [trimmed_words]\n    for w, l in zip(words, lens):\n```\n\n\u4f7f\u7528\u6279\u5904\u7406\u51fd\u6570\u7684\u4f18\u70b9\u662f\uff0c\u5982\u679c\u542f\u7528\u4e86\u961f\u5217\uff0cGradio \u670d\u52a1\u5668\u53ef\u4ee5\u81ea\u52a8*\u6279\u5904\u7406*\u4f20\u5165\u7684\u8bf7\u6c42\u5e76\u5e76\u884c\u5904\u7406\u5b83\u4eec\uff0c\u4ece\u800c\u53ef\u80fd\u52a0\u5feb\u6f14\u793a\u901f\u5ea6\u3002\u4ee5\u4e0b\u662f Gradio \u4ee3\u7801\u7684\u793a\u4f8b\uff08\u8bf7\u6ce8\u610f `batch=True` \u548c `max_batch_size=16` - \u8fd9\u4e24\u4e2a\u53c2\u6570\u90fd\u53ef\u4ee5\u4f20\u9012\u7ed9\u4e8b\u4ef6\u89e6\u53d1\u5668\u6216 `Interface` \u7c7b\uff09\n\nwith `Interface`\uff1a",
      "with `Interface`\uff1a\n\n```python\ndemo = gr.Interface(trim_words, [\"textbox\", \"number\"], [\"output\"],\n                    batch=True, max_batch_size=16)\ndemo.queue()\ndemo.launch()\n```\n\nwith `Blocks`\uff1a\n\n```python\nimport gradio as gr\n\nwith gr.Blocks() as demo:\n    with gr.Row():\n        word = gr.Textbox(label=\"word\")\n        leng = gr.Number(label=\"leng\")\n        output = gr.Textbox(label=\"Output\")\n    with gr.Row():\n        run = gr.Button()\n\n    event = run.click(trim_words, [word, leng], output, batch=True, max_batch_size=16)\n\ndemo.queue()\ndemo.launch()\n```",
      "demo.queue()\ndemo.launch()\n```\n\n\u5728\u4e0a\u9762\u7684\u793a\u4f8b\u4e2d\uff0c\u53ef\u4ee5\u5e76\u884c\u5904\u7406 16 \u4e2a\u8bf7\u6c42\uff08\u603b\u63a8\u7406\u65f6\u95f4\u4e3a 5 \u79d2\uff09\uff0c\u800c\u4e0d\u662f\u5206\u522b\u5904\u7406\u6bcf\u4e2a\u8bf7\u6c42\uff08\u603b\u63a8\u7406\u65f6\u95f4\u4e3a 80 \u79d2\uff09\u3002\u8bb8\u591a Hugging Face \u7684 `transformers` \u548c `diffusers` \u6a21\u578b\u5728 Gradio \u7684\u6279\u5904\u7406\u6a21\u5f0f\u4e0b\u81ea\u7136\u5de5\u4f5c\uff1a\u8fd9\u662f[\u4f7f\u7528\u6279\u5904\u7406\u751f\u6210\u56fe\u50cf\u7684\u793a\u4f8b\u6f14\u793a](https://github.com/gradio-app/gradio/blob/main/demo/diffusers_with_batching/run.py)\n\n\u6ce8\u610f\uff1a\u4f7f\u7528 Gradio \u7684\u6279\u5904\u7406\u51fd\u6570 **requires** \u5728\u5e95\u5c42 Interface \u6216 Blocks \u4e2d\u542f\u7528\u961f\u5217\uff08\u8bf7\u53c2\u9605\u4e0a\u9762\u7684\u961f\u5217\u90e8\u5206\uff09\u3002\n\n## Gradio \u7b14\u8bb0\u672c (Colab Notebooks)",
      "Gradio \u53ef\u4ee5\u5728\u4efb\u4f55\u8fd0\u884c Python \u7684\u5730\u65b9\u8fd0\u884c\uff0c\u5305\u62ec\u672c\u5730 Jupyter \u7b14\u8bb0\u672c\u548c\u534f\u4f5c\u7b14\u8bb0\u672c\uff0c\u5982[Google Colab](https://colab.research.google.com/)\u3002\u5bf9\u4e8e\u672c\u5730 Jupyter \u7b14\u8bb0\u672c\u548c Google Colab \u7b14\u8bb0\u672c\uff0cGradio \u5728\u672c\u5730\u670d\u52a1\u5668\u4e0a\u8fd0\u884c\uff0c\u60a8\u53ef\u4ee5\u5728\u6d4f\u89c8\u5668\u4e2d\u4e0e\u4e4b\u4ea4\u4e92\u3002\uff08\u6ce8\u610f\uff1a\u5bf9\u4e8e Google Colab\uff0c\u8fd9\u662f\u901a\u8fc7[\u670d\u52a1\u5de5\u4f5c\u5668\u96a7\u9053](https://github.com/tensorflow/tensorboard/blob/master/docs/design/colab_integration.md)\u5b9e\u73b0\u7684\uff0c\u60a8\u7684\u6d4f\u89c8\u5668\u9700\u8981\u542f\u7528 cookies\u3002\uff09\u5bf9\u4e8e\u5176\u4ed6\u8fdc\u7a0b\u7b14\u8bb0\u672c\uff0cGradio \u4e5f\u5c06\u5728\u670d\u52a1\u5668\u4e0a\u8fd0\u884c\uff0c\u4f46\u60a8\u9700\u8981\u4f7f\u7528[SSH \u96a7\u9053](https://coderwall",
      ".com/p/ohk6cg/remote-access-to-ipython-notebooks-via-ssh)\u5728\u672c\u5730\u6d4f\u89c8\u5668\u4e2d\u67e5\u770b\u5e94\u7528\u7a0b\u5e8f\u3002\u901a\u5e38\uff0c\u66f4\u7b80\u5355\u7684\u9009\u62e9\u662f\u4f7f\u7528 Gradio \u5185\u7f6e\u7684\u516c\u5171\u94fe\u63a5\uff0c[\u5728\u4e0b\u4e00\u7bc7\u6307\u5357\u4e2d\u8ba8\u8bba](/sharing-your-app/#sharing-demos)\u3002",
      "!--Copyright 2023 The HuggingFace Team. All rights reserved.\n\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\nthe License. You may obtain a copy of the License at\n\nhttp://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software distributed under the License is distributed on\nan \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n\n\u26a0\ufe0f Note that this file is in Markdown but contain specific syntax for our doc-builder (similar to MDX) that may not be\nrendered properly in your Markdown viewer.\n\n-->\n\n# Training on TPU with TensorFlow\n\n<Tip>",
      "-->\n\n# Training on TPU with TensorFlow\n\n<Tip>\n\nIf you don't need long explanations and just want TPU code samples to get started with, check out [our TPU example notebook!](https://colab.research.google.com/github/huggingface/notebooks/blob/main/examples/tpu_training-tf.ipynb)\n\n</Tip>\n\n### What is a TPU?\n\nA TPU is a **Tensor Processing Unit.** They are hardware designed by Google, which are used to greatly speed up the tensor computations within neural networks, much like GPUs. They can be used for both network training and inference. They are generally accessed through Google\u2019s cloud services, but small TPUs can also be accessed directly for free through Google Colab and Kaggle Kernels.",
      "Because [all TensorFlow models in \ud83e\udd17 Transformers are Keras models](https://huggingface.co/blog/tensorflow-philosophy), most of the methods in this document are generally applicable to TPU training for any Keras model! However, there are a few points that are specific to the HuggingFace ecosystem (hug-o-system?) of Transformers and Datasets, and we\u2019ll make sure to flag them up when we get to them.\n\n### What kinds of TPU are available?\n\nNew users are often very confused by the range of TPUs, and the different ways to access them. The first key distinction to understand is the difference between **TPU Nodes** and **TPU VMs.**",
      "When you use a **TPU Node**, you are effectively indirectly accessing a remote TPU. You will need a separate VM, which will initialize your network and data pipeline and then forward them to the remote node. When you use a TPU on Google Colab, you are accessing it in the **TPU Node** style.\n\nUsing TPU Nodes can have some quite unexpected behaviour for people who aren\u2019t used to them! In particular, because the TPU is located on a physically different system to the machine you\u2019re running your Python code on, your data cannot be local to your machine - any data pipeline that loads from your machine\u2019s internal storage will totally fail! Instead, data must be stored in Google Cloud Storage where your data pipeline can still access it, even when the pipeline is running on the remote TPU node.\n\n<Tip>",
      "<Tip>\n\nIf you can fit all your data in memory as `np.ndarray` or `tf.Tensor`, then you can `fit()` on that data even when using Colab or a TPU Node, without needing to upload it to Google Cloud Storage.\n\n</Tip>\n\n<Tip>\n\n**\ud83e\udd17Specific Hugging Face Tip\ud83e\udd17:** The methods `Dataset.to_tf_dataset()` and its higher-level wrapper `model.prepare_tf_dataset()` , which you will see throughout our TF code examples, will both fail on a TPU Node. The reason for this is that even though they create a `tf.data.Dataset` it is not a \u201cpure\u201d `tf.data` pipeline and uses `tf.numpy_function` or `Dataset.from_generator()` to stream data from the underlying HuggingFace `Dataset`. This HuggingFace `Dataset` is backed by data that is on a local disc and which the remote TPU Node will not be able to read.",
      "</Tip>\n\nThe second way to access a TPU is via a **TPU VM.** When using a TPU VM, you connect directly to the machine that the TPU is attached to, much like training on a GPU VM. TPU VMs are generally easier to work with, particularly when it comes to your data pipeline. All of the above warnings do not apply to TPU VMs!",
      "This is an opinionated document, so here\u2019s our opinion: **Avoid using TPU Node if possible.** It is more confusing and more difficult to debug than TPU VMs. It is also likely to be unsupported in future - Google\u2019s latest TPU, TPUv4, can only be accessed as a TPU VM, which suggests that TPU Nodes are increasingly going to become a \u201clegacy\u201d access method. However, we understand that the only free TPU access is on Colab and Kaggle Kernels, which uses TPU Node - so we\u2019ll try to explain how to handle it if you have to! Check the [TPU example notebook](https://colab.research.google.com/github/huggingface/notebooks/blob/main/examples/tpu_training-tf.ipynb) for code samples that explain this in more detail.\n\n### What sizes of TPU are available?",
      "### What sizes of TPU are available?\n\nA single TPU (a v2-8/v3-8/v4-8) runs 8 replicas. TPUs exist in **pods** that can run hundreds or thousands of replicas simultaneously. When you use more than a single TPU but less than a whole pod (for example, a v3-32), your TPU fleet is referred to as a **pod slice.**\n\nWhen you access a free TPU via Colab, you generally get a single v2-8 TPU.\n\n### I keep hearing about this XLA thing. What\u2019s XLA, and how does it relate to TPUs?",
      "XLA is an optimizing compiler, used by both TensorFlow and JAX. In JAX it is the only compiler, whereas in TensorFlow it is optional (but mandatory on TPU!). The easiest way to enable it when training a Keras model is to pass the argument `jit_compile=True` to `model.compile()`. If you don\u2019t get any errors and performance is good, that\u2019s a great sign that you\u2019re ready to move to TPU!\n\nDebugging on TPU is generally a bit harder than on CPU/GPU, so we recommend getting your code running on CPU/GPU with XLA first before trying it on TPU. You don\u2019t have to train for long, of course - just for a few steps to make sure that your model and data pipeline are working like you expect them to.\n\n<Tip>",
      "<Tip>\n\nXLA compiled code is usually faster - so even if you\u2019re not planning to run on TPU, adding `jit_compile=True` can improve your performance. Be sure to note the caveats below about XLA compatibility, though!\n\n</Tip>\n\n<Tip warning={true}>\n\n**Tip born of painful experience:** Although using `jit_compile=True` is a good way to get a speed boost and test if your CPU/GPU code is XLA-compatible, it can actually cause a lot of problems if you leave it in when actually training on TPU. XLA compilation will happen implicitly on TPU, so remember to remove that line before actually running your code on a TPU!\n\n</Tip>\n\n### How do I make my model XLA compatible?",
      "</Tip>\n\n### How do I make my model XLA compatible?\n\nIn many cases, your code is probably XLA-compatible already! However, there are a few things that work in normal TensorFlow that don\u2019t work in XLA. We\u2019ve distilled them into three core rules below:\n\n<Tip>\n\n**\ud83e\udd17Specific HuggingFace Tip\ud83e\udd17:** We\u2019ve put a lot of effort into rewriting our TensorFlow models and loss functions to be XLA-compatible. Our models and loss functions generally obey rule #1 and #2 by default, so you can skip over them if you\u2019re using `transformers` models. Don\u2019t forget about these rules when writing your own models and loss functions, though!\n\n</Tip>\n\n#### XLA Rule #1: Your code cannot have \u201cdata-dependent conditionals\u201d",
      "#### XLA Rule #1: Your code cannot have \u201cdata-dependent conditionals\u201d\n\nWhat that means is that any `if` statement cannot depend on values inside a `tf.Tensor`. For example, this code block cannot be compiled with XLA!\n\n```python\nif tf.reduce_sum(tensor) > 10:\n    tensor = tensor / 2.0\n```\n\nThis might seem very restrictive at first, but most neural net code doesn\u2019t need to do this. You can often get around this restriction by using `tf.cond` (see the documentation [here](https://www.tensorflow.org/api_docs/python/tf/cond)) or by removing the conditional and finding a clever math trick with indicator variables instead, like so:\n\n```python\nsum_over_10 = tf.cast(tf.reduce_sum(tensor) > 10, tf.float32)\ntensor = tensor / (1.0 + sum_over_10)\n```",
      "This code has exactly the same effect as the code above, but by avoiding a conditional, we ensure it will compile with XLA without problems!\n\n#### XLA Rule #2: Your code cannot have \u201cdata-dependent shapes\u201d\n\nWhat this means is that the shape of all of the `tf.Tensor` objects in your code cannot depend on their values. For example, the function `tf.unique` cannot be compiled with XLA, because it returns a `tensor` containing one instance of each unique value in the input. The shape of this output will obviously be different depending on how repetitive the input `Tensor` was, and so XLA refuses to handle it!",
      "In general, most neural network code obeys rule #2 by default. However, there are a few common cases where it becomes a problem. One very common one is when you use **label masking**, setting your labels to a negative value to indicate that those positions should be ignored when computing the loss. If you look at NumPy or PyTorch loss functions that support label masking, you will often see code like this that uses [boolean indexing](https://numpy.org/doc/stable/user/basics.indexing.html#boolean-array-indexing):\n\n```python\nlabel_mask = labels >= 0\nmasked_outputs = outputs[label_mask]\nmasked_labels = labels[label_mask]\nloss = compute_loss(masked_outputs, masked_labels)\nmean_loss = torch.mean(loss)\n```",
      "This code is totally fine in NumPy or PyTorch, but it breaks in XLA! Why? Because the shape of `masked_outputs` and `masked_labels` depends on how many positions are masked - that makes it a **data-dependent shape.** However, just like for rule #1, we can often rewrite this code to yield exactly the same output without any data-dependent shapes.\n\n```python\nlabel_mask = tf.cast(labels >= 0, tf.float32)\nloss = compute_loss(outputs, labels)\nloss = loss * label_mask  # Set negative label positions to 0\nmean_loss = tf.reduce_sum(loss) / tf.reduce_sum(label_mask)\n```",
      "Here, we avoid data-dependent shapes by computing the loss for every position, but zeroing out the masked positions in both the numerator and denominator when we calculate the mean, which yields exactly the same result as the first block while maintaining XLA compatibility. Note that we use the same trick as in rule #1 - converting a `tf.bool` to `tf.float32` and using it as an indicator variable. This is a really useful trick, so remember it if you need to convert your own code to XLA!\n\n#### XLA Rule #3: XLA will need to recompile your model for every different input shape it sees",
      "This is the big one. What this means is that if your input shapes are very variable, XLA will have to recompile your model over and over, which will create huge performance problems. This commonly arises in NLP models, where input texts have variable lengths after tokenization. In other modalities, static shapes are more common and this rule is much less of a problem.\n\nHow can you get around rule #3? The key is **padding** - if you pad all your inputs to the same length, and then use an `attention_mask`, you can get the same results as you\u2019d get from variable shapes, but without any XLA issues. However, excessive padding can cause severe slowdown too - if you pad all your samples to the maximum length in the whole dataset, you might end up with batches consisting endless padding tokens, which will waste a lot of compute and memory!",
      "There isn\u2019t a perfect solution to this problem. However, you can try some tricks. One very useful trick is to **pad batches of samples up to a multiple of a number like 32 or 64 tokens.** This often only increases the number of tokens by a small amount, but it hugely reduces the number of unique input shapes, because every input shape now has to be a multiple of 32 or 64. Fewer unique input shapes means fewer XLA compilations!\n\n<Tip>\n\n**\ud83e\udd17Specific HuggingFace Tip\ud83e\udd17:** Our tokenizers and data collators have methods that can help you here. You can use `padding=\"max_length\"` or `padding=\"longest\"` when calling tokenizers to get them to output padded data. Our tokenizers and data collators also have a `pad_to_multiple_of` argument that you can use to reduce the number of unique input shapes you see!\n\n</Tip>",
      "</Tip>\n\n### How do I actually train my model on TPU?\n\nOnce your training is XLA-compatible and (if you\u2019re using TPU Node / Colab) your dataset has been prepared appropriately, running on TPU is surprisingly easy! All you really need to change in your code is to add a few lines to initialize your TPU, and to ensure that your model and dataset are created inside a `TPUStrategy` scope. Take a look at [our TPU example notebook](https://colab.research.google.com/github/huggingface/notebooks/blob/main/examples/tpu_training-tf.ipynb) to see this in action!\n\n### Summary\n\nThere was a lot in here, so let\u2019s summarize with a quick checklist you can follow when you want to get your model ready for TPU training:",
      "- Make sure your code follows the three rules of XLA\n- Compile your model with `jit_compile=True` on CPU/GPU and confirm that you can train it with XLA\n- Either load your dataset into memory or use a TPU-compatible dataset loading approach (see [notebook](https://colab.research.google.com/github/huggingface/notebooks/blob/main/examples/tpu_training-tf.ipynb))\n- Migrate your code either to Colab (with accelerator set to \u201cTPU\u201d) or a TPU VM on Google Cloud\n- Add TPU initializer code (see [notebook](https://colab.research.google.com/github/huggingface/notebooks/blob/main/examples/tpu_training-tf.ipynb))",
      "- Create your `TPUStrategy` and make sure dataset loading and model creation are inside the `strategy.scope()` (see [notebook](https://colab.research.google.com/github/huggingface/notebooks/blob/main/examples/tpu_training-tf.ipynb))\n- Don\u2019t forget to take `jit_compile=True` out again when you move to TPU!\n- \ud83d\ude4f\ud83d\ude4f\ud83d\ude4f\ud83e\udd7a\ud83e\udd7a\ud83e\udd7a\n- Call model.fit()\n- You did it!",
      "Gradio Demo: blocks_random_slider\n\n\n```\n!pip install -q gradio \n```\n\n\n```\n\nimport gradio as gr\n\n\ndef func(slider_1, slider_2):\n    return slider_1 * 5 + slider_2\n\n\nwith gr.Blocks() as demo:\n    slider = gr.Slider(minimum=-10.2, maximum=15, label=\"Random Slider (Static)\", randomize=True)\n    slider_1 = gr.Slider(minimum=100, maximum=200, label=\"Random Slider (Input 1)\", randomize=True)\n    slider_2 = gr.Slider(minimum=10, maximum=23.2, label=\"Random Slider (Input 2)\", randomize=True)\n    slider_3 = gr.Slider(value=3, label=\"Non random slider\")\n    btn = gr.Button(\"Run\")\n    btn.click(func, inputs=[slider_1, slider_2], outputs=gr.Number())",
      "if __name__ == \"__main__\":\n    demo.launch()\n\n```",
      "Git over SSH\n\nYou can access and write data in repositories on huggingface.co using SSH (Secure Shell Protocol). When you connect via SSH, you authenticate using a private key file on your local machine.\n\nSome actions, such as pushing changes, or cloning private repositories, will require you to upload your SSH public key to your account on huggingface.co.\n\nYou can use a pre-existing SSH key, or generate a new one specifically for huggingface.co.\n\n## Checking for existing SSH keys\n\nIf you have an existing SSH key, you can use that key to authenticate Git operations over SSH.\n\nSSH keys are usually located under `~/.ssh` on Mac & Linux, and under `C:\\\\Users\\\\<username>\\\\.ssh` on Windows. List files under that directory and look for files of the form:\n\n- id_rsa.pub\n- id_ecdsa.pub\n- id_ed25519.pub\n\nThose files contain your SSH public key.",
      "Those files contain your SSH public key.\n\nIf you don't have such file under `~/.ssh`, you will have to [generate a new key](#generating-a-new-ssh-keypair). Otherwise, you can [add your existing SSH public key(s) to your huggingface.co account](#add-a-ssh-key-to-your-account).\n\n## Generating a new SSH keypair\n\nIf you don't have any SSH keys on your machine, you can use `ssh-keygen` to generate a new SSH key pair (public + private keys):\n\n```\n$ ssh-keygen -t ed25519 -C \"your.email@example.co\"\n```\n\nWe recommend entering a passphrase when you are prompted to. A passphrase is an extra layer of security: it is a password that will be prompted whenever you use your SSH key.\n\nOnce your new key is generated, add it to your SSH agent with `ssh-add`:",
      "Once your new key is generated, add it to your SSH agent with `ssh-add`:\n\n```\n$ ssh-add ~/.ssh/id_ed25519\n```\n\nIf you chose a different location than the default to store your SSH key, you would have to replace `~/.ssh/id_ed25519` with the file location you used.\n\n## Add a SSH key to your account\n\nTo access private repositories with SSH, or to push changes via SSH, you will need to add your SSH public key to your huggingface.co account. You can manage your SSH keys [in your user settings](https://huggingface.co/settings/keys).\n\nTo add a SSH key to your account, click on the \"Add SSH key\" button.",
      "To add a SSH key to your account, click on the \"Add SSH key\" button.\n\nThen, enter a name for this key (for example, \"Personal computer\"), and copy and paste the content of your **public** SSH key in the area below. The public key is located in the `~/.ssh/id_XXXX.pub` file you found or generated in the previous steps.\n\nClick on \"Add key\", and voil\u00e0! You have added a SSH key to your huggingface.co account.\n\n\n## Testing your SSH authentication\n\nOnce you have added your SSH key to your huggingface.co account, you can test that the connection works as expected.\n\nIn a terminal, run:\n```\n$ ssh -T git@hf.co\n```\n\nIf you see a message with your username, congrats! Everything went well, you are ready to use git over SSH.",
      "Otherwise, if the message states something like the following, make sure your SSH key is actually used by your SSH agent.\n```\nHi anonymous, welcome to Hugging Face.\n```",
      "!---\nCopyright 2022 The HuggingFace Team. All rights reserved.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n-->\n\n# Token classification with LayoutLMv3 (PyTorch version)",
      "# Token classification with LayoutLMv3 (PyTorch version)\n\nThis directory contains a script, `run_funsd_cord.py`, that can be used to fine-tune (or evaluate) LayoutLMv3 on form understanding datasets, such as [FUNSD](https://guillaumejaume.github.io/FUNSD/) and [CORD](https://github.com/clovaai/cord).\n\nThe script `run_funsd_cord.py` leverages the \ud83e\udd17 Datasets library and the Trainer API. You can easily customize it to your needs.\n\n## Fine-tuning on FUNSD\n\nFine-tuning LayoutLMv3 for token classification on [FUNSD](https://guillaumejaume.github.io/FUNSD/) can be done as follows:",
      "```bash\npython run_funsd_cord.py \\\n  --model_name_or_path microsoft/layoutlmv3-base \\\n  --dataset_name funsd \\\n  --output_dir layoutlmv3-test \\\n  --do_train \\\n  --do_eval \\\n  --max_steps 1000 \\\n  --evaluation_strategy steps \\\n  --eval_steps 100 \\\n  --learning_rate 1e-5 \\\n  --load_best_model_at_end \\\n  --metric_for_best_model \"eval_f1\" \\\n  --push_to_hub \\\n  --push_to_hub\u00b0model_id layoutlmv3-finetuned-funsd\n```",
      "\ud83d\udc40 The resulting model can be found here: https://huggingface.co/nielsr/layoutlmv3-finetuned-funsd. By specifying the `push_to_hub` flag, the model gets uploaded automatically to the hub (regularly), together with a model card, which includes metrics such as precision, recall and F1. Note that you can easily update the model card, as it's just a README file of the respective repo on the hub.\n\nThere's also the \"Training metrics\" [tab](https://huggingface.co/nielsr/layoutlmv3-finetuned-funsd/tensorboard), which shows Tensorboard logs over the course of training. Pretty neat, huh?\n\n## Fine-tuning on CORD\n\nFine-tuning LayoutLMv3 for token classification on [CORD](https://github.com/clovaai/cord) can be done as follows:",
      "```bash\npython run_funsd_cord.py \\\n  --model_name_or_path microsoft/layoutlmv3-base \\\n  --dataset_name cord \\\n  --output_dir layoutlmv3-test \\\n  --do_train \\\n  --do_eval \\\n  --max_steps 1000 \\\n  --evaluation_strategy steps \\\n  --eval_steps 100 \\\n  --learning_rate 5e-5 \\\n  --load_best_model_at_end \\\n  --metric_for_best_model \"eval_f1\" \\\n  --push_to_hub \\\n  --push_to_hub\u00b0model_id layoutlmv3-finetuned-cord\n```\n\n\ud83d\udc40 The resulting model can be found here: https://huggingface.co/nielsr/layoutlmv3-finetuned-cord. Note that a model card gets generated automatically in case you specify the `push_to_hub` flag.",
      "State in Blocks\n\nWe covered [State in Interfaces](https://gradio.app/interface-state), this guide takes a look at state in Blocks, which works mostly the same.\n\n## Global State\n\nGlobal state in Blocks works the same as in Interface. Any variable created outside a function call is a reference shared between all users.\n\n## Session State\n\nGradio supports session **state**, where data persists across multiple submits within a page session, in Blocks apps as well. To reiterate, session data is _not_ shared between different users of your model. To store data in a session state, you need to do three things:\n\n1. Create a `gr.State()` object. If there is a default value to this stateful object, pass that into the constructor.\n2. In the event listener, put the `State` object as an input and output.\n3. In the event listener function, add the variable to the input parameters and the return value.",
      "Let's take a look at a game of hangman.\n\n$code_hangman\n$demo_hangman\n\nLet's see how we do each of the 3 steps listed above in this game:\n\n1. We store the used letters in `used_letters_var`. In the constructor of `State`, we set the initial value of this to `[]`, an empty list.\n2. In `btn.click()`, we have a reference to `used_letters_var` in both the inputs and outputs.\n3. In `guess_letter`, we pass the value of this `State` to `used_letters`, and then return an updated value of this `State` in the return statement.\n\nWith more complex apps, you will likely have many State variables storing session state in a single Blocks app.\n\nLearn more about `State` in the [docs](https://gradio.app/docs#state).",
      "\u5982\u4f55\u4f7f\u7528\u5730\u56fe\u7ec4\u4ef6\u7ed8\u5236\u56fe\u8868\n\nRelated spaces:\nTags: PLOTS, MAPS\n\n## \u7b80\u4ecb\n\n\u672c\u6307\u5357\u4ecb\u7ecd\u5982\u4f55\u4f7f\u7528 Gradio \u7684 `Plot` \u7ec4\u4ef6\u5728\u5730\u56fe\u4e0a\u7ed8\u5236\u5730\u7406\u6570\u636e\u3002Gradio \u7684 `Plot` \u7ec4\u4ef6\u53ef\u4ee5\u4e0e Matplotlib\u3001Bokeh \u548c Plotly \u4e00\u8d77\u4f7f\u7528\u3002\u5728\u672c\u6307\u5357\u4e2d\uff0c\u6211\u4eec\u5c06\u4f7f\u7528 Plotly \u8fdb\u884c\u64cd\u4f5c\u3002Plotly \u53ef\u4ee5\u8ba9\u5f00\u53d1\u4eba\u5458\u8f7b\u677e\u521b\u5efa\u5404\u79cd\u5730\u56fe\u6765\u5c55\u793a\u4ed6\u4eec\u7684\u5730\u7406\u6570\u636e\u3002\u70b9\u51fb[\u8fd9\u91cc](https://plotly.com/python/maps/)\u67e5\u770b\u4e00\u4e9b\u793a\u4f8b\u3002\n\n## \u6982\u8ff0",
      "## \u6982\u8ff0\n\n\u6211\u4eec\u5c06\u4f7f\u7528\u7ebd\u7ea6\u5e02\u7684 Airbnb \u6570\u636e\u96c6\uff0c\u8be5\u6570\u636e\u96c6\u6258\u7ba1\u5728 kaggle \u4e0a\uff0c\u70b9\u51fb[\u8fd9\u91cc](https://www.kaggle.com/datasets/dgomonov/new-york-city-airbnb-open-data)\u3002\u6211\u5df2\u7ecf\u5c06\u5176\u4e0a\u4f20\u5230 Hugging Face Hub \u4f5c\u4e3a\u4e00\u4e2a\u6570\u636e\u96c6\uff0c\u65b9\u4fbf\u4f7f\u7528\u548c\u4e0b\u8f7d\uff0c\u70b9\u51fb[\u8fd9\u91cc](https://huggingface.co/datasets/gradio/NYC-Airbnb-Open-Data)\u3002\u4f7f\u7528\u8fd9\u4e9b\u6570\u636e\uff0c\u6211\u4eec\u5c06\u5728\u5730\u56fe\u4e0a\u7ed8\u5236 Airbnb \u7684\u4f4d\u7f6e\uff0c\u5e76\u5141\u8bb8\u57fa\u4e8e\u4ef7\u683c\u548c\u4f4d\u7f6e\u8fdb\u884c\u7b5b\u9009\u3002\u4e0b\u9762\u662f\u6211\u4eec\u5c06\u8981\u6784\u5efa\u7684\u6f14\u793a\u3002 \u26a1\ufe0f\n\n$demo_map_airbnb\n\n## \u6b65\u9aa4 1-\u52a0\u8f7d CSV \u6570\u636e \ud83d\udcbe\n\n\u8ba9\u6211\u4eec\u9996\u5148\u4ece Hugging Face Hub \u52a0\u8f7d\u7ebd\u7ea6\u5e02\u7684 Airbnb \u6570\u636e\u3002",
      "```python\nfrom datasets import load_dataset\n\ndataset = load_dataset(\"gradio/NYC-Airbnb-Open-Data\", split=\"train\")\ndf = dataset.to_pandas()\n\ndef filter_map(min_price, max_price, boroughs):\n    new_df = df[(df['neighbourhood_group'].isin(boroughs)) &\n            (df['price'] > min_price) & (df['price'] < max_price)]\n    names = new_df[\"name\"].tolist()\n    prices = new_df[\"price\"].tolist()\n    text_list = [(names[i], prices[i]) for i in range(0, len(names))]\n```",
      "\u5728\u4e0a\u9762\u7684\u4ee3\u7801\u4e2d\uff0c\u6211\u4eec\u5148\u5c06 CSV \u6570\u636e\u52a0\u8f7d\u5230\u4e00\u4e2a pandas dataframe \u4e2d\u3002\u8ba9\u6211\u4eec\u9996\u5148\u5b9a\u4e49\u4e00\u4e2a\u51fd\u6570\uff0c\u8fd9\u5c06\u4f5c\u4e3a gradio \u5e94\u7528\u7a0b\u5e8f\u7684\u9884\u6d4b\u51fd\u6570\u3002\u8be5\u51fd\u6570\u5c06\u63a5\u53d7\u6700\u4f4e\u4ef7\u683c\u3001\u6700\u9ad8\u4ef7\u683c\u8303\u56f4\u548c\u7b5b\u9009\u7ed3\u679c\u5730\u533a\u7684\u5217\u8868\u4f5c\u4e3a\u53c2\u6570\u3002\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u4f20\u5165\u7684\u503c (`min_price`\u3001`max_price` \u548c\u5730\u533a\u5217\u8868) \u6765\u7b5b\u9009\u6570\u636e\u6846\u5e76\u521b\u5efa `new_df`\u3002\u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u5c06\u521b\u5efa\u5305\u542b\u6bcf\u4e2a Airbnb \u7684\u540d\u79f0\u548c\u4ef7\u683c\u7684 `text_list`\uff0c\u4ee5\u4fbf\u5728\u5730\u56fe\u4e0a\u4f7f\u7528\u4f5c\u4e3a\u6807\u7b7e\u3002\n\n## \u6b65\u9aa4 2-\u5730\u56fe\u56fe\u8868 \ud83c\udf10",
      "## \u6b65\u9aa4 2-\u5730\u56fe\u56fe\u8868 \ud83c\udf10\n\nPlotly \u4f7f\u5f97\u5904\u7406\u5730\u56fe\u53d8\u5f97\u5f88\u5bb9\u6613\u3002\u8ba9\u6211\u4eec\u770b\u4e00\u4e0b\u4e0b\u9762\u7684\u4ee3\u7801\uff0c\u4e86\u89e3\u5982\u4f55\u521b\u5efa\u5730\u56fe\u56fe\u8868\u3002\n\n```python\nimport plotly.graph_objects as go\n\nfig = go.Figure(go.Scattermapbox(\n            customdata=text_list,\n            lat=new_df['latitude'].tolist(),\n            lon=new_df['longitude'].tolist(),\n            mode='markers',\n            marker=go.scattermapbox.Marker(\n                size=6\n            ),\n            hoverinfo=\"text\",\n            hovertemplate='<b>Name</b>: %{customdata[0]}<br><b>Price</b>: $%{customdata[1]}'\n        ))",
      "fig.update_layout(\n    mapbox_style=\"open-street-map\",\n    hovermode='closest',\n    mapbox=dict(\n        bearing=0,\n        center=go.layout.mapbox.Center(\n            lat=40.67,\n            lon=-73.90\n        ),\n        pitch=0,\n        zoom=9\n    ),\n)\n```\n\n\u4e0a\u9762\u7684\u4ee3\u7801\u4e2d\uff0c\u6211\u4eec\u901a\u8fc7\u4f20\u5165\u7ecf\u7eac\u5ea6\u5217\u8868\u6765\u521b\u5efa\u4e00\u4e2a\u6563\u70b9\u56fe\u3002\u6211\u4eec\u8fd8\u4f20\u5165\u4e86\u540d\u79f0\u548c\u4ef7\u683c\u7684\u81ea\u5b9a\u4e49\u6570\u636e\uff0c\u4ee5\u4fbf\u5728\u9f20\u6807\u60ac\u505c\u5728\u6bcf\u4e2a\u6807\u8bb0\u4e0a\u65f6\u663e\u793a\u989d\u5916\u7684\u4fe1\u606f\u3002\u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u4f7f\u7528 `update_layout` \u6765\u6307\u5b9a\u5176\u4ed6\u5730\u56fe\u8bbe\u7f6e\uff0c\u4f8b\u5982\u7f29\u653e\u548c\u5c45\u4e2d\u3002\n\n\u6709\u5173\u4f7f\u7528 Mapbox \u548c Plotly \u521b\u5efa\u6563\u70b9\u56fe\u7684\u66f4\u591a\u4fe1\u606f\uff0c\u8bf7\u70b9\u51fb[\u8fd9\u91cc](https://plotly.com/python/scattermapbox/)\u3002",
      "## \u6b65\u9aa4 3-Gradio \u5e94\u7528\u7a0b\u5e8f \u26a1\ufe0f\n\n\u6211\u4eec\u5c06\u4f7f\u7528\u4e24\u4e2a `gr.Number` \u7ec4\u4ef6\u548c\u4e00\u4e2a `gr.CheckboxGroup` \u7ec4\u4ef6\uff0c\u5141\u8bb8\u7528\u6237\u6307\u5b9a\u4ef7\u683c\u8303\u56f4\u548c\u5730\u533a\u4f4d\u7f6e\u3002\u7136\u540e\uff0c\u6211\u4eec\u5c06\u4f7f\u7528 `gr.Plot` \u7ec4\u4ef6\u4f5c\u4e3a\u6211\u4eec\u4e4b\u524d\u521b\u5efa\u7684 Plotly + Mapbox \u5730\u56fe\u7684\u8f93\u51fa\u3002",
      "```python\nwith gr.Blocks() as demo:\n    with gr.Column():\n        with gr.Row():\n            min_price = gr.Number(value=250, label=\"Minimum Price\")\n            max_price = gr.Number(value=1000, label=\"Maximum Price\")\n        boroughs = gr.CheckboxGroup(choices=[\"Queens\", \"Brooklyn\", \"Manhattan\", \"Bronx\", \"Staten Island\"], value=[\"Queens\", \"Brooklyn\"], label=\"Select Boroughs:\")\n        btn = gr.Button(value=\"Update Filter\")\n        map = gr.Plot()\n    demo.load(filter_map, [min_price, max_price, boroughs], map)\n    btn.click(filter_map, [min_price, max_price, boroughs], map)\n```",
      "\u6211\u4eec\u4f7f\u7528 `gr.Column` \u548c `gr.Row` \u5e03\u5c40\u8fd9\u4e9b\u7ec4\u4ef6\uff0c\u5e76\u4e3a\u6f14\u793a\u52a0\u8f7d\u65f6\u548c\u70b9\u51fb \" \u66f4\u65b0\u7b5b\u9009 \" \u6309\u94ae\u65f6\u6dfb\u52a0\u4e86\u4e8b\u4ef6\u89e6\u53d1\u5668\uff0c\u4ee5\u89e6\u53d1\u5730\u56fe\u66f4\u65b0\u65b0\u7684\u7b5b\u9009\u6761\u4ef6\u3002\n\n\u4ee5\u4e0b\u662f\u5b8c\u6574\u6f14\u793a\u4ee3\u7801\uff1a\n\n$code_map_airbnb\n\n## \u6b65\u9aa4 4-\u90e8\u7f72 Deployment \ud83e\udd17\n\n\u5982\u679c\u4f60\u8fd0\u884c\u4e0a\u9762\u7684\u4ee3\u7801\uff0c\u4f60\u7684\u5e94\u7528\u7a0b\u5e8f\u5c06\u5728\u672c\u5730\u8fd0\u884c\u3002\n\u5982\u679c\u8981\u83b7\u53d6\u4e34\u65f6\u5171\u4eab\u94fe\u63a5\uff0c\u53ef\u4ee5\u5c06 `share=True` \u53c2\u6570\u4f20\u9012\u7ed9 `launch`\u3002\n\n\u4f46\u5982\u679c\u4f60\u60f3\u8981\u4e00\u4e2a\u6c38\u4e45\u7684\u90e8\u7f72\u89e3\u51b3\u65b9\u6848\u5462\uff1f\n\u8ba9\u6211\u4eec\u5c06\u6211\u4eec\u7684 Gradio \u5e94\u7528\u7a0b\u5e8f\u90e8\u7f72\u5230\u514d\u8d39\u7684 HuggingFace Spaces \u5e73\u53f0\u3002",
      "\u5982\u679c\u4f60\u4ee5\u524d\u6ca1\u6709\u4f7f\u7528\u8fc7 Spaces\uff0c\u8bf7\u6309\u7167\u4e4b\u524d\u7684\u6307\u5357[\u8fd9\u91cc](/using_hugging_face_integrations)\u3002\n\n## \u7ed3\u8bba \ud83c\udf89\n\n\u4f60\u5df2\u7ecf\u5b8c\u6210\u4e86\uff01\u8fd9\u662f\u6784\u5efa\u5730\u56fe\u6f14\u793a\u6240\u9700\u7684\u6240\u6709\u4ee3\u7801\u3002\n\n\u94fe\u63a5\u5230\u6f14\u793a\uff1a[\u5730\u56fe\u6f14\u793a](https://huggingface.co/spaces/gradio/map_airbnb)\u548c[\u5b8c\u6574\u4ee3\u7801](https://huggingface.co/spaces/gradio/map_airbnb/blob/main/run.py)\uff08\u5728 Hugging Face Spaces\uff09",
      "SE-ResNet\n\n**SE ResNet** is a variant of a [ResNet](https://www.paperswithcode.com/method/resnet) that employs [squeeze-and-excitation blocks](https://paperswithcode.com/method/squeeze-and-excitation-block) to enable the network to perform dynamic channel-wise feature recalibration.\n\n## How do I use this model on an image?\n\nTo load a pretrained model:\n\n```py\n>>> import timm\n>>> model = timm.create_model('seresnet152d', pretrained=True)\n>>> model.eval()\n```\n\nTo load and preprocess the image:\n\n```py \n>>> import urllib\n>>> from PIL import Image\n>>> from timm.data import resolve_data_config\n>>> from timm.data.transforms_factory import create_transform\n\n>>> config = resolve_data_config({}, model=model)\n>>> transform = create_transform(**config)",
      ">>> config = resolve_data_config({}, model=model)\n>>> transform = create_transform(**config)\n\n>>> url, filename = (\"https://github.com/pytorch/hub/raw/master/images/dog.jpg\", \"dog.jpg\")\n>>> urllib.request.urlretrieve(url, filename)\n>>> img = Image.open(filename).convert('RGB')\n>>> tensor = transform(img).unsqueeze(0) # transform and add batch dimension\n```\n\nTo get the model predictions:\n\n```py\n>>> import torch\n>>> with torch.no_grad():\n...     out = model(tensor)\n>>> probabilities = torch.nn.functional.softmax(out[0], dim=0)\n>>> print(probabilities.shape)\n>>> # prints: torch.Size([1000])\n```\n\nTo get the top-5 predictions class names:",
      "To get the top-5 predictions class names:\n\n```py\n>>> # Get imagenet class mappings\n>>> url, filename = (\"https://raw.githubusercontent.com/pytorch/hub/master/imagenet_classes.txt\", \"imagenet_classes.txt\")\n>>> urllib.request.urlretrieve(url, filename) \n>>> with open(\"imagenet_classes.txt\", \"r\") as f:\n...     categories = [s.strip() for s in f.readlines()]",
      ">>> # Print top categories per image\n>>> top5_prob, top5_catid = torch.topk(probabilities, 5)\n>>> for i in range(top5_prob.size(0)):\n...     print(categories[top5_catid[i]], top5_prob[i].item())\n>>> # prints class names and probabilities like:\n>>> # [('Samoyed', 0.6425196528434753), ('Pomeranian', 0.04062102362513542), ('keeshond', 0.03186424449086189), ('white wolf', 0.01739676296710968), ('Eskimo dog', 0.011717947199940681)]\n```\n\nReplace the model name with the variant you want to use, e.g. `seresnet152d`. You can find the IDs in the model summaries at the top of this page.",
      "To extract image features with this model, follow the [timm feature extraction examples](../feature_extraction), just change the name of the model you want to use.\n\n## How do I finetune this model?\n\nYou can finetune any of the pre-trained models just by changing the classifier (the last layer).\n\n```py\n>>> model = timm.create_model('seresnet152d', pretrained=True, num_classes=NUM_FINETUNE_CLASSES)\n```\nTo finetune on your own dataset, you have to write a training loop or adapt [timm's training\nscript](https://github.com/rwightman/pytorch-image-models/blob/master/train.py) to use your dataset.\n\n## How do I train this model?\n\nYou can follow the [timm recipe scripts](../scripts) for training a new model afresh.\n\n## Citation",
      "## Citation\n\n```BibTeX\n@misc{hu2019squeezeandexcitation,\n      title={Squeeze-and-Excitation Networks}, \n      author={Jie Hu and Li Shen and Samuel Albanie and Gang Sun and Enhua Wu},\n      year={2019},\n      eprint={1709.01507},\n      archivePrefix={arXiv},\n      primaryClass={cs.CV}\n}\n```",
      "<!--\nType: model-index\nCollections:\n- Name: SE ResNet\n  Paper:\n    Title: Squeeze-and-Excitation Networks\n    URL: https://paperswithcode.com/paper/squeeze-and-excitation-networks\nModels:\n- Name: seresnet152d\n  In Collection: SE ResNet\n  Metadata:\n    FLOPs: 20161904304\n    Parameters: 66840000\n    File Size: 268144497\n    Architecture:\n    - 1x1 Convolution\n    - Batch Normalization\n    - Bottleneck Residual Block\n    - Convolution\n    - Global Average Pooling\n    - Max Pooling\n    - ReLU\n    - Residual Block\n    - Residual Connection\n    - Softmax\n    - Squeeze-and-Excitation Block\n    Tasks:\n    - Image Classification\n    Training Techniques:",
      "Tasks:\n    - Image Classification\n    Training Techniques:\n    - Label Smoothing\n    - SGD with Momentum\n    - Weight Decay\n    Training Data:\n    - ImageNet\n    Training Resources: 8x NVIDIA Titan X GPUs\n    ID: seresnet152d\n    LR: 0.6\n    Epochs: 100\n    Layers: 152\n    Dropout: 0.2\n    Crop Pct: '0.94'\n    Momentum: 0.9\n    Batch Size: 1024\n    Image Size: '256'\n    Interpolation: bicubic\n  Code: https://github.com/rwightman/pytorch-image-models/blob/a7f95818e44b281137503bcf4b3e3e94d8ffa52f/timm/models/resnet.py#L1206",
      "Weights: https://github.com/rwightman/pytorch-image-models/releases/download/v0.1-weights/seresnet152d_ra2-04464dd2.pth\n  Results:\n  - Task: Image Classification\n    Dataset: ImageNet\n    Metrics:\n      Top 1 Accuracy: 83.74%\n      Top 5 Accuracy: 96.77%\n- Name: seresnet50\n  In Collection: SE ResNet\n  Metadata:\n    FLOPs: 5285062320\n    Parameters: 28090000\n    File Size: 112621903\n    Architecture:\n    - 1x1 Convolution\n    - Batch Normalization\n    - Bottleneck Residual Block\n    - Convolution\n    - Global Average Pooling\n    - Max Pooling\n    - ReLU\n    - Residual Block\n    - Residual Connection\n    - Softmax",
      "- Residual Block\n    - Residual Connection\n    - Softmax\n    - Squeeze-and-Excitation Block\n    Tasks:\n    - Image Classification\n    Training Techniques:\n    - Label Smoothing\n    - SGD with Momentum\n    - Weight Decay\n    Training Data:\n    - ImageNet\n    Training Resources: 8x NVIDIA Titan X GPUs\n    ID: seresnet50\n    LR: 0.6\n    Epochs: 100\n    Layers: 50\n    Dropout: 0.2\n    Crop Pct: '0.875'\n    Momentum: 0.9\n    Batch Size: 1024\n    Image Size: '224'\n    Interpolation: bicubic",
      "Image Size: '224'\n    Interpolation: bicubic\n  Code: https://github.com/rwightman/pytorch-image-models/blob/a7f95818e44b281137503bcf4b3e3e94d8ffa52f/timm/models/resnet.py#L1180\n  Weights: https://github.com/rwightman/pytorch-image-models/releases/download/v0.1-weights/seresnet50_ra_224-8efdb4bb.pth\n  Results:\n  - Task: Image Classification\n    Dataset: ImageNet\n    Metrics:\n      Top 1 Accuracy: 80.26%\n      Top 5 Accuracy: 95.07%\n-->"
    ]
  },
  {
    "chunk_size": 200,
    "chunk_overlap": 10,
    "limit": 10,
    "texts": [
      "Create an Endpoint\n\nAfter your first login, you will be directed to the [Endpoint creation page](https://ui.endpoints.huggingface.co/new). As an example, this guide will go through the steps to deploy [distilbert-base-uncased-finetuned-sst-2-english](https://huggingface.co/distilbert-base-uncased-finetuned-sst-2-english) for text classification. \n\n## 1. Enter the Hugging Face Repository ID and your desired endpoint name:\n\n<img src=\"https://raw.githubusercontent.com/huggingface/hf-endpoints-documentation/main/assets/1_repository.png\" alt=\"select repository\" />",
      "## 2. Select your Cloud Provider and region. Initially, only AWS will be available as a Cloud Provider with the `us-east-1` and `eu-west-1` regions. We will add Azure soon, and if you need to test Endpoints with other Cloud Providers or regions, please let us know.\n\n<img src=\"https://raw.githubusercontent.com/huggingface/hf-endpoints-documentation/main/assets/1_region.png\" alt=\"select region\" />\n\n## 3. Define the [Security Level](security) for the Endpoint:\n\n<img src=\"https://raw.githubusercontent.com/huggingface/hf-endpoints-documentation/main/assets/1_security.png\" alt=\"define security\" />",
      "## 4. Create your Endpoint by clicking **Create Endpoint**. By default, your Endpoint is created with a medium CPU (2 x 4GB vCPUs with Intel Xeon Ice Lake) The cost estimate assumes the Endpoint will be up for an entire month, and does not take autoscaling into account.\n\n<img src=\"https://raw.githubusercontent.com/huggingface/hf-endpoints-documentation/main/assets/1_create_cost.png\" alt=\"create endpoint\" />\n\n## 5. Wait for the Endpoint to build, initialize and run which can take between 1 to 5 minutes.\n\n<img src=\"https://raw.githubusercontent.com/huggingface/hf-endpoints-documentation/main/assets/overview.png\" alt=\"overview\" />\n\n## 6. Test your Endpoint in the overview with the Inference widget \ud83c\udfc1 \ud83c\udf89!",
      "<img src=\"https://raw.githubusercontent.com/huggingface/hf-endpoints-documentation/main/assets/1_inference.png\" alt=\"run inference\" />",
      "Choosing a metric for your task\n\n**So you've trained your model and want to see how well it\u2019s doing on a dataset of your choice. Where do you start?**\n\nThere is no \u201cone size fits all\u201d approach to choosing an evaluation metric, but some good guidelines to keep in mind are:\n\n## Categories of metrics\n\nThere are 3 high-level categories of metrics:",
      "1. *Generic metrics*, which can be applied to a variety of situations and datasets, such as precision and accuracy.\n2. *Task-specific metrics*, which are limited to a given task, such as Machine Translation (often evaluated using metrics [BLEU](https://huggingface.co/metrics/bleu) or [ROUGE](https://huggingface.co/metrics/rouge)) or Named Entity Recognition (often evaluated with [seqeval](https://huggingface.co/metrics/seqeval)).\n3. *Dataset-specific metrics*, which aim to measure model performance on specific benchmarks: for instance, the [GLUE benchmark](https://huggingface.co/datasets/glue) has a dedicated [evaluation metric](https://huggingface.co/metrics/glue).\n\nLet's look at each of these three cases:\n\n### Generic metrics",
      "### Generic metrics\n\nMany of the metrics used in the Machine Learning community are quite generic and can be applied in a variety of tasks and datasets.\n\nThis is the case for metrics like [accuracy](https://huggingface.co/metrics/accuracy) and [precision](https://huggingface.co/metrics/precision), which can be used for evaluating labeled (supervised) datasets, as well as [perplexity](https://huggingface.co/metrics/perplexity), which can be used for evaluating different kinds of (unsupervised) generative tasks.",
      "To see the input structure of a given metric, you can look at its metric card. For example, in the case of [precision](https://huggingface.co/metrics/precision), the format is:\n```\n>>> precision_metric = evaluate.load(\"precision\")\n>>> results = precision_metric.compute(references=[0, 1], predictions=[0, 1])\n>>> print(results)\n{'precision': 1.0}\n```\n\n### Task-specific metrics",
      "### Task-specific metrics\n\nPopular ML tasks like Machine Translation and Named Entity Recognition have specific metrics that can be used to compare models. For example, a series of different metrics have been proposed for text generation, ranging from [BLEU](https://huggingface.co/metrics/bleu) and its derivatives such as [GoogleBLEU](https://huggingface.co/metrics/google_bleu) and [GLEU](https://huggingface.co/metrics/gleu), but also [ROUGE](https://huggingface.co/metrics/rouge), [MAUVE](https://huggingface.co/metrics/mauve), etc.\n\nYou can find the right metric for your task by:",
      "- **Looking at the [Task pages](https://huggingface.co/tasks)** to see what metrics can be used for evaluating models for a given task.\n- **Checking out leaderboards** on sites like [Papers With Code](https://paperswithcode.com/) (you can search by task and by dataset).\n-  **Reading the metric cards** for the relevant metrics and see which ones are a good fit for your use case. For example, see the [BLEU metric card](https://github.com/huggingface/evaluate/tree/main/metrics/bleu) or [SQuaD metric card](https://github.com/huggingface/evaluate/tree/main/metrics/squad).\n- **Looking at papers and blog posts** published on the topic and see what metrics they report. This can change over time, so try to pick papers from the last couple of years!\n\n### Dataset-specific metrics",
      "### Dataset-specific metrics\n\nSome datasets have specific metrics associated with them -- this is especially in the case of popular benchmarks like [GLUE](https://huggingface.co/metrics/glue) and [SQuAD](https://huggingface.co/metrics/squad).\n\n<Tip warning={true}>\n\ud83d\udca1\nGLUE is actually a collection of different subsets on different tasks, so first you need to choose the one that corresponds to the NLI task, such as mnli, which is described as \u201ccrowdsourced collection of sentence pairs with textual entailment annotations\u201d\n</Tip>",
      "If you are evaluating your model on a benchmark dataset like the ones mentioned above, you can use its dedicated evaluation metric. Make sure you respect the format that they require. For example, to evaluate your model on the [SQuAD](https://huggingface.co/datasets/squad) dataset, you need to feed the `question` and `context` into your model and return the `prediction_text`, which should be compared with the `references` (based on matching the `id` of the question) :",
      "```\n>>> from evaluate import load\n>>> squad_metric = load(\"squad\")\n>>> predictions = [{'prediction_text': '1976', 'id': '56e10a3be3433e1400422b22'}]\n>>> references = [{'answers': {'answer_start': [97], 'text': ['1976']}, 'id': '56e10a3be3433e1400422b22'}]\n>>> results = squad_metric.compute(predictions=predictions, references=references)\n>>> results\n{'exact_match': 100.0, 'f1': 100.0}\n```\n\nYou can find examples of dataset structures by consulting the \"Dataset Preview\" function or the dataset card for a given dataset, and you can see how to use its dedicated evaluation function based on the metric card.",
      "\u4e3b\u8981\u7279\u70b9\n\n\u8ba9\u6211\u4eec\u6765\u4ecb\u7ecd\u4e00\u4e0b Gradio \u6700\u53d7\u6b22\u8fce\u7684\u4e00\u4e9b\u529f\u80fd\uff01\u8fd9\u91cc\u662f Gradio \u7684\u4e3b\u8981\u7279\u70b9\uff1a\n\n1. [\u6dfb\u52a0\u793a\u4f8b\u8f93\u5165](#example-inputs)\n2. [\u4f20\u9012\u81ea\u5b9a\u4e49\u9519\u8bef\u6d88\u606f](#errors)\n3. [\u6dfb\u52a0\u63cf\u8ff0\u5185\u5bb9](#descriptive-content)\n4. [\u8bbe\u7f6e\u65d7\u6807](#flagging)\n5. [\u9884\u5904\u7406\u548c\u540e\u5904\u7406](#preprocessing-and-postprocessing)\n6. [\u6837\u5f0f\u5316\u6f14\u793a](#styling)\n7. [\u6392\u961f\u7528\u6237](#queuing)\n8. [\u8fed\u4ee3\u8f93\u51fa](#iterative-outputs)\n9. [\u8fdb\u5ea6\u6761](#progress-bars)\n10. [\u6279\u5904\u7406\u51fd\u6570](#batch-functions)\n11. [\u5728\u534f\u4f5c\u7b14\u8bb0\u672c\u4e0a\u8fd0\u884c](#colab-notebooks)\n\n## \u793a\u4f8b\u8f93\u5165",
      "## \u793a\u4f8b\u8f93\u5165\n\n\u60a8\u53ef\u4ee5\u63d0\u4f9b\u7528\u6237\u53ef\u4ee5\u8f7b\u677e\u52a0\u8f7d\u5230 \"Interface\" \u4e2d\u7684\u793a\u4f8b\u6570\u636e\u3002\u8fd9\u5bf9\u4e8e\u6f14\u793a\u6a21\u578b\u671f\u671b\u7684\u8f93\u5165\u7c7b\u578b\u4ee5\u53ca\u6f14\u793a\u6570\u636e\u96c6\u548c\u6a21\u578b\u4e00\u8d77\u63a2\u7d22\u7684\u65b9\u5f0f\u975e\u5e38\u6709\u5e2e\u52a9\u3002\u8981\u52a0\u8f7d\u793a\u4f8b\u6570\u636e\uff0c\u60a8\u53ef\u4ee5\u5c06\u5d4c\u5957\u5217\u8868\u63d0\u4f9b\u7ed9 Interface \u6784\u9020\u51fd\u6570\u7684 `examples=` \u5173\u952e\u5b57\u53c2\u6570\u3002\u5916\u90e8\u5217\u8868\u4e2d\u7684\u6bcf\u4e2a\u5b50\u5217\u8868\u8868\u793a\u4e00\u4e2a\u6570\u636e\u6837\u672c\uff0c\u5b50\u5217\u8868\u4e2d\u7684\u6bcf\u4e2a\u5143\u7d20\u8868\u793a\u6bcf\u4e2a\u8f93\u5165\u7ec4\u4ef6\u7684\u8f93\u5165\u3002\u6709\u5173\u6bcf\u4e2a\u7ec4\u4ef6\u7684\u793a\u4f8b\u6570\u636e\u683c\u5f0f\u5728[Docs](https://gradio.app/docs#components)\u4e2d\u6709\u8bf4\u660e\u3002\n\n$code_calculator\n$demo_calculator",
      "$code_calculator\n$demo_calculator\n\n\u60a8\u53ef\u4ee5\u5c06\u5927\u578b\u6570\u636e\u96c6\u52a0\u8f7d\u5230\u793a\u4f8b\u4e2d\uff0c\u901a\u8fc7 Gradio \u6d4f\u89c8\u548c\u4e0e\u6570\u636e\u96c6\u8fdb\u884c\u4ea4\u4e92\u3002\u793a\u4f8b\u5c06\u81ea\u52a8\u5206\u9875\uff08\u53ef\u4ee5\u901a\u8fc7 Interface \u7684 `examples_per_page` \u53c2\u6570\u8fdb\u884c\u914d\u7f6e\uff09\u3002\n\n\u7ee7\u7eed\u4e86\u89e3\u793a\u4f8b\uff0c\u8bf7\u53c2\u9605[\u66f4\u591a\u793a\u4f8b](https://gradio.app/more-on-examples)\u6307\u5357\u3002\n\n## \u9519\u8bef\n\n\u60a8\u5e0c\u671b\u5411\u7528\u6237\u4f20\u9012\u81ea\u5b9a\u4e49\u9519\u8bef\u6d88\u606f\u3002\u4e3a\u6b64\uff0cwith `gr.Error(\"custom message\")` \u6765\u663e\u793a\u9519\u8bef\u6d88\u606f\u3002\u5982\u679c\u5728\u4e0a\u9762\u7684\u8ba1\u7b97\u5668\u793a\u4f8b\u4e2d\u5c1d\u8bd5\u9664\u4ee5\u96f6\uff0c\u5c06\u663e\u793a\u81ea\u5b9a\u4e49\u9519\u8bef\u6d88\u606f\u7684\u5f39\u51fa\u6a21\u6001\u7a97\u53e3\u3002\u4e86\u89e3\u6709\u5173\u9519\u8bef\u7684\u66f4\u591a\u4fe1\u606f\uff0c\u8bf7\u53c2\u9605[\u6587\u6863](https://gradio.app/docs#error)\u3002",
      "## \u63cf\u8ff0\u6027\u5185\u5bb9\n\n\u5728\u524d\u9762\u7684\u793a\u4f8b\u4e2d\uff0c\u60a8\u53ef\u80fd\u5df2\u7ecf\u6ce8\u610f\u5230 Interface \u6784\u9020\u51fd\u6570\u4e2d\u7684 `title=` \u548c `description=` \u5173\u952e\u5b57\u53c2\u6570\uff0c\u5e2e\u52a9\u7528\u6237\u4e86\u89e3\u60a8\u7684\u5e94\u7528\u7a0b\u5e8f\u3002\n\nInterface \u6784\u9020\u51fd\u6570\u4e2d\u6709\u4e09\u4e2a\u53c2\u6570\u7528\u4e8e\u6307\u5b9a\u6b64\u5185\u5bb9\u5e94\u653e\u7f6e\u5728\u54ea\u91cc\uff1a\n\n- `title`\uff1a\u63a5\u53d7\u6587\u672c\uff0c\u5e76\u53ef\u4ee5\u5c06\u5176\u663e\u793a\u5728\u754c\u9762\u7684\u9876\u90e8\uff0c\u4e5f\u5c06\u6210\u4e3a\u9875\u9762\u6807\u9898\u3002\n- `description`\uff1a\u63a5\u53d7\u6587\u672c\u3001Markdown \u6216 HTML\uff0c\u5e76\u5c06\u5176\u653e\u7f6e\u5728\u6807\u9898\u6b63\u4e0b\u65b9\u3002\n- `article`\uff1a\u4e5f\u63a5\u53d7\u6587\u672c\u3001Markdown \u6216 HTML\uff0c\u5e76\u5c06\u5176\u653e\u7f6e\u5728\u754c\u9762\u4e0b\u65b9\u3002\n\n![annotated](/assets/guides/annotated.png)",
      "\u5982\u679c\u60a8\u4f7f\u7528\u7684\u662f `Blocks` API\uff0c\u5219\u53ef\u4ee5 with `gr.Markdown(...)` \u6216 `gr.HTML(...)` \u7ec4\u4ef6\u5728\u4efb\u4f55\u4f4d\u7f6e\u63d2\u5165\u6587\u672c\u3001Markdown \u6216 HTML\uff0c\u5176\u4e2d\u63cf\u8ff0\u6027\u5185\u5bb9\u4f4d\u4e8e `Component` \u6784\u9020\u51fd\u6570\u5185\u90e8\u3002\n\n\u53e6\u4e00\u4e2a\u6709\u7528\u7684\u5173\u952e\u5b57\u53c2\u6570\u662f `label=`\uff0c\u5b83\u5b58\u5728\u4e8e\u6bcf\u4e2a `Component` \u4e2d\u3002\u8fd9\u4fee\u6539\u4e86\u6bcf\u4e2a `Component` \u9876\u90e8\u7684\u6807\u7b7e\u6587\u672c\u3002\u8fd8\u53ef\u4ee5\u4e3a\u8bf8\u5982 `Textbox` \u6216 `Radio` \u4e4b\u7c7b\u7684\u8868\u5355\u5143\u7d20\u6dfb\u52a0 `info=` \u5173\u952e\u5b57\u53c2\u6570\uff0c\u4ee5\u63d0\u4f9b\u6709\u5173\u5176\u7528\u6cd5\u7684\u8fdb\u4e00\u6b65\u4fe1\u606f\u3002\n\n```python\ngr.Number(label='\u5e74\u9f84', info='\u4ee5\u5e74\u4e3a\u5355\u4f4d\uff0c\u5fc5\u987b\u5927\u4e8e0')\n```\n\n## \u65d7\u6807",
      "## \u65d7\u6807\n\n\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\"Interface\" \u5c06\u6709\u4e00\u4e2a \"Flag\" \u6309\u94ae\u3002\u5f53\u7528\u6237\u6d4b\u8bd5\u60a8\u7684 `Interface` \u65f6\uff0c\u5982\u679c\u770b\u5230\u6709\u8da3\u7684\u8f93\u51fa\uff0c\u4f8b\u5982\u9519\u8bef\u6216\u610f\u5916\u7684\u6a21\u578b\u884c\u4e3a\uff0c\u4ed6\u4eec\u53ef\u4ee5\u5c06\u8f93\u5165\u6807\u8bb0\u4e3a\u60a8\u8fdb\u884c\u67e5\u770b\u3002\u5728\u7531 `Interface` \u6784\u9020\u51fd\u6570\u7684 `flagging_dir=` \u53c2\u6570\u63d0\u4f9b\u7684\u76ee\u5f55\u4e2d\uff0c\u5c06\u8bb0\u5f55\u6807\u8bb0\u7684\u8f93\u5165\u5230\u4e00\u4e2a CSV \u6587\u4ef6\u4e2d\u3002\u5982\u679c\u754c\u9762\u6d89\u53ca\u6587\u4ef6\u6570\u636e\uff0c\u4f8b\u5982\u56fe\u50cf\u548c\u97f3\u9891\u7ec4\u4ef6\uff0c\u5c06\u521b\u5efa\u6587\u4ef6\u5939\u6765\u5b58\u50a8\u8fd9\u4e9b\u6807\u8bb0\u7684\u6570\u636e\u3002\n\n\u4f8b\u5982\uff0c\u5bf9\u4e8e\u4e0a\u9762\u663e\u793a\u7684\u8ba1\u7b97\u5668\u754c\u9762\uff0c\u6211\u4eec\u5c06\u5728\u4e0b\u9762\u7684\u65d7\u6807\u76ee\u5f55\u4e2d\u5b58\u50a8\u6807\u8bb0\u7684\u6570\u636e\uff1a\n\n```directory\n+-- calculator.py\n+-- flagged/\n|   +-- logs.csv\n```",
      "_flagged/logs.csv_\n\n```csv\nnum1,operation,num2,Output\n5,add,7,12\n6,subtract,1.5,4.5\n```\n\n\u4e0e\u65e9\u671f\u663e\u793a\u7684\u51b7\u8272\u754c\u9762\u76f8\u5bf9\u5e94\uff0c\u6211\u4eec\u5c06\u5728\u4e0b\u9762\u7684\u65d7\u6807\u76ee\u5f55\u4e2d\u5b58\u50a8\u6807\u8bb0\u7684\u6570\u636e\uff1a\n\n```directory\n+-- sepia.py\n+-- flagged/\n|   +-- logs.csv\n|   +-- im/\n|   |   +-- 0.png\n|   |   +-- 1.png\n|   +-- Output/\n|   |   +-- 0.png\n|   |   +-- 1.png\n```\n\n_flagged/logs.csv_\n\n```csv\nim,Output\nim/0.png,Output/0.png\nim/1.png,Output/1.png\n```",
      "\u5982\u679c\u60a8\u5e0c\u671b\u7528\u6237\u63d0\u4f9b\u65d7\u6807\u539f\u56e0\uff0c\u53ef\u4ee5\u5c06\u5b57\u7b26\u4e32\u5217\u8868\u4f20\u9012\u7ed9 Interface \u7684 `flagging_options` \u53c2\u6570\u3002\u7528\u6237\u5728\u8fdb\u884c\u65d7\u6807\u65f6\u5fc5\u987b\u9009\u62e9\u5176\u4e2d\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u8fd9\u5c06\u4f5c\u4e3a\u9644\u52a0\u5217\u4fdd\u5b58\u5230 CSV \u4e2d\u3002\n\n## \u9884\u5904\u7406\u548c\u540e\u5904\u7406 (Preprocessing and Postprocessing)\n\n![annotated](/assets/img/dataflow.svg)\n\n\u5982\u60a8\u6240\u89c1\uff0cGradio \u5305\u62ec\u53ef\u4ee5\u5904\u7406\u5404\u79cd\u4e0d\u540c\u6570\u636e\u7c7b\u578b\u7684\u7ec4\u4ef6\uff0c\u4f8b\u5982\u56fe\u50cf\u3001\u97f3\u9891\u548c\u89c6\u9891\u3002\u5927\u591a\u6570\u7ec4\u4ef6\u90fd\u53ef\u4ee5\u7528\u4f5c\u8f93\u5165\u6216\u8f93\u51fa\u3002",
      "\u5f53\u7ec4\u4ef6\u7528\u4f5c\u8f93\u5165\u65f6\uff0cGradio \u81ea\u52a8\u5904\u7406*\u9884\u5904\u7406*\uff0c\u5c06\u6570\u636e\u4ece\u7528\u6237\u6d4f\u89c8\u5668\u53d1\u9001\u7684\u7c7b\u578b\uff08\u4f8b\u5982\u7f51\u7edc\u6444\u50cf\u5934\u5feb\u7167\u7684 base64 \u8868\u793a\uff09\u8f6c\u6362\u4e3a\u60a8\u7684\u51fd\u6570\u53ef\u4ee5\u63a5\u53d7\u7684\u5f62\u5f0f\uff08\u4f8b\u5982 `numpy` \u6570\u7ec4\uff09\u3002\n\n\u540c\u6837\uff0c\u5f53\u7ec4\u4ef6\u7528\u4f5c\u8f93\u51fa\u65f6\uff0cGradio \u81ea\u52a8\u5904\u7406*\u540e\u5904\u7406*\uff0c\u5c06\u6570\u636e\u4ece\u51fd\u6570\u8fd4\u56de\u7684\u5f62\u5f0f\uff08\u4f8b\u5982\u56fe\u50cf\u8def\u5f84\u5217\u8868\uff09\u8f6c\u6362\u4e3a\u53ef\u4ee5\u5728\u7528\u6237\u6d4f\u89c8\u5668\u4e2d\u663e\u793a\u7684\u5f62\u5f0f\uff08\u4f8b\u5982\u4ee5 base64 \u683c\u5f0f\u663e\u793a\u56fe\u50cf\u7684 `Gallery`\uff09\u3002",
      "\u60a8\u53ef\u4ee5\u4f7f\u7528\u6784\u5efa\u56fe\u50cf\u7ec4\u4ef6\u65f6\u7684\u53c2\u6570\u63a7\u5236*\u9884\u5904\u7406*\u3002\u4f8b\u5982\uff0c\u5982\u679c\u60a8\u4f7f\u7528\u4ee5\u4e0b\u53c2\u6570\u5b9e\u4f8b\u5316 `Image` \u7ec4\u4ef6\uff0c\u5b83\u5c06\u5c06\u56fe\u50cf\u8f6c\u6362\u4e3a `PIL` \u7c7b\u578b\uff0c\u5e76\u5c06\u5176\u91cd\u5851\u4e3a`(100, 100)`\uff0c\u800c\u4e0d\u7ba1\u63d0\u4ea4\u65f6\u7684\u539f\u59cb\u5927\u5c0f\u5982\u4f55\uff1a\n\n```py\nimg = gr.Image(shape=(100, 100), type=\"pil\")\n```\n\n\u76f8\u53cd\uff0c\u8fd9\u91cc\u6211\u4eec\u4fdd\u7559\u56fe\u50cf\u7684\u539f\u59cb\u5927\u5c0f\uff0c\u4f46\u5728\u5c06\u5176\u8f6c\u6362\u4e3a numpy \u6570\u7ec4\u4e4b\u524d\u53cd\u8f6c\u989c\u8272\uff1a\n\n```py\nimg = gr.Image(invert_colors=True, type=\"numpy\")\n```",
      "\u540e\u5904\u7406\u8981\u5bb9\u6613\u5f97\u591a\uff01Gradio \u81ea\u52a8\u8bc6\u522b\u8fd4\u56de\u6570\u636e\u7684\u683c\u5f0f\uff08\u4f8b\u5982 `Image` \u662f `numpy` \u6570\u7ec4\u8fd8\u662f `str` \u6587\u4ef6\u8def\u5f84\uff1f\uff09\uff0c\u5e76\u5c06\u5176\u540e\u5904\u7406\u4e3a\u53ef\u4ee5\u7531\u6d4f\u89c8\u5668\u663e\u793a\u7684\u683c\u5f0f\u3002\n\n\u8bf7\u67e5\u770b[\u6587\u6863](https://gradio.app/docs)\uff0c\u4e86\u89e3\u6bcf\u4e2a\u7ec4\u4ef6\u7684\u6240\u6709\u4e0e\u9884\u5904\u7406\u76f8\u5173\u7684\u53c2\u6570\u3002\n\n## \u6837\u5f0f (Styling)\n\nGradio \u4e3b\u9898\u662f\u81ea\u5b9a\u4e49\u5e94\u7528\u7a0b\u5e8f\u5916\u89c2\u548c\u611f\u89c9\u7684\u6700\u7b80\u5355\u65b9\u6cd5\u3002\u60a8\u53ef\u4ee5\u9009\u62e9\u591a\u79cd\u4e3b\u9898\u6216\u521b\u5efa\u81ea\u5df1\u7684\u4e3b\u9898\u3002\u8981\u8fd9\u6837\u505a\uff0c\u8bf7\u5c06 `theme=` \u53c2\u6570\u4f20\u9012\u7ed9 `Interface` \u6784\u9020\u51fd\u6570\u3002\u4f8b\u5982\uff1a\n\n```python\ndemo = gr.Interface(..., theme=gr.themes.Monochrome())\n```",
      "Gradio \u5e26\u6709\u4e00\u7ec4\u9884\u5148\u6784\u5efa\u7684\u4e3b\u9898\uff0c\u60a8\u53ef\u4ee5\u4ece `gr.themes.*` \u52a0\u8f7d\u3002\u60a8\u53ef\u4ee5\u6269\u5c55\u8fd9\u4e9b\u4e3b\u9898\u6216\u4ece\u5934\u5f00\u59cb\u521b\u5efa\u81ea\u5df1\u7684\u4e3b\u9898 - \u6709\u5173\u66f4\u591a\u8be6\u7ec6\u4fe1\u606f\uff0c\u8bf7\u53c2\u9605[\u4e3b\u9898\u6307\u5357](https://gradio.app/theming-guide)\u3002\n\n\u8981\u589e\u52a0\u989d\u5916\u7684\u6837\u5f0f\u80fd\u529b\uff0c\u60a8\u53ef\u4ee5 with `css=` \u5173\u952e\u5b57\u5c06\u4efb\u4f55 CSS \u4f20\u9012\u7ed9\u60a8\u7684\u5e94\u7528\u7a0b\u5e8f\u3002\nGradio \u5e94\u7528\u7a0b\u5e8f\u7684\u57fa\u7c7b\u662f `gradio-container`\uff0c\u56e0\u6b64\u4ee5\u4e0b\u662f\u4e00\u4e2a\u66f4\u6539 Gradio \u5e94\u7528\u7a0b\u5e8f\u80cc\u666f\u989c\u8272\u7684\u793a\u4f8b\uff1a\n\n```python\nwith `gr.Interface(css=\".gradio-container {background-color: red}\") as demo:\n    ...\n```\n\n## \u961f\u5217 (Queuing)",
      "## \u961f\u5217 (Queuing)\n\n\u5982\u679c\u60a8\u7684\u5e94\u7528\u7a0b\u5e8f\u9884\u8ba1\u4f1a\u6709\u5927\u91cf\u6d41\u91cf\uff0c\u8bf7 with `queue()` \u65b9\u6cd5\u6765\u63a7\u5236\u5904\u7406\u901f\u7387\u3002\u8fd9\u5c06\u6392\u961f\u5904\u7406\u8c03\u7528\uff0c\u56e0\u6b64\u4e00\u6b21\u53ea\u5904\u7406\u4e00\u5b9a\u6570\u91cf\u7684\u8bf7\u6c42\u3002\u961f\u5217\u4f7f\u7528 Websockets\uff0c\u8fd8\u53ef\u4ee5\u9632\u6b62\u7f51\u7edc\u8d85\u65f6\uff0c\u56e0\u6b64\u5982\u679c\u60a8\u7684\u51fd\u6570\u7684\u63a8\u7406\u65f6\u95f4\u5f88\u957f\uff08> 1 \u5206\u949f\uff09\uff0c\u5e94\u4f7f\u7528\u961f\u5217\u3002\n\nwith `Interface`\uff1a\n\n```python\ndemo = gr.Interface(...).queue()\ndemo.launch()\n```\n\nwith `Blocks`\uff1a\n\n```python\nwith gr.Blocks() as demo\uff1a\n    #...\ndemo.queue()\ndemo.launch()\n```\n\n\u60a8\u53ef\u4ee5\u901a\u8fc7\u4ee5\u4e0b\u65b9\u5f0f\u63a7\u5236\u4e00\u6b21\u5904\u7406\u7684\u8bf7\u6c42\u6570\u91cf\uff1a\n\n```python\ndemo.queue(concurrency_count=3)\n```",
      "\u67e5\u770b\u6709\u5173\u914d\u7f6e\u5176\u4ed6\u961f\u5217\u53c2\u6570\u7684[\u961f\u5217\u6587\u6863](/docs/#queue)\u3002\n\n\u5728 Blocks \u4e2d\u6307\u5b9a\u4ec5\u5bf9\u67d0\u4e9b\u51fd\u6570\u8fdb\u884c\u6392\u961f\uff1a\n\n```python\nwith gr.Blocks() as demo2\uff1a\n    num1 = gr.Number()\n    num2 = gr.Number()\n    output = gr.Number()\n    gr.Button(\"Add\").click(\n        lambda a, b: a + b, [num1, num2], output)\n    gr.Button(\"Multiply\").click(\n        lambda a, b: a * b, [num1, num2], output, queue=True)\ndemo2.launch()\n```\n\n## \u8fed\u4ee3\u8f93\u51fa (Iterative Outputs)",
      "\u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\uff0c\u60a8\u53ef\u80fd\u9700\u8981\u4f20\u8f93\u4e00\u7cfb\u5217\u8f93\u51fa\u800c\u4e0d\u662f\u4e00\u6b21\u663e\u793a\u5355\u4e2a\u8f93\u51fa\u3002\u4f8b\u5982\uff0c\u60a8\u53ef\u80fd\u6709\u4e00\u4e2a\u56fe\u50cf\u751f\u6210\u6a21\u578b\uff0c\u5e0c\u671b\u663e\u793a\u751f\u6210\u7684\u6bcf\u4e2a\u6b65\u9aa4\u7684\u56fe\u50cf\uff0c\u76f4\u5230\u6700\u7ec8\u56fe\u50cf\u3002\u6216\u8005\u60a8\u53ef\u80fd\u6709\u4e00\u4e2a\u804a\u5929\u673a\u5668\u4eba\uff0c\u5b83\u9010\u5b57\u9010\u53e5\u5730\u6d41\u5f0f\u4f20\u8f93\u54cd\u5e94\uff0c\u800c\u4e0d\u662f\u4e00\u6b21\u8fd4\u56de\u5168\u90e8\u54cd\u5e94\u3002",
      "\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u60a8\u53ef\u4ee5\u5c06**\u751f\u6210\u5668**\u51fd\u6570\u63d0\u4f9b\u7ed9 Gradio\uff0c\u800c\u4e0d\u662f\u5e38\u89c4\u51fd\u6570\u3002\u5728 Python \u4e2d\u521b\u5efa\u751f\u6210\u5668\u975e\u5e38\u7b80\u5355\uff1a\u51fd\u6570\u4e0d\u5e94\u8be5\u6709\u4e00\u4e2a\u5355\u72ec\u7684 `return` \u503c\uff0c\u800c\u662f\u5e94\u8be5 with `yield` \u8fde\u7eed\u8fd4\u56de\u4e00\u7cfb\u5217\u503c\u3002\u901a\u5e38\uff0c`yield` \u8bed\u53e5\u653e\u7f6e\u5728\u67d0\u79cd\u5faa\u73af\u4e2d\u3002\u4e0b\u9762\u662f\u4e00\u4e2a\u7b80\u5355\u793a\u4f8b\uff0c\u751f\u6210\u5668\u53ea\u662f\u7b80\u5355\u8ba1\u6570\u5230\u7ed9\u5b9a\u6570\u5b57\uff1a\n\n```python\ndef my_generator(x):\n    for i in range(x):\n        yield i\n```\n\n\u60a8\u4ee5\u4e0e\u5e38\u89c4\u51fd\u6570\u76f8\u540c\u7684\u65b9\u5f0f\u5c06\u751f\u6210\u5668\u63d0\u4f9b\u7ed9 Gradio\u3002\u4f8b\u5982\uff0c\u8fd9\u662f\u4e00\u4e2a\uff08\u865a\u62df\u7684\uff09\u56fe\u50cf\u751f\u6210\u6a21\u578b\uff0c\u5b83\u5728\u8f93\u51fa\u56fe\u50cf\u4e4b\u524d\u751f\u6210\u6570\u4e2a\u6b65\u9aa4\u7684\u566a\u97f3\uff1a",
      "$code_fake_diffusion\n$demo_fake_diffusion\n\n\u8bf7\u6ce8\u610f\uff0c\u6211\u4eec\u5728\u8fed\u4ee3\u5668\u4e2d\u6dfb\u52a0\u4e86 `time.sleep(1)`\uff0c\u4ee5\u521b\u5efa\u6b65\u9aa4\u4e4b\u95f4\u7684\u4eba\u5de5\u6682\u505c\uff0c\u4ee5\u4fbf\u60a8\u53ef\u4ee5\u89c2\u5bdf\u8fed\u4ee3\u5668\u7684\u6b65\u9aa4\uff08\u5728\u771f\u5b9e\u7684\u56fe\u50cf\u751f\u6210\u6a21\u578b\u4e2d\uff0c\u8fd9\u53ef\u80fd\u662f\u4e0d\u5fc5\u8981\u7684\uff09\u3002\n\n\u5c06\u751f\u6210\u5668\u63d0\u4f9b\u7ed9 Gradio **\u9700\u8981**\u5728\u5e95\u5c42 Interface \u6216 Blocks \u4e2d\u542f\u7528\u961f\u5217\uff08\u8bf7\u53c2\u9605\u4e0a\u9762\u7684\u961f\u5217\u90e8\u5206\uff09\u3002\n\n## \u8fdb\u5ea6\u6761",
      "## \u8fdb\u5ea6\u6761\n\nGradio \u652f\u6301\u521b\u5efa\u81ea\u5b9a\u4e49\u8fdb\u5ea6\u6761\uff0c\u4ee5\u4fbf\u60a8\u53ef\u4ee5\u81ea\u5b9a\u4e49\u548c\u63a7\u5236\u5411\u7528\u6237\u663e\u793a\u7684\u8fdb\u5ea6\u66f4\u65b0\u3002\u8981\u542f\u7528\u6b64\u529f\u80fd\uff0c\u53ea\u9700\u4e3a\u65b9\u6cd5\u6dfb\u52a0\u4e00\u4e2a\u9ed8\u8ba4\u503c\u4e3a `gr.Progress` \u5b9e\u4f8b\u7684\u53c2\u6570\u5373\u53ef\u3002\u7136\u540e\uff0c\u60a8\u53ef\u4ee5\u76f4\u63a5\u8c03\u7528\u6b64\u5b9e\u4f8b\u5e76\u4f20\u5165 0 \u5230 1 \u4e4b\u95f4\u7684\u6d6e\u70b9\u6570\u6765\u66f4\u65b0\u8fdb\u5ea6\u7ea7\u522b\uff0c\u6216\u8005 with `Progress` \u5b9e\u4f8b\u7684 `tqdm()` \u65b9\u6cd5\u6765\u8ddf\u8e2a\u53ef\u8fed\u4ee3\u5bf9\u8c61\u4e0a\u7684\u8fdb\u5ea6\uff0c\u5982\u4e0b\u6240\u793a\u3002\u5fc5\u987b\u542f\u7528\u961f\u5217\u4ee5\u8fdb\u884c\u8fdb\u5ea6\u66f4\u65b0\u3002\n\n$code_progress_simple\n$demo_progress_simple",
      "$code_progress_simple\n$demo_progress_simple\n\n\u5982\u679c\u60a8 with `tqdm` \u5e93\uff0c\u5e76\u4e14\u5e0c\u671b\u4ece\u51fd\u6570\u5185\u90e8\u7684\u4efb\u4f55 `tqdm.tqdm` \u81ea\u52a8\u62a5\u544a\u8fdb\u5ea6\u66f4\u65b0\uff0c\u8bf7\u5c06\u9ed8\u8ba4\u53c2\u6570\u8bbe\u7f6e\u4e3a `gr.Progress(track_tqdm=True)`\uff01\n\n## \u6279\u5904\u7406\u51fd\u6570 (Batch Functions)\n\nGradio \u652f\u6301\u4f20\u9012*\u6279\u5904\u7406*\u51fd\u6570\u3002\u6279\u5904\u7406\u51fd\u6570\u53ea\u662f\u63a5\u53d7\u8f93\u5165\u5217\u8868\u5e76\u8fd4\u56de\u9884\u6d4b\u5217\u8868\u7684\u51fd\u6570\u3002\n\n\u4f8b\u5982\uff0c\u8fd9\u662f\u4e00\u4e2a\u6279\u5904\u7406\u51fd\u6570\uff0c\u5b83\u63a5\u53d7\u4e24\u4e2a\u8f93\u5165\u5217\u8868\uff08\u4e00\u4e2a\u5355\u8bcd\u5217\u8868\u548c\u4e00\u4e2a\u6574\u6570\u5217\u8868\uff09\uff0c\u5e76\u8fd4\u56de\u4fee\u526a\u8fc7\u7684\u5355\u8bcd\u5217\u8868\u4f5c\u4e3a\u8f93\u51fa\uff1a\n\n```python\nimport time",
      "```python\nimport time\n\ndef trim_words(words, lens):\n    trimmed_words = []\n    time.sleep(5)\n    for w, l in zip(words, lens):\n        trimmed_words.append(w[:int(l)])\n    return [trimmed_words]\n    for w, l in zip(words, lens):\n```\n\n\u4f7f\u7528\u6279\u5904\u7406\u51fd\u6570\u7684\u4f18\u70b9\u662f\uff0c\u5982\u679c\u542f\u7528\u4e86\u961f\u5217\uff0cGradio \u670d\u52a1\u5668\u53ef\u4ee5\u81ea\u52a8*\u6279\u5904\u7406*\u4f20\u5165\u7684\u8bf7\u6c42\u5e76\u5e76\u884c\u5904\u7406\u5b83\u4eec\uff0c\u4ece\u800c\u53ef\u80fd\u52a0\u5feb\u6f14\u793a\u901f\u5ea6\u3002\u4ee5\u4e0b\u662f Gradio \u4ee3\u7801\u7684\u793a\u4f8b\uff08\u8bf7\u6ce8\u610f `batch=True` \u548c `max_batch_size=16` - \u8fd9\u4e24\u4e2a\u53c2\u6570\u90fd\u53ef\u4ee5\u4f20\u9012\u7ed9\u4e8b\u4ef6\u89e6\u53d1\u5668\u6216 `Interface` \u7c7b\uff09\n\nwith `Interface`\uff1a",
      "with `Interface`\uff1a\n\n```python\ndemo = gr.Interface(trim_words, [\"textbox\", \"number\"], [\"output\"],\n                    batch=True, max_batch_size=16)\ndemo.queue()\ndemo.launch()\n```\n\nwith `Blocks`\uff1a\n\n```python\nimport gradio as gr\n\nwith gr.Blocks() as demo:\n    with gr.Row():\n        word = gr.Textbox(label=\"word\")\n        leng = gr.Number(label=\"leng\")\n        output = gr.Textbox(label=\"Output\")\n    with gr.Row():\n        run = gr.Button()\n\n    event = run.click(trim_words, [word, leng], output, batch=True, max_batch_size=16)\n\ndemo.queue()\ndemo.launch()\n```",
      "demo.queue()\ndemo.launch()\n```\n\n\u5728\u4e0a\u9762\u7684\u793a\u4f8b\u4e2d\uff0c\u53ef\u4ee5\u5e76\u884c\u5904\u7406 16 \u4e2a\u8bf7\u6c42\uff08\u603b\u63a8\u7406\u65f6\u95f4\u4e3a 5 \u79d2\uff09\uff0c\u800c\u4e0d\u662f\u5206\u522b\u5904\u7406\u6bcf\u4e2a\u8bf7\u6c42\uff08\u603b\u63a8\u7406\u65f6\u95f4\u4e3a 80 \u79d2\uff09\u3002\u8bb8\u591a Hugging Face \u7684 `transformers` \u548c `diffusers` \u6a21\u578b\u5728 Gradio \u7684\u6279\u5904\u7406\u6a21\u5f0f\u4e0b\u81ea\u7136\u5de5\u4f5c\uff1a\u8fd9\u662f[\u4f7f\u7528\u6279\u5904\u7406\u751f\u6210\u56fe\u50cf\u7684\u793a\u4f8b\u6f14\u793a](https://github.com/gradio-app/gradio/blob/main/demo/diffusers_with_batching/run.py)\n\n\u6ce8\u610f\uff1a\u4f7f\u7528 Gradio \u7684\u6279\u5904\u7406\u51fd\u6570 **requires** \u5728\u5e95\u5c42 Interface \u6216 Blocks \u4e2d\u542f\u7528\u961f\u5217\uff08\u8bf7\u53c2\u9605\u4e0a\u9762\u7684\u961f\u5217\u90e8\u5206\uff09\u3002\n\n## Gradio \u7b14\u8bb0\u672c (Colab Notebooks)",
      "Gradio \u53ef\u4ee5\u5728\u4efb\u4f55\u8fd0\u884c Python \u7684\u5730\u65b9\u8fd0\u884c\uff0c\u5305\u62ec\u672c\u5730 Jupyter \u7b14\u8bb0\u672c\u548c\u534f\u4f5c\u7b14\u8bb0\u672c\uff0c\u5982[Google Colab](https://colab.research.google.com/)\u3002\u5bf9\u4e8e\u672c\u5730 Jupyter \u7b14\u8bb0\u672c\u548c Google Colab \u7b14\u8bb0\u672c\uff0cGradio \u5728\u672c\u5730\u670d\u52a1\u5668\u4e0a\u8fd0\u884c\uff0c\u60a8\u53ef\u4ee5\u5728\u6d4f\u89c8\u5668\u4e2d\u4e0e\u4e4b\u4ea4\u4e92\u3002\uff08\u6ce8\u610f\uff1a\u5bf9\u4e8e Google Colab\uff0c\u8fd9\u662f\u901a\u8fc7[\u670d\u52a1\u5de5\u4f5c\u5668\u96a7\u9053](https://github.com/tensorflow/tensorboard/blob/master/docs/design/colab_integration.md)\u5b9e\u73b0\u7684\uff0c\u60a8\u7684\u6d4f\u89c8\u5668\u9700\u8981\u542f\u7528 cookies\u3002\uff09\u5bf9\u4e8e\u5176\u4ed6\u8fdc\u7a0b\u7b14\u8bb0\u672c\uff0cGradio \u4e5f\u5c06\u5728\u670d\u52a1\u5668\u4e0a\u8fd0\u884c\uff0c\u4f46\u60a8\u9700\u8981\u4f7f\u7528[SSH \u96a7\u9053](https://coderwall",
      ".com/p/ohk6cg/remote-access-to-ipython-notebooks-via-ssh)\u5728\u672c\u5730\u6d4f\u89c8\u5668\u4e2d\u67e5\u770b\u5e94\u7528\u7a0b\u5e8f\u3002\u901a\u5e38\uff0c\u66f4\u7b80\u5355\u7684\u9009\u62e9\u662f\u4f7f\u7528 Gradio \u5185\u7f6e\u7684\u516c\u5171\u94fe\u63a5\uff0c[\u5728\u4e0b\u4e00\u7bc7\u6307\u5357\u4e2d\u8ba8\u8bba](/sharing-your-app/#sharing-demos)\u3002",
      "!--Copyright 2023 The HuggingFace Team. All rights reserved.\n\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\nthe License. You may obtain a copy of the License at\n\nhttp://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software distributed under the License is distributed on\nan \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n\n\u26a0\ufe0f Note that this file is in Markdown but contain specific syntax for our doc-builder (similar to MDX) that may not be\nrendered properly in your Markdown viewer.\n\n-->\n\n# Training on TPU with TensorFlow\n\n<Tip>",
      "<Tip>\n\nIf you don't need long explanations and just want TPU code samples to get started with, check out [our TPU example notebook!](https://colab.research.google.com/github/huggingface/notebooks/blob/main/examples/tpu_training-tf.ipynb)\n\n</Tip>\n\n### What is a TPU?\n\nA TPU is a **Tensor Processing Unit.** They are hardware designed by Google, which are used to greatly speed up the tensor computations within neural networks, much like GPUs. They can be used for both network training and inference. They are generally accessed through Google\u2019s cloud services, but small TPUs can also be accessed directly for free through Google Colab and Kaggle Kernels.",
      "Because [all TensorFlow models in \ud83e\udd17 Transformers are Keras models](https://huggingface.co/blog/tensorflow-philosophy), most of the methods in this document are generally applicable to TPU training for any Keras model! However, there are a few points that are specific to the HuggingFace ecosystem (hug-o-system?) of Transformers and Datasets, and we\u2019ll make sure to flag them up when we get to them.\n\n### What kinds of TPU are available?\n\nNew users are often very confused by the range of TPUs, and the different ways to access them. The first key distinction to understand is the difference between **TPU Nodes** and **TPU VMs.**",
      "When you use a **TPU Node**, you are effectively indirectly accessing a remote TPU. You will need a separate VM, which will initialize your network and data pipeline and then forward them to the remote node. When you use a TPU on Google Colab, you are accessing it in the **TPU Node** style.\n\nUsing TPU Nodes can have some quite unexpected behaviour for people who aren\u2019t used to them! In particular, because the TPU is located on a physically different system to the machine you\u2019re running your Python code on, your data cannot be local to your machine - any data pipeline that loads from your machine\u2019s internal storage will totally fail! Instead, data must be stored in Google Cloud Storage where your data pipeline can still access it, even when the pipeline is running on the remote TPU node.\n\n<Tip>",
      "<Tip>\n\nIf you can fit all your data in memory as `np.ndarray` or `tf.Tensor`, then you can `fit()` on that data even when using Colab or a TPU Node, without needing to upload it to Google Cloud Storage.\n\n</Tip>\n\n<Tip>\n\n**\ud83e\udd17Specific Hugging Face Tip\ud83e\udd17:** The methods `Dataset.to_tf_dataset()` and its higher-level wrapper `model.prepare_tf_dataset()` , which you will see throughout our TF code examples, will both fail on a TPU Node. The reason for this is that even though they create a `tf.data.Dataset` it is not a \u201cpure\u201d `tf.data` pipeline and uses `tf.numpy_function` or `Dataset.from_generator()` to stream data from the underlying HuggingFace `Dataset`. This HuggingFace `Dataset` is backed by data that is on a local disc and which the remote TPU Node will not be able to read.",
      "</Tip>\n\nThe second way to access a TPU is via a **TPU VM.** When using a TPU VM, you connect directly to the machine that the TPU is attached to, much like training on a GPU VM. TPU VMs are generally easier to work with, particularly when it comes to your data pipeline. All of the above warnings do not apply to TPU VMs!",
      "This is an opinionated document, so here\u2019s our opinion: **Avoid using TPU Node if possible.** It is more confusing and more difficult to debug than TPU VMs. It is also likely to be unsupported in future - Google\u2019s latest TPU, TPUv4, can only be accessed as a TPU VM, which suggests that TPU Nodes are increasingly going to become a \u201clegacy\u201d access method. However, we understand that the only free TPU access is on Colab and Kaggle Kernels, which uses TPU Node - so we\u2019ll try to explain how to handle it if you have to! Check the [TPU example notebook](https://colab.research.google.com/github/huggingface/notebooks/blob/main/examples/tpu_training-tf.ipynb) for code samples that explain this in more detail.\n\n### What sizes of TPU are available?",
      "### What sizes of TPU are available?\n\nA single TPU (a v2-8/v3-8/v4-8) runs 8 replicas. TPUs exist in **pods** that can run hundreds or thousands of replicas simultaneously. When you use more than a single TPU but less than a whole pod (for example, a v3-32), your TPU fleet is referred to as a **pod slice.**\n\nWhen you access a free TPU via Colab, you generally get a single v2-8 TPU.\n\n### I keep hearing about this XLA thing. What\u2019s XLA, and how does it relate to TPUs?",
      "XLA is an optimizing compiler, used by both TensorFlow and JAX. In JAX it is the only compiler, whereas in TensorFlow it is optional (but mandatory on TPU!). The easiest way to enable it when training a Keras model is to pass the argument `jit_compile=True` to `model.compile()`. If you don\u2019t get any errors and performance is good, that\u2019s a great sign that you\u2019re ready to move to TPU!\n\nDebugging on TPU is generally a bit harder than on CPU/GPU, so we recommend getting your code running on CPU/GPU with XLA first before trying it on TPU. You don\u2019t have to train for long, of course - just for a few steps to make sure that your model and data pipeline are working like you expect them to.\n\n<Tip>",
      "<Tip>\n\nXLA compiled code is usually faster - so even if you\u2019re not planning to run on TPU, adding `jit_compile=True` can improve your performance. Be sure to note the caveats below about XLA compatibility, though!\n\n</Tip>\n\n<Tip warning={true}>\n\n**Tip born of painful experience:** Although using `jit_compile=True` is a good way to get a speed boost and test if your CPU/GPU code is XLA-compatible, it can actually cause a lot of problems if you leave it in when actually training on TPU. XLA compilation will happen implicitly on TPU, so remember to remove that line before actually running your code on a TPU!\n\n</Tip>\n\n### How do I make my model XLA compatible?",
      "In many cases, your code is probably XLA-compatible already! However, there are a few things that work in normal TensorFlow that don\u2019t work in XLA. We\u2019ve distilled them into three core rules below:\n\n<Tip>\n\n**\ud83e\udd17Specific HuggingFace Tip\ud83e\udd17:** We\u2019ve put a lot of effort into rewriting our TensorFlow models and loss functions to be XLA-compatible. Our models and loss functions generally obey rule #1 and #2 by default, so you can skip over them if you\u2019re using `transformers` models. Don\u2019t forget about these rules when writing your own models and loss functions, though!\n\n</Tip>\n\n#### XLA Rule #1: Your code cannot have \u201cdata-dependent conditionals\u201d\n\nWhat that means is that any `if` statement cannot depend on values inside a `tf.Tensor`. For example, this code block cannot be compiled with XLA!",
      "```python\nif tf.reduce_sum(tensor) > 10:\n    tensor = tensor / 2.0\n```\n\nThis might seem very restrictive at first, but most neural net code doesn\u2019t need to do this. You can often get around this restriction by using `tf.cond` (see the documentation [here](https://www.tensorflow.org/api_docs/python/tf/cond)) or by removing the conditional and finding a clever math trick with indicator variables instead, like so:\n\n```python\nsum_over_10 = tf.cast(tf.reduce_sum(tensor) > 10, tf.float32)\ntensor = tensor / (1.0 + sum_over_10)\n```\n\nThis code has exactly the same effect as the code above, but by avoiding a conditional, we ensure it will compile with XLA without problems!\n\n#### XLA Rule #2: Your code cannot have \u201cdata-dependent shapes\u201d",
      "What this means is that the shape of all of the `tf.Tensor` objects in your code cannot depend on their values. For example, the function `tf.unique` cannot be compiled with XLA, because it returns a `tensor` containing one instance of each unique value in the input. The shape of this output will obviously be different depending on how repetitive the input `Tensor` was, and so XLA refuses to handle it!\n\nIn general, most neural network code obeys rule #2 by default. However, there are a few common cases where it becomes a problem. One very common one is when you use **label masking**, setting your labels to a negative value to indicate that those positions should be ignored when computing the loss. If you look at NumPy or PyTorch loss functions that support label masking, you will often see code like this that uses [boolean indexing](https://numpy.org/doc/stable/user/basics.indexing.html#boolean-array-indexing):",
      "```python\nlabel_mask = labels >= 0\nmasked_outputs = outputs[label_mask]\nmasked_labels = labels[label_mask]\nloss = compute_loss(masked_outputs, masked_labels)\nmean_loss = torch.mean(loss)\n```\n\nThis code is totally fine in NumPy or PyTorch, but it breaks in XLA! Why? Because the shape of `masked_outputs` and `masked_labels` depends on how many positions are masked - that makes it a **data-dependent shape.** However, just like for rule #1, we can often rewrite this code to yield exactly the same output without any data-dependent shapes.\n\n```python\nlabel_mask = tf.cast(labels >= 0, tf.float32)\nloss = compute_loss(outputs, labels)\nloss = loss * label_mask  # Set negative label positions to 0\nmean_loss = tf.reduce_sum(loss) / tf.reduce_sum(label_mask)\n```",
      "Here, we avoid data-dependent shapes by computing the loss for every position, but zeroing out the masked positions in both the numerator and denominator when we calculate the mean, which yields exactly the same result as the first block while maintaining XLA compatibility. Note that we use the same trick as in rule #1 - converting a `tf.bool` to `tf.float32` and using it as an indicator variable. This is a really useful trick, so remember it if you need to convert your own code to XLA!\n\n#### XLA Rule #3: XLA will need to recompile your model for every different input shape it sees",
      "This is the big one. What this means is that if your input shapes are very variable, XLA will have to recompile your model over and over, which will create huge performance problems. This commonly arises in NLP models, where input texts have variable lengths after tokenization. In other modalities, static shapes are more common and this rule is much less of a problem.\n\nHow can you get around rule #3? The key is **padding** - if you pad all your inputs to the same length, and then use an `attention_mask`, you can get the same results as you\u2019d get from variable shapes, but without any XLA issues. However, excessive padding can cause severe slowdown too - if you pad all your samples to the maximum length in the whole dataset, you might end up with batches consisting endless padding tokens, which will waste a lot of compute and memory!",
      "There isn\u2019t a perfect solution to this problem. However, you can try some tricks. One very useful trick is to **pad batches of samples up to a multiple of a number like 32 or 64 tokens.** This often only increases the number of tokens by a small amount, but it hugely reduces the number of unique input shapes, because every input shape now has to be a multiple of 32 or 64. Fewer unique input shapes means fewer XLA compilations!\n\n<Tip>\n\n**\ud83e\udd17Specific HuggingFace Tip\ud83e\udd17:** Our tokenizers and data collators have methods that can help you here. You can use `padding=\"max_length\"` or `padding=\"longest\"` when calling tokenizers to get them to output padded data. Our tokenizers and data collators also have a `pad_to_multiple_of` argument that you can use to reduce the number of unique input shapes you see!\n\n</Tip>",
      "</Tip>\n\n### How do I actually train my model on TPU?\n\nOnce your training is XLA-compatible and (if you\u2019re using TPU Node / Colab) your dataset has been prepared appropriately, running on TPU is surprisingly easy! All you really need to change in your code is to add a few lines to initialize your TPU, and to ensure that your model and dataset are created inside a `TPUStrategy` scope. Take a look at [our TPU example notebook](https://colab.research.google.com/github/huggingface/notebooks/blob/main/examples/tpu_training-tf.ipynb) to see this in action!\n\n### Summary\n\nThere was a lot in here, so let\u2019s summarize with a quick checklist you can follow when you want to get your model ready for TPU training:",
      "- Make sure your code follows the three rules of XLA\n- Compile your model with `jit_compile=True` on CPU/GPU and confirm that you can train it with XLA\n- Either load your dataset into memory or use a TPU-compatible dataset loading approach (see [notebook](https://colab.research.google.com/github/huggingface/notebooks/blob/main/examples/tpu_training-tf.ipynb))\n- Migrate your code either to Colab (with accelerator set to \u201cTPU\u201d) or a TPU VM on Google Cloud\n- Add TPU initializer code (see [notebook](https://colab.research.google.com/github/huggingface/notebooks/blob/main/examples/tpu_training-tf.ipynb))",
      "- Create your `TPUStrategy` and make sure dataset loading and model creation are inside the `strategy.scope()` (see [notebook](https://colab.research.google.com/github/huggingface/notebooks/blob/main/examples/tpu_training-tf.ipynb))\n- Don\u2019t forget to take `jit_compile=True` out again when you move to TPU!\n- \ud83d\ude4f\ud83d\ude4f\ud83d\ude4f\ud83e\udd7a\ud83e\udd7a\ud83e\udd7a\n- Call model.fit()\n- You did it!",
      "Gradio Demo: blocks_random_slider\n\n\n```\n!pip install -q gradio \n```\n\n\n```\n\nimport gradio as gr\n\n\ndef func(slider_1, slider_2):\n    return slider_1 * 5 + slider_2\n\n\nwith gr.Blocks() as demo:\n    slider = gr.Slider(minimum=-10.2, maximum=15, label=\"Random Slider (Static)\", randomize=True)\n    slider_1 = gr.Slider(minimum=100, maximum=200, label=\"Random Slider (Input 1)\", randomize=True)\n    slider_2 = gr.Slider(minimum=10, maximum=23.2, label=\"Random Slider (Input 2)\", randomize=True)\n    slider_3 = gr.Slider(value=3, label=\"Non random slider\")\n    btn = gr.Button(\"Run\")\n    btn.click(func, inputs=[slider_1, slider_2], outputs=gr.Number())",
      "if __name__ == \"__main__\":\n    demo.launch()\n\n```",
      "Git over SSH\n\nYou can access and write data in repositories on huggingface.co using SSH (Secure Shell Protocol). When you connect via SSH, you authenticate using a private key file on your local machine.\n\nSome actions, such as pushing changes, or cloning private repositories, will require you to upload your SSH public key to your account on huggingface.co.\n\nYou can use a pre-existing SSH key, or generate a new one specifically for huggingface.co.\n\n## Checking for existing SSH keys\n\nIf you have an existing SSH key, you can use that key to authenticate Git operations over SSH.\n\nSSH keys are usually located under `~/.ssh` on Mac & Linux, and under `C:\\\\Users\\\\<username>\\\\.ssh` on Windows. List files under that directory and look for files of the form:\n\n- id_rsa.pub\n- id_ecdsa.pub\n- id_ed25519.pub\n\nThose files contain your SSH public key.",
      "Those files contain your SSH public key.\n\nIf you don't have such file under `~/.ssh`, you will have to [generate a new key](#generating-a-new-ssh-keypair). Otherwise, you can [add your existing SSH public key(s) to your huggingface.co account](#add-a-ssh-key-to-your-account).\n\n## Generating a new SSH keypair\n\nIf you don't have any SSH keys on your machine, you can use `ssh-keygen` to generate a new SSH key pair (public + private keys):\n\n```\n$ ssh-keygen -t ed25519 -C \"your.email@example.co\"\n```\n\nWe recommend entering a passphrase when you are prompted to. A passphrase is an extra layer of security: it is a password that will be prompted whenever you use your SSH key.\n\nOnce your new key is generated, add it to your SSH agent with `ssh-add`:",
      "```\n$ ssh-add ~/.ssh/id_ed25519\n```\n\nIf you chose a different location than the default to store your SSH key, you would have to replace `~/.ssh/id_ed25519` with the file location you used.\n\n## Add a SSH key to your account\n\nTo access private repositories with SSH, or to push changes via SSH, you will need to add your SSH public key to your huggingface.co account. You can manage your SSH keys [in your user settings](https://huggingface.co/settings/keys).\n\nTo add a SSH key to your account, click on the \"Add SSH key\" button.\n\nThen, enter a name for this key (for example, \"Personal computer\"), and copy and paste the content of your **public** SSH key in the area below. The public key is located in the `~/.ssh/id_XXXX.pub` file you found or generated in the previous steps.",
      "Click on \"Add key\", and voil\u00e0! You have added a SSH key to your huggingface.co account.\n\n\n## Testing your SSH authentication\n\nOnce you have added your SSH key to your huggingface.co account, you can test that the connection works as expected.\n\nIn a terminal, run:\n```\n$ ssh -T git@hf.co\n```\n\nIf you see a message with your username, congrats! Everything went well, you are ready to use git over SSH.\n\nOtherwise, if the message states something like the following, make sure your SSH key is actually used by your SSH agent.\n```\nHi anonymous, welcome to Hugging Face.\n```",
      "!---\nCopyright 2022 The HuggingFace Team. All rights reserved.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n-->\n\n# Token classification with LayoutLMv3 (PyTorch version)",
      "This directory contains a script, `run_funsd_cord.py`, that can be used to fine-tune (or evaluate) LayoutLMv3 on form understanding datasets, such as [FUNSD](https://guillaumejaume.github.io/FUNSD/) and [CORD](https://github.com/clovaai/cord).\n\nThe script `run_funsd_cord.py` leverages the \ud83e\udd17 Datasets library and the Trainer API. You can easily customize it to your needs.\n\n## Fine-tuning on FUNSD\n\nFine-tuning LayoutLMv3 for token classification on [FUNSD](https://guillaumejaume.github.io/FUNSD/) can be done as follows:",
      "```bash\npython run_funsd_cord.py \\\n  --model_name_or_path microsoft/layoutlmv3-base \\\n  --dataset_name funsd \\\n  --output_dir layoutlmv3-test \\\n  --do_train \\\n  --do_eval \\\n  --max_steps 1000 \\\n  --evaluation_strategy steps \\\n  --eval_steps 100 \\\n  --learning_rate 1e-5 \\\n  --load_best_model_at_end \\\n  --metric_for_best_model \"eval_f1\" \\\n  --push_to_hub \\\n  --push_to_hub\u00b0model_id layoutlmv3-finetuned-funsd\n```",
      "\ud83d\udc40 The resulting model can be found here: https://huggingface.co/nielsr/layoutlmv3-finetuned-funsd. By specifying the `push_to_hub` flag, the model gets uploaded automatically to the hub (regularly), together with a model card, which includes metrics such as precision, recall and F1. Note that you can easily update the model card, as it's just a README file of the respective repo on the hub.\n\nThere's also the \"Training metrics\" [tab](https://huggingface.co/nielsr/layoutlmv3-finetuned-funsd/tensorboard), which shows Tensorboard logs over the course of training. Pretty neat, huh?\n\n## Fine-tuning on CORD\n\nFine-tuning LayoutLMv3 for token classification on [CORD](https://github.com/clovaai/cord) can be done as follows:",
      "```bash\npython run_funsd_cord.py \\\n  --model_name_or_path microsoft/layoutlmv3-base \\\n  --dataset_name cord \\\n  --output_dir layoutlmv3-test \\\n  --do_train \\\n  --do_eval \\\n  --max_steps 1000 \\\n  --evaluation_strategy steps \\\n  --eval_steps 100 \\\n  --learning_rate 5e-5 \\\n  --load_best_model_at_end \\\n  --metric_for_best_model \"eval_f1\" \\\n  --push_to_hub \\\n  --push_to_hub\u00b0model_id layoutlmv3-finetuned-cord\n```\n\n\ud83d\udc40 The resulting model can be found here: https://huggingface.co/nielsr/layoutlmv3-finetuned-cord. Note that a model card gets generated automatically in case you specify the `push_to_hub` flag.",
      "State in Blocks\n\nWe covered [State in Interfaces](https://gradio.app/interface-state), this guide takes a look at state in Blocks, which works mostly the same.\n\n## Global State\n\nGlobal state in Blocks works the same as in Interface. Any variable created outside a function call is a reference shared between all users.\n\n## Session State\n\nGradio supports session **state**, where data persists across multiple submits within a page session, in Blocks apps as well. To reiterate, session data is _not_ shared between different users of your model. To store data in a session state, you need to do three things:\n\n1. Create a `gr.State()` object. If there is a default value to this stateful object, pass that into the constructor.\n2. In the event listener, put the `State` object as an input and output.\n3. In the event listener function, add the variable to the input parameters and the return value.",
      "Let's take a look at a game of hangman.\n\n$code_hangman\n$demo_hangman\n\nLet's see how we do each of the 3 steps listed above in this game:\n\n1. We store the used letters in `used_letters_var`. In the constructor of `State`, we set the initial value of this to `[]`, an empty list.\n2. In `btn.click()`, we have a reference to `used_letters_var` in both the inputs and outputs.\n3. In `guess_letter`, we pass the value of this `State` to `used_letters`, and then return an updated value of this `State` in the return statement.\n\nWith more complex apps, you will likely have many State variables storing session state in a single Blocks app.\n\nLearn more about `State` in the [docs](https://gradio.app/docs#state).",
      "\u5982\u4f55\u4f7f\u7528\u5730\u56fe\u7ec4\u4ef6\u7ed8\u5236\u56fe\u8868\n\nRelated spaces:\nTags: PLOTS, MAPS\n\n## \u7b80\u4ecb\n\n\u672c\u6307\u5357\u4ecb\u7ecd\u5982\u4f55\u4f7f\u7528 Gradio \u7684 `Plot` \u7ec4\u4ef6\u5728\u5730\u56fe\u4e0a\u7ed8\u5236\u5730\u7406\u6570\u636e\u3002Gradio \u7684 `Plot` \u7ec4\u4ef6\u53ef\u4ee5\u4e0e Matplotlib\u3001Bokeh \u548c Plotly \u4e00\u8d77\u4f7f\u7528\u3002\u5728\u672c\u6307\u5357\u4e2d\uff0c\u6211\u4eec\u5c06\u4f7f\u7528 Plotly \u8fdb\u884c\u64cd\u4f5c\u3002Plotly \u53ef\u4ee5\u8ba9\u5f00\u53d1\u4eba\u5458\u8f7b\u677e\u521b\u5efa\u5404\u79cd\u5730\u56fe\u6765\u5c55\u793a\u4ed6\u4eec\u7684\u5730\u7406\u6570\u636e\u3002\u70b9\u51fb[\u8fd9\u91cc](https://plotly.com/python/maps/)\u67e5\u770b\u4e00\u4e9b\u793a\u4f8b\u3002\n\n## \u6982\u8ff0",
      "## \u6982\u8ff0\n\n\u6211\u4eec\u5c06\u4f7f\u7528\u7ebd\u7ea6\u5e02\u7684 Airbnb \u6570\u636e\u96c6\uff0c\u8be5\u6570\u636e\u96c6\u6258\u7ba1\u5728 kaggle \u4e0a\uff0c\u70b9\u51fb[\u8fd9\u91cc](https://www.kaggle.com/datasets/dgomonov/new-york-city-airbnb-open-data)\u3002\u6211\u5df2\u7ecf\u5c06\u5176\u4e0a\u4f20\u5230 Hugging Face Hub \u4f5c\u4e3a\u4e00\u4e2a\u6570\u636e\u96c6\uff0c\u65b9\u4fbf\u4f7f\u7528\u548c\u4e0b\u8f7d\uff0c\u70b9\u51fb[\u8fd9\u91cc](https://huggingface.co/datasets/gradio/NYC-Airbnb-Open-Data)\u3002\u4f7f\u7528\u8fd9\u4e9b\u6570\u636e\uff0c\u6211\u4eec\u5c06\u5728\u5730\u56fe\u4e0a\u7ed8\u5236 Airbnb \u7684\u4f4d\u7f6e\uff0c\u5e76\u5141\u8bb8\u57fa\u4e8e\u4ef7\u683c\u548c\u4f4d\u7f6e\u8fdb\u884c\u7b5b\u9009\u3002\u4e0b\u9762\u662f\u6211\u4eec\u5c06\u8981\u6784\u5efa\u7684\u6f14\u793a\u3002 \u26a1\ufe0f\n\n$demo_map_airbnb\n\n## \u6b65\u9aa4 1-\u52a0\u8f7d CSV \u6570\u636e \ud83d\udcbe\n\n\u8ba9\u6211\u4eec\u9996\u5148\u4ece Hugging Face Hub \u52a0\u8f7d\u7ebd\u7ea6\u5e02\u7684 Airbnb \u6570\u636e\u3002",
      "```python\nfrom datasets import load_dataset\n\ndataset = load_dataset(\"gradio/NYC-Airbnb-Open-Data\", split=\"train\")\ndf = dataset.to_pandas()\n\ndef filter_map(min_price, max_price, boroughs):\n    new_df = df[(df['neighbourhood_group'].isin(boroughs)) &\n            (df['price'] > min_price) & (df['price'] < max_price)]\n    names = new_df[\"name\"].tolist()\n    prices = new_df[\"price\"].tolist()\n    text_list = [(names[i], prices[i]) for i in range(0, len(names))]\n```",
      "\u5728\u4e0a\u9762\u7684\u4ee3\u7801\u4e2d\uff0c\u6211\u4eec\u5148\u5c06 CSV \u6570\u636e\u52a0\u8f7d\u5230\u4e00\u4e2a pandas dataframe \u4e2d\u3002\u8ba9\u6211\u4eec\u9996\u5148\u5b9a\u4e49\u4e00\u4e2a\u51fd\u6570\uff0c\u8fd9\u5c06\u4f5c\u4e3a gradio \u5e94\u7528\u7a0b\u5e8f\u7684\u9884\u6d4b\u51fd\u6570\u3002\u8be5\u51fd\u6570\u5c06\u63a5\u53d7\u6700\u4f4e\u4ef7\u683c\u3001\u6700\u9ad8\u4ef7\u683c\u8303\u56f4\u548c\u7b5b\u9009\u7ed3\u679c\u5730\u533a\u7684\u5217\u8868\u4f5c\u4e3a\u53c2\u6570\u3002\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u4f20\u5165\u7684\u503c (`min_price`\u3001`max_price` \u548c\u5730\u533a\u5217\u8868) \u6765\u7b5b\u9009\u6570\u636e\u6846\u5e76\u521b\u5efa `new_df`\u3002\u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u5c06\u521b\u5efa\u5305\u542b\u6bcf\u4e2a Airbnb \u7684\u540d\u79f0\u548c\u4ef7\u683c\u7684 `text_list`\uff0c\u4ee5\u4fbf\u5728\u5730\u56fe\u4e0a\u4f7f\u7528\u4f5c\u4e3a\u6807\u7b7e\u3002\n\n## \u6b65\u9aa4 2-\u5730\u56fe\u56fe\u8868 \ud83c\udf10",
      "Plotly \u4f7f\u5f97\u5904\u7406\u5730\u56fe\u53d8\u5f97\u5f88\u5bb9\u6613\u3002\u8ba9\u6211\u4eec\u770b\u4e00\u4e0b\u4e0b\u9762\u7684\u4ee3\u7801\uff0c\u4e86\u89e3\u5982\u4f55\u521b\u5efa\u5730\u56fe\u56fe\u8868\u3002\n\n```python\nimport plotly.graph_objects as go\n\nfig = go.Figure(go.Scattermapbox(\n            customdata=text_list,\n            lat=new_df['latitude'].tolist(),\n            lon=new_df['longitude'].tolist(),\n            mode='markers',\n            marker=go.scattermapbox.Marker(\n                size=6\n            ),\n            hoverinfo=\"text\",\n            hovertemplate='<b>Name</b>: %{customdata[0]}<br><b>Price</b>: $%{customdata[1]}'\n        ))",
      "fig.update_layout(\n    mapbox_style=\"open-street-map\",\n    hovermode='closest',\n    mapbox=dict(\n        bearing=0,\n        center=go.layout.mapbox.Center(\n            lat=40.67,\n            lon=-73.90\n        ),\n        pitch=0,\n        zoom=9\n    ),\n)\n```\n\n\u4e0a\u9762\u7684\u4ee3\u7801\u4e2d\uff0c\u6211\u4eec\u901a\u8fc7\u4f20\u5165\u7ecf\u7eac\u5ea6\u5217\u8868\u6765\u521b\u5efa\u4e00\u4e2a\u6563\u70b9\u56fe\u3002\u6211\u4eec\u8fd8\u4f20\u5165\u4e86\u540d\u79f0\u548c\u4ef7\u683c\u7684\u81ea\u5b9a\u4e49\u6570\u636e\uff0c\u4ee5\u4fbf\u5728\u9f20\u6807\u60ac\u505c\u5728\u6bcf\u4e2a\u6807\u8bb0\u4e0a\u65f6\u663e\u793a\u989d\u5916\u7684\u4fe1\u606f\u3002\u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u4f7f\u7528 `update_layout` \u6765\u6307\u5b9a\u5176\u4ed6\u5730\u56fe\u8bbe\u7f6e\uff0c\u4f8b\u5982\u7f29\u653e\u548c\u5c45\u4e2d\u3002\n\n\u6709\u5173\u4f7f\u7528 Mapbox \u548c Plotly \u521b\u5efa\u6563\u70b9\u56fe\u7684\u66f4\u591a\u4fe1\u606f\uff0c\u8bf7\u70b9\u51fb[\u8fd9\u91cc](https://plotly.com/python/scattermapbox/)\u3002",
      "## \u6b65\u9aa4 3-Gradio \u5e94\u7528\u7a0b\u5e8f \u26a1\ufe0f\n\n\u6211\u4eec\u5c06\u4f7f\u7528\u4e24\u4e2a `gr.Number` \u7ec4\u4ef6\u548c\u4e00\u4e2a `gr.CheckboxGroup` \u7ec4\u4ef6\uff0c\u5141\u8bb8\u7528\u6237\u6307\u5b9a\u4ef7\u683c\u8303\u56f4\u548c\u5730\u533a\u4f4d\u7f6e\u3002\u7136\u540e\uff0c\u6211\u4eec\u5c06\u4f7f\u7528 `gr.Plot` \u7ec4\u4ef6\u4f5c\u4e3a\u6211\u4eec\u4e4b\u524d\u521b\u5efa\u7684 Plotly + Mapbox \u5730\u56fe\u7684\u8f93\u51fa\u3002",
      "```python\nwith gr.Blocks() as demo:\n    with gr.Column():\n        with gr.Row():\n            min_price = gr.Number(value=250, label=\"Minimum Price\")\n            max_price = gr.Number(value=1000, label=\"Maximum Price\")\n        boroughs = gr.CheckboxGroup(choices=[\"Queens\", \"Brooklyn\", \"Manhattan\", \"Bronx\", \"Staten Island\"], value=[\"Queens\", \"Brooklyn\"], label=\"Select Boroughs:\")\n        btn = gr.Button(value=\"Update Filter\")\n        map = gr.Plot()\n    demo.load(filter_map, [min_price, max_price, boroughs], map)\n    btn.click(filter_map, [min_price, max_price, boroughs], map)\n```",
      "\u6211\u4eec\u4f7f\u7528 `gr.Column` \u548c `gr.Row` \u5e03\u5c40\u8fd9\u4e9b\u7ec4\u4ef6\uff0c\u5e76\u4e3a\u6f14\u793a\u52a0\u8f7d\u65f6\u548c\u70b9\u51fb \" \u66f4\u65b0\u7b5b\u9009 \" \u6309\u94ae\u65f6\u6dfb\u52a0\u4e86\u4e8b\u4ef6\u89e6\u53d1\u5668\uff0c\u4ee5\u89e6\u53d1\u5730\u56fe\u66f4\u65b0\u65b0\u7684\u7b5b\u9009\u6761\u4ef6\u3002\n\n\u4ee5\u4e0b\u662f\u5b8c\u6574\u6f14\u793a\u4ee3\u7801\uff1a\n\n$code_map_airbnb\n\n## \u6b65\u9aa4 4-\u90e8\u7f72 Deployment \ud83e\udd17\n\n\u5982\u679c\u4f60\u8fd0\u884c\u4e0a\u9762\u7684\u4ee3\u7801\uff0c\u4f60\u7684\u5e94\u7528\u7a0b\u5e8f\u5c06\u5728\u672c\u5730\u8fd0\u884c\u3002\n\u5982\u679c\u8981\u83b7\u53d6\u4e34\u65f6\u5171\u4eab\u94fe\u63a5\uff0c\u53ef\u4ee5\u5c06 `share=True` \u53c2\u6570\u4f20\u9012\u7ed9 `launch`\u3002\n\n\u4f46\u5982\u679c\u4f60\u60f3\u8981\u4e00\u4e2a\u6c38\u4e45\u7684\u90e8\u7f72\u89e3\u51b3\u65b9\u6848\u5462\uff1f\n\u8ba9\u6211\u4eec\u5c06\u6211\u4eec\u7684 Gradio \u5e94\u7528\u7a0b\u5e8f\u90e8\u7f72\u5230\u514d\u8d39\u7684 HuggingFace Spaces \u5e73\u53f0\u3002",
      "\u5982\u679c\u4f60\u4ee5\u524d\u6ca1\u6709\u4f7f\u7528\u8fc7 Spaces\uff0c\u8bf7\u6309\u7167\u4e4b\u524d\u7684\u6307\u5357[\u8fd9\u91cc](/using_hugging_face_integrations)\u3002\n\n## \u7ed3\u8bba \ud83c\udf89\n\n\u4f60\u5df2\u7ecf\u5b8c\u6210\u4e86\uff01\u8fd9\u662f\u6784\u5efa\u5730\u56fe\u6f14\u793a\u6240\u9700\u7684\u6240\u6709\u4ee3\u7801\u3002\n\n\u94fe\u63a5\u5230\u6f14\u793a\uff1a[\u5730\u56fe\u6f14\u793a](https://huggingface.co/spaces/gradio/map_airbnb)\u548c[\u5b8c\u6574\u4ee3\u7801](https://huggingface.co/spaces/gradio/map_airbnb/blob/main/run.py)\uff08\u5728 Hugging Face Spaces\uff09",
      "SE-ResNet\n\n**SE ResNet** is a variant of a [ResNet](https://www.paperswithcode.com/method/resnet) that employs [squeeze-and-excitation blocks](https://paperswithcode.com/method/squeeze-and-excitation-block) to enable the network to perform dynamic channel-wise feature recalibration.\n\n## How do I use this model on an image?\n\nTo load a pretrained model:\n\n```py\n>>> import timm\n>>> model = timm.create_model('seresnet152d', pretrained=True)\n>>> model.eval()\n```\n\nTo load and preprocess the image:\n\n```py \n>>> import urllib\n>>> from PIL import Image\n>>> from timm.data import resolve_data_config\n>>> from timm.data.transforms_factory import create_transform\n\n>>> config = resolve_data_config({}, model=model)\n>>> transform = create_transform(**config)",
      ">>> url, filename = (\"https://github.com/pytorch/hub/raw/master/images/dog.jpg\", \"dog.jpg\")\n>>> urllib.request.urlretrieve(url, filename)\n>>> img = Image.open(filename).convert('RGB')\n>>> tensor = transform(img).unsqueeze(0) # transform and add batch dimension\n```\n\nTo get the model predictions:\n\n```py\n>>> import torch\n>>> with torch.no_grad():\n...     out = model(tensor)\n>>> probabilities = torch.nn.functional.softmax(out[0], dim=0)\n>>> print(probabilities.shape)\n>>> # prints: torch.Size([1000])\n```\n\nTo get the top-5 predictions class names:",
      "```py\n>>> # Get imagenet class mappings\n>>> url, filename = (\"https://raw.githubusercontent.com/pytorch/hub/master/imagenet_classes.txt\", \"imagenet_classes.txt\")\n>>> urllib.request.urlretrieve(url, filename) \n>>> with open(\"imagenet_classes.txt\", \"r\") as f:\n...     categories = [s.strip() for s in f.readlines()]",
      ">>> # Print top categories per image\n>>> top5_prob, top5_catid = torch.topk(probabilities, 5)\n>>> for i in range(top5_prob.size(0)):\n...     print(categories[top5_catid[i]], top5_prob[i].item())\n>>> # prints class names and probabilities like:\n>>> # [('Samoyed', 0.6425196528434753), ('Pomeranian', 0.04062102362513542), ('keeshond', 0.03186424449086189), ('white wolf', 0.01739676296710968), ('Eskimo dog', 0.011717947199940681)]\n```\n\nReplace the model name with the variant you want to use, e.g. `seresnet152d`. You can find the IDs in the model summaries at the top of this page.",
      "To extract image features with this model, follow the [timm feature extraction examples](../feature_extraction), just change the name of the model you want to use.\n\n## How do I finetune this model?\n\nYou can finetune any of the pre-trained models just by changing the classifier (the last layer).\n\n```py\n>>> model = timm.create_model('seresnet152d', pretrained=True, num_classes=NUM_FINETUNE_CLASSES)\n```\nTo finetune on your own dataset, you have to write a training loop or adapt [timm's training\nscript](https://github.com/rwightman/pytorch-image-models/blob/master/train.py) to use your dataset.\n\n## How do I train this model?\n\nYou can follow the [timm recipe scripts](../scripts) for training a new model afresh.\n\n## Citation",
      "## Citation\n\n```BibTeX\n@misc{hu2019squeezeandexcitation,\n      title={Squeeze-and-Excitation Networks}, \n      author={Jie Hu and Li Shen and Samuel Albanie and Gang Sun and Enhua Wu},\n      year={2019},\n      eprint={1709.01507},\n      archivePrefix={arXiv},\n      primaryClass={cs.CV}\n}\n```",
      "<!--\nType: model-index\nCollections:\n- Name: SE ResNet\n  Paper:\n    Title: Squeeze-and-Excitation Networks\n    URL: https://paperswithcode.com/paper/squeeze-and-excitation-networks\nModels:\n- Name: seresnet152d\n  In Collection: SE ResNet\n  Metadata:\n    FLOPs: 20161904304\n    Parameters: 66840000\n    File Size: 268144497\n    Architecture:\n    - 1x1 Convolution\n    - Batch Normalization\n    - Bottleneck Residual Block\n    - Convolution\n    - Global Average Pooling\n    - Max Pooling\n    - ReLU\n    - Residual Block\n    - Residual Connection\n    - Softmax\n    - Squeeze-and-Excitation Block\n    Tasks:\n    - Image Classification\n    Training Techniques:",
      "- Image Classification\n    Training Techniques:\n    - Label Smoothing\n    - SGD with Momentum\n    - Weight Decay\n    Training Data:\n    - ImageNet\n    Training Resources: 8x NVIDIA Titan X GPUs\n    ID: seresnet152d\n    LR: 0.6\n    Epochs: 100\n    Layers: 152\n    Dropout: 0.2\n    Crop Pct: '0.94'\n    Momentum: 0.9\n    Batch Size: 1024\n    Image Size: '256'\n    Interpolation: bicubic\n  Code: https://github.com/rwightman/pytorch-image-models/blob/a7f95818e44b281137503bcf4b3e3e94d8ffa52f/timm/models/resnet.py#L1206",
      "Weights: https://github.com/rwightman/pytorch-image-models/releases/download/v0.1-weights/seresnet152d_ra2-04464dd2.pth\n  Results:\n  - Task: Image Classification\n    Dataset: ImageNet\n    Metrics:\n      Top 1 Accuracy: 83.74%\n      Top 5 Accuracy: 96.77%\n- Name: seresnet50\n  In Collection: SE ResNet\n  Metadata:\n    FLOPs: 5285062320\n    Parameters: 28090000\n    File Size: 112621903\n    Architecture:\n    - 1x1 Convolution\n    - Batch Normalization\n    - Bottleneck Residual Block\n    - Convolution\n    - Global Average Pooling\n    - Max Pooling\n    - ReLU\n    - Residual Block\n    - Residual Connection\n    - Softmax",
      "- Softmax\n    - Squeeze-and-Excitation Block\n    Tasks:\n    - Image Classification\n    Training Techniques:\n    - Label Smoothing\n    - SGD with Momentum\n    - Weight Decay\n    Training Data:\n    - ImageNet\n    Training Resources: 8x NVIDIA Titan X GPUs\n    ID: seresnet50\n    LR: 0.6\n    Epochs: 100\n    Layers: 50\n    Dropout: 0.2\n    Crop Pct: '0.875'\n    Momentum: 0.9\n    Batch Size: 1024\n    Image Size: '224'\n    Interpolation: bicubic\n  Code: https://github.com/rwightman/pytorch-image-models/blob/a7f95818e44b281137503bcf4b3e3e94d8ffa52f/timm/models/resnet.py#L1180",
      "Weights: https://github.com/rwightman/pytorch-image-models/releases/download/v0.1-weights/seresnet50_ra_224-8efdb4bb.pth\n  Results:\n  - Task: Image Classification\n    Dataset: ImageNet\n    Metrics:\n      Top 1 Accuracy: 80.26%\n      Top 5 Accuracy: 95.07%\n-->"
    ]
  },
  {
    "chunk_size": 400,
    "chunk_overlap": 0,
    "limit": 10,
    "texts": [
      "Create an Endpoint\n\nAfter your first login, you will be directed to the [Endpoint creation page](https://ui.endpoints.huggingface.co/new). As an example, this guide will go through the steps to deploy [distilbert-base-uncased-finetuned-sst-2-english](https://huggingface.co/distilbert-base-uncased-finetuned-sst-2-english) for text classification. \n\n## 1. Enter the Hugging Face Repository ID and your desired endpoint name:\n\n<img src=\"https://raw.githubusercontent.com/huggingface/hf-endpoints-documentation/main/assets/1_repository.png\" alt=\"select repository\" />\n\n## 2. Select your Cloud Provider and region. Initially, only AWS will be available as a Cloud Provider with the `us-east-1` and `eu-west-1` regions. We will add Azure soon, and if you need to test Endpoints with other Cloud Providers or regions, please let us know.\n\n<img src=\"https://raw.githubusercontent.com/huggingface/hf-endpoints-documentation/main/assets/1_region.png\" alt=\"select region\" />\n\n## 3. Define the [Security Level](security) for the Endpoint:\n\n<img src=\"https://raw.githubusercontent.com/huggingface/hf-endpoints-documentation/main/assets/1_security.png\" alt=\"define security\" />\n\n## 4. Create your Endpoint by clicking **Create Endpoint**. By default, your Endpoint is created with a medium CPU (2 x 4GB vCPUs with Intel Xeon Ice Lake) The cost estimate assumes the Endpoint will be up for an entire month, and does not take autoscaling into account.\n\n<img src=\"https://raw.githubusercontent.com/huggingface/hf-endpoints-documentation/main/assets/1_create_cost.png\" alt=\"create endpoint\" />",
      "## 5. Wait for the Endpoint to build, initialize and run which can take between 1 to 5 minutes.\n\n<img src=\"https://raw.githubusercontent.com/huggingface/hf-endpoints-documentation/main/assets/overview.png\" alt=\"overview\" />\n\n## 6. Test your Endpoint in the overview with the Inference widget \ud83c\udfc1 \ud83c\udf89!\n\n<img src=\"https://raw.githubusercontent.com/huggingface/hf-endpoints-documentation/main/assets/1_inference.png\" alt=\"run inference\" />",
      "Choosing a metric for your task\n\n**So you've trained your model and want to see how well it\u2019s doing on a dataset of your choice. Where do you start?**\n\nThere is no \u201cone size fits all\u201d approach to choosing an evaluation metric, but some good guidelines to keep in mind are:\n\n## Categories of metrics\n\nThere are 3 high-level categories of metrics:\n\n1. *Generic metrics*, which can be applied to a variety of situations and datasets, such as precision and accuracy.\n2. *Task-specific metrics*, which are limited to a given task, such as Machine Translation (often evaluated using metrics [BLEU](https://huggingface.co/metrics/bleu) or [ROUGE](https://huggingface.co/metrics/rouge)) or Named Entity Recognition (often evaluated with [seqeval](https://huggingface.co/metrics/seqeval)).\n3. *Dataset-specific metrics*, which aim to measure model performance on specific benchmarks: for instance, the [GLUE benchmark](https://huggingface.co/datasets/glue) has a dedicated [evaluation metric](https://huggingface.co/metrics/glue).\n\nLet's look at each of these three cases:\n\n### Generic metrics\n\nMany of the metrics used in the Machine Learning community are quite generic and can be applied in a variety of tasks and datasets.\n\nThis is the case for metrics like [accuracy](https://huggingface.co/metrics/accuracy) and [precision](https://huggingface.co/metrics/precision), which can be used for evaluating labeled (supervised) datasets, as well as [perplexity](https://huggingface.co/metrics/perplexity), which can be used for evaluating different kinds of (unsupervised) generative tasks.",
      "To see the input structure of a given metric, you can look at its metric card. For example, in the case of [precision](https://huggingface.co/metrics/precision), the format is:\n```\n>>> precision_metric = evaluate.load(\"precision\")\n>>> results = precision_metric.compute(references=[0, 1], predictions=[0, 1])\n>>> print(results)\n{'precision': 1.0}\n```\n\n### Task-specific metrics\n\nPopular ML tasks like Machine Translation and Named Entity Recognition have specific metrics that can be used to compare models. For example, a series of different metrics have been proposed for text generation, ranging from [BLEU](https://huggingface.co/metrics/bleu) and its derivatives such as [GoogleBLEU](https://huggingface.co/metrics/google_bleu) and [GLEU](https://huggingface.co/metrics/gleu), but also [ROUGE](https://huggingface.co/metrics/rouge), [MAUVE](https://huggingface.co/metrics/mauve), etc.\n\nYou can find the right metric for your task by:",
      "- **Looking at the [Task pages](https://huggingface.co/tasks)** to see what metrics can be used for evaluating models for a given task.\n- **Checking out leaderboards** on sites like [Papers With Code](https://paperswithcode.com/) (you can search by task and by dataset).\n-  **Reading the metric cards** for the relevant metrics and see which ones are a good fit for your use case. For example, see the [BLEU metric card](https://github.com/huggingface/evaluate/tree/main/metrics/bleu) or [SQuaD metric card](https://github.com/huggingface/evaluate/tree/main/metrics/squad).\n- **Looking at papers and blog posts** published on the topic and see what metrics they report. This can change over time, so try to pick papers from the last couple of years!\n\n### Dataset-specific metrics\n\nSome datasets have specific metrics associated with them -- this is especially in the case of popular benchmarks like [GLUE](https://huggingface.co/metrics/glue) and [SQuAD](https://huggingface.co/metrics/squad).\n\n<Tip warning={true}>\n\ud83d\udca1\nGLUE is actually a collection of different subsets on different tasks, so first you need to choose the one that corresponds to the NLI task, such as mnli, which is described as \u201ccrowdsourced collection of sentence pairs with textual entailment annotations\u201d\n</Tip>",
      "If you are evaluating your model on a benchmark dataset like the ones mentioned above, you can use its dedicated evaluation metric. Make sure you respect the format that they require. For example, to evaluate your model on the [SQuAD](https://huggingface.co/datasets/squad) dataset, you need to feed the `question` and `context` into your model and return the `prediction_text`, which should be compared with the `references` (based on matching the `id` of the question) :\n\n```\n>>> from evaluate import load\n>>> squad_metric = load(\"squad\")\n>>> predictions = [{'prediction_text': '1976', 'id': '56e10a3be3433e1400422b22'}]\n>>> references = [{'answers': {'answer_start': [97], 'text': ['1976']}, 'id': '56e10a3be3433e1400422b22'}]\n>>> results = squad_metric.compute(predictions=predictions, references=references)\n>>> results\n{'exact_match': 100.0, 'f1': 100.0}\n```\n\nYou can find examples of dataset structures by consulting the \"Dataset Preview\" function or the dataset card for a given dataset, and you can see how to use its dedicated evaluation function based on the metric card.",
      "\u4e3b\u8981\u7279\u70b9\n\n\u8ba9\u6211\u4eec\u6765\u4ecb\u7ecd\u4e00\u4e0b Gradio \u6700\u53d7\u6b22\u8fce\u7684\u4e00\u4e9b\u529f\u80fd\uff01\u8fd9\u91cc\u662f Gradio \u7684\u4e3b\u8981\u7279\u70b9\uff1a\n\n1. [\u6dfb\u52a0\u793a\u4f8b\u8f93\u5165](#example-inputs)\n2. [\u4f20\u9012\u81ea\u5b9a\u4e49\u9519\u8bef\u6d88\u606f](#errors)\n3. [\u6dfb\u52a0\u63cf\u8ff0\u5185\u5bb9](#descriptive-content)\n4. [\u8bbe\u7f6e\u65d7\u6807](#flagging)\n5. [\u9884\u5904\u7406\u548c\u540e\u5904\u7406](#preprocessing-and-postprocessing)\n6. [\u6837\u5f0f\u5316\u6f14\u793a](#styling)\n7. [\u6392\u961f\u7528\u6237](#queuing)\n8. [\u8fed\u4ee3\u8f93\u51fa](#iterative-outputs)\n9. [\u8fdb\u5ea6\u6761](#progress-bars)\n10. [\u6279\u5904\u7406\u51fd\u6570](#batch-functions)\n11. [\u5728\u534f\u4f5c\u7b14\u8bb0\u672c\u4e0a\u8fd0\u884c](#colab-notebooks)\n\n## \u793a\u4f8b\u8f93\u5165\n\n\u60a8\u53ef\u4ee5\u63d0\u4f9b\u7528\u6237\u53ef\u4ee5\u8f7b\u677e\u52a0\u8f7d\u5230 \"Interface\" \u4e2d\u7684\u793a\u4f8b\u6570\u636e\u3002\u8fd9\u5bf9\u4e8e\u6f14\u793a\u6a21\u578b\u671f\u671b\u7684\u8f93\u5165\u7c7b\u578b\u4ee5\u53ca\u6f14\u793a\u6570\u636e\u96c6\u548c\u6a21\u578b\u4e00\u8d77\u63a2\u7d22\u7684\u65b9\u5f0f\u975e\u5e38\u6709\u5e2e\u52a9\u3002\u8981\u52a0\u8f7d\u793a\u4f8b\u6570\u636e\uff0c\u60a8\u53ef\u4ee5\u5c06\u5d4c\u5957\u5217\u8868\u63d0\u4f9b\u7ed9 Interface \u6784\u9020\u51fd\u6570\u7684 `examples=` \u5173\u952e\u5b57\u53c2\u6570\u3002\u5916\u90e8\u5217\u8868\u4e2d\u7684\u6bcf\u4e2a\u5b50\u5217\u8868\u8868\u793a\u4e00\u4e2a\u6570\u636e\u6837\u672c\uff0c\u5b50\u5217\u8868\u4e2d\u7684\u6bcf\u4e2a\u5143\u7d20\u8868\u793a\u6bcf\u4e2a\u8f93\u5165\u7ec4\u4ef6\u7684\u8f93\u5165\u3002\u6709\u5173\u6bcf\u4e2a\u7ec4\u4ef6\u7684\u793a\u4f8b\u6570\u636e\u683c\u5f0f\u5728[Docs](https://gradio.app/docs#components)\u4e2d\u6709\u8bf4\u660e\u3002\n\n$code_calculator\n$demo_calculator",
      "\u60a8\u53ef\u4ee5\u5c06\u5927\u578b\u6570\u636e\u96c6\u52a0\u8f7d\u5230\u793a\u4f8b\u4e2d\uff0c\u901a\u8fc7 Gradio \u6d4f\u89c8\u548c\u4e0e\u6570\u636e\u96c6\u8fdb\u884c\u4ea4\u4e92\u3002\u793a\u4f8b\u5c06\u81ea\u52a8\u5206\u9875\uff08\u53ef\u4ee5\u901a\u8fc7 Interface \u7684 `examples_per_page` \u53c2\u6570\u8fdb\u884c\u914d\u7f6e\uff09\u3002\n\n\u7ee7\u7eed\u4e86\u89e3\u793a\u4f8b\uff0c\u8bf7\u53c2\u9605[\u66f4\u591a\u793a\u4f8b](https://gradio.app/more-on-examples)\u6307\u5357\u3002\n\n## \u9519\u8bef\n\n\u60a8\u5e0c\u671b\u5411\u7528\u6237\u4f20\u9012\u81ea\u5b9a\u4e49\u9519\u8bef\u6d88\u606f\u3002\u4e3a\u6b64\uff0cwith `gr.Error(\"custom message\")` \u6765\u663e\u793a\u9519\u8bef\u6d88\u606f\u3002\u5982\u679c\u5728\u4e0a\u9762\u7684\u8ba1\u7b97\u5668\u793a\u4f8b\u4e2d\u5c1d\u8bd5\u9664\u4ee5\u96f6\uff0c\u5c06\u663e\u793a\u81ea\u5b9a\u4e49\u9519\u8bef\u6d88\u606f\u7684\u5f39\u51fa\u6a21\u6001\u7a97\u53e3\u3002\u4e86\u89e3\u6709\u5173\u9519\u8bef\u7684\u66f4\u591a\u4fe1\u606f\uff0c\u8bf7\u53c2\u9605[\u6587\u6863](https://gradio.app/docs#error)\u3002\n\n## \u63cf\u8ff0\u6027\u5185\u5bb9\n\n\u5728\u524d\u9762\u7684\u793a\u4f8b\u4e2d\uff0c\u60a8\u53ef\u80fd\u5df2\u7ecf\u6ce8\u610f\u5230 Interface \u6784\u9020\u51fd\u6570\u4e2d\u7684 `title=` \u548c `description=` \u5173\u952e\u5b57\u53c2\u6570\uff0c\u5e2e\u52a9\u7528\u6237\u4e86\u89e3\u60a8\u7684\u5e94\u7528\u7a0b\u5e8f\u3002\n\nInterface \u6784\u9020\u51fd\u6570\u4e2d\u6709\u4e09\u4e2a\u53c2\u6570\u7528\u4e8e\u6307\u5b9a\u6b64\u5185\u5bb9\u5e94\u653e\u7f6e\u5728\u54ea\u91cc\uff1a\n\n- `title`\uff1a\u63a5\u53d7\u6587\u672c\uff0c\u5e76\u53ef\u4ee5\u5c06\u5176\u663e\u793a\u5728\u754c\u9762\u7684\u9876\u90e8\uff0c\u4e5f\u5c06\u6210\u4e3a\u9875\u9762\u6807\u9898\u3002\n- `description`\uff1a\u63a5\u53d7\u6587\u672c\u3001Markdown \u6216 HTML\uff0c\u5e76\u5c06\u5176\u653e\u7f6e\u5728\u6807\u9898\u6b63\u4e0b\u65b9\u3002\n- `article`\uff1a\u4e5f\u63a5\u53d7\u6587\u672c\u3001Markdown \u6216 HTML\uff0c\u5e76\u5c06\u5176\u653e\u7f6e\u5728\u754c\u9762\u4e0b\u65b9\u3002\n\n![annotated](/assets/guides/annotated.png)",
      "\u5982\u679c\u60a8\u4f7f\u7528\u7684\u662f `Blocks` API\uff0c\u5219\u53ef\u4ee5 with `gr.Markdown(...)` \u6216 `gr.HTML(...)` \u7ec4\u4ef6\u5728\u4efb\u4f55\u4f4d\u7f6e\u63d2\u5165\u6587\u672c\u3001Markdown \u6216 HTML\uff0c\u5176\u4e2d\u63cf\u8ff0\u6027\u5185\u5bb9\u4f4d\u4e8e `Component` \u6784\u9020\u51fd\u6570\u5185\u90e8\u3002\n\n\u53e6\u4e00\u4e2a\u6709\u7528\u7684\u5173\u952e\u5b57\u53c2\u6570\u662f `label=`\uff0c\u5b83\u5b58\u5728\u4e8e\u6bcf\u4e2a `Component` \u4e2d\u3002\u8fd9\u4fee\u6539\u4e86\u6bcf\u4e2a `Component` \u9876\u90e8\u7684\u6807\u7b7e\u6587\u672c\u3002\u8fd8\u53ef\u4ee5\u4e3a\u8bf8\u5982 `Textbox` \u6216 `Radio` \u4e4b\u7c7b\u7684\u8868\u5355\u5143\u7d20\u6dfb\u52a0 `info=` \u5173\u952e\u5b57\u53c2\u6570\uff0c\u4ee5\u63d0\u4f9b\u6709\u5173\u5176\u7528\u6cd5\u7684\u8fdb\u4e00\u6b65\u4fe1\u606f\u3002\n\n```python\ngr.Number(label='\u5e74\u9f84', info='\u4ee5\u5e74\u4e3a\u5355\u4f4d\uff0c\u5fc5\u987b\u5927\u4e8e0')\n```\n\n## \u65d7\u6807\n\n\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\"Interface\" \u5c06\u6709\u4e00\u4e2a \"Flag\" \u6309\u94ae\u3002\u5f53\u7528\u6237\u6d4b\u8bd5\u60a8\u7684 `Interface` \u65f6\uff0c\u5982\u679c\u770b\u5230\u6709\u8da3\u7684\u8f93\u51fa\uff0c\u4f8b\u5982\u9519\u8bef\u6216\u610f\u5916\u7684\u6a21\u578b\u884c\u4e3a\uff0c\u4ed6\u4eec\u53ef\u4ee5\u5c06\u8f93\u5165\u6807\u8bb0\u4e3a\u60a8\u8fdb\u884c\u67e5\u770b\u3002\u5728\u7531 `Interface` \u6784\u9020\u51fd\u6570\u7684 `flagging_dir=` \u53c2\u6570\u63d0\u4f9b\u7684\u76ee\u5f55\u4e2d\uff0c\u5c06\u8bb0\u5f55\u6807\u8bb0\u7684\u8f93\u5165\u5230\u4e00\u4e2a CSV \u6587\u4ef6\u4e2d\u3002\u5982\u679c\u754c\u9762\u6d89\u53ca\u6587\u4ef6\u6570\u636e\uff0c\u4f8b\u5982\u56fe\u50cf\u548c\u97f3\u9891\u7ec4\u4ef6\uff0c\u5c06\u521b\u5efa\u6587\u4ef6\u5939\u6765\u5b58\u50a8\u8fd9\u4e9b\u6807\u8bb0\u7684\u6570\u636e\u3002\n\n\u4f8b\u5982\uff0c\u5bf9\u4e8e\u4e0a\u9762\u663e\u793a\u7684\u8ba1\u7b97\u5668\u754c\u9762\uff0c\u6211\u4eec\u5c06\u5728\u4e0b\u9762\u7684\u65d7\u6807\u76ee\u5f55\u4e2d\u5b58\u50a8\u6807\u8bb0\u7684\u6570\u636e\uff1a\n\n```directory\n+-- calculator.py\n+-- flagged/\n|   +-- logs.csv\n```\n\n_flagged/logs.csv_",
      "```csv\nnum1,operation,num2,Output\n5,add,7,12\n6,subtract,1.5,4.5\n```\n\n\u4e0e\u65e9\u671f\u663e\u793a\u7684\u51b7\u8272\u754c\u9762\u76f8\u5bf9\u5e94\uff0c\u6211\u4eec\u5c06\u5728\u4e0b\u9762\u7684\u65d7\u6807\u76ee\u5f55\u4e2d\u5b58\u50a8\u6807\u8bb0\u7684\u6570\u636e\uff1a\n\n```directory\n+-- sepia.py\n+-- flagged/\n|   +-- logs.csv\n|   +-- im/\n|   |   +-- 0.png\n|   |   +-- 1.png\n|   +-- Output/\n|   |   +-- 0.png\n|   |   +-- 1.png\n```\n\n_flagged/logs.csv_\n\n```csv\nim,Output\nim/0.png,Output/0.png\nim/1.png,Output/1.png\n```\n\n\u5982\u679c\u60a8\u5e0c\u671b\u7528\u6237\u63d0\u4f9b\u65d7\u6807\u539f\u56e0\uff0c\u53ef\u4ee5\u5c06\u5b57\u7b26\u4e32\u5217\u8868\u4f20\u9012\u7ed9 Interface \u7684 `flagging_options` \u53c2\u6570\u3002\u7528\u6237\u5728\u8fdb\u884c\u65d7\u6807\u65f6\u5fc5\u987b\u9009\u62e9\u5176\u4e2d\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u8fd9\u5c06\u4f5c\u4e3a\u9644\u52a0\u5217\u4fdd\u5b58\u5230 CSV \u4e2d\u3002\n\n## \u9884\u5904\u7406\u548c\u540e\u5904\u7406 (Preprocessing and Postprocessing)\n\n![annotated](/assets/img/dataflow.svg)\n\n\u5982\u60a8\u6240\u89c1\uff0cGradio \u5305\u62ec\u53ef\u4ee5\u5904\u7406\u5404\u79cd\u4e0d\u540c\u6570\u636e\u7c7b\u578b\u7684\u7ec4\u4ef6\uff0c\u4f8b\u5982\u56fe\u50cf\u3001\u97f3\u9891\u548c\u89c6\u9891\u3002\u5927\u591a\u6570\u7ec4\u4ef6\u90fd\u53ef\u4ee5\u7528\u4f5c\u8f93\u5165\u6216\u8f93\u51fa\u3002\n\n\u5f53\u7ec4\u4ef6\u7528\u4f5c\u8f93\u5165\u65f6\uff0cGradio \u81ea\u52a8\u5904\u7406*\u9884\u5904\u7406*\uff0c\u5c06\u6570\u636e\u4ece\u7528\u6237\u6d4f\u89c8\u5668\u53d1\u9001\u7684\u7c7b\u578b\uff08\u4f8b\u5982\u7f51\u7edc\u6444\u50cf\u5934\u5feb\u7167\u7684 base64 \u8868\u793a\uff09\u8f6c\u6362\u4e3a\u60a8\u7684\u51fd\u6570\u53ef\u4ee5\u63a5\u53d7\u7684\u5f62\u5f0f\uff08\u4f8b\u5982 `numpy` \u6570\u7ec4\uff09\u3002",
      "\u540c\u6837\uff0c\u5f53\u7ec4\u4ef6\u7528\u4f5c\u8f93\u51fa\u65f6\uff0cGradio \u81ea\u52a8\u5904\u7406*\u540e\u5904\u7406*\uff0c\u5c06\u6570\u636e\u4ece\u51fd\u6570\u8fd4\u56de\u7684\u5f62\u5f0f\uff08\u4f8b\u5982\u56fe\u50cf\u8def\u5f84\u5217\u8868\uff09\u8f6c\u6362\u4e3a\u53ef\u4ee5\u5728\u7528\u6237\u6d4f\u89c8\u5668\u4e2d\u663e\u793a\u7684\u5f62\u5f0f\uff08\u4f8b\u5982\u4ee5 base64 \u683c\u5f0f\u663e\u793a\u56fe\u50cf\u7684 `Gallery`\uff09\u3002\n\n\u60a8\u53ef\u4ee5\u4f7f\u7528\u6784\u5efa\u56fe\u50cf\u7ec4\u4ef6\u65f6\u7684\u53c2\u6570\u63a7\u5236*\u9884\u5904\u7406*\u3002\u4f8b\u5982\uff0c\u5982\u679c\u60a8\u4f7f\u7528\u4ee5\u4e0b\u53c2\u6570\u5b9e\u4f8b\u5316 `Image` \u7ec4\u4ef6\uff0c\u5b83\u5c06\u5c06\u56fe\u50cf\u8f6c\u6362\u4e3a `PIL` \u7c7b\u578b\uff0c\u5e76\u5c06\u5176\u91cd\u5851\u4e3a`(100, 100)`\uff0c\u800c\u4e0d\u7ba1\u63d0\u4ea4\u65f6\u7684\u539f\u59cb\u5927\u5c0f\u5982\u4f55\uff1a\n\n```py\nimg = gr.Image(shape=(100, 100), type=\"pil\")\n```\n\n\u76f8\u53cd\uff0c\u8fd9\u91cc\u6211\u4eec\u4fdd\u7559\u56fe\u50cf\u7684\u539f\u59cb\u5927\u5c0f\uff0c\u4f46\u5728\u5c06\u5176\u8f6c\u6362\u4e3a numpy \u6570\u7ec4\u4e4b\u524d\u53cd\u8f6c\u989c\u8272\uff1a\n\n```py\nimg = gr.Image(invert_colors=True, type=\"numpy\")\n```\n\n\u540e\u5904\u7406\u8981\u5bb9\u6613\u5f97\u591a\uff01Gradio \u81ea\u52a8\u8bc6\u522b\u8fd4\u56de\u6570\u636e\u7684\u683c\u5f0f\uff08\u4f8b\u5982 `Image` \u662f `numpy` \u6570\u7ec4\u8fd8\u662f `str` \u6587\u4ef6\u8def\u5f84\uff1f\uff09\uff0c\u5e76\u5c06\u5176\u540e\u5904\u7406\u4e3a\u53ef\u4ee5\u7531\u6d4f\u89c8\u5668\u663e\u793a\u7684\u683c\u5f0f\u3002\n\n\u8bf7\u67e5\u770b[\u6587\u6863](https://gradio.app/docs)\uff0c\u4e86\u89e3\u6bcf\u4e2a\u7ec4\u4ef6\u7684\u6240\u6709\u4e0e\u9884\u5904\u7406\u76f8\u5173\u7684\u53c2\u6570\u3002\n\n## \u6837\u5f0f (Styling)\n\nGradio \u4e3b\u9898\u662f\u81ea\u5b9a\u4e49\u5e94\u7528\u7a0b\u5e8f\u5916\u89c2\u548c\u611f\u89c9\u7684\u6700\u7b80\u5355\u65b9\u6cd5\u3002\u60a8\u53ef\u4ee5\u9009\u62e9\u591a\u79cd\u4e3b\u9898\u6216\u521b\u5efa\u81ea\u5df1\u7684\u4e3b\u9898\u3002\u8981\u8fd9\u6837\u505a\uff0c\u8bf7\u5c06 `theme=` \u53c2\u6570\u4f20\u9012\u7ed9 `Interface` \u6784\u9020\u51fd\u6570\u3002\u4f8b\u5982\uff1a",
      "```python\ndemo = gr.Interface(..., theme=gr.themes.Monochrome())\n```\n\nGradio \u5e26\u6709\u4e00\u7ec4\u9884\u5148\u6784\u5efa\u7684\u4e3b\u9898\uff0c\u60a8\u53ef\u4ee5\u4ece `gr.themes.*` \u52a0\u8f7d\u3002\u60a8\u53ef\u4ee5\u6269\u5c55\u8fd9\u4e9b\u4e3b\u9898\u6216\u4ece\u5934\u5f00\u59cb\u521b\u5efa\u81ea\u5df1\u7684\u4e3b\u9898 - \u6709\u5173\u66f4\u591a\u8be6\u7ec6\u4fe1\u606f\uff0c\u8bf7\u53c2\u9605[\u4e3b\u9898\u6307\u5357](https://gradio.app/theming-guide)\u3002\n\n\u8981\u589e\u52a0\u989d\u5916\u7684\u6837\u5f0f\u80fd\u529b\uff0c\u60a8\u53ef\u4ee5 with `css=` \u5173\u952e\u5b57\u5c06\u4efb\u4f55 CSS \u4f20\u9012\u7ed9\u60a8\u7684\u5e94\u7528\u7a0b\u5e8f\u3002\nGradio \u5e94\u7528\u7a0b\u5e8f\u7684\u57fa\u7c7b\u662f `gradio-container`\uff0c\u56e0\u6b64\u4ee5\u4e0b\u662f\u4e00\u4e2a\u66f4\u6539 Gradio \u5e94\u7528\u7a0b\u5e8f\u80cc\u666f\u989c\u8272\u7684\u793a\u4f8b\uff1a\n\n```python\nwith `gr.Interface(css=\".gradio-container {background-color: red}\") as demo:\n    ...\n```\n\n## \u961f\u5217 (Queuing)\n\n\u5982\u679c\u60a8\u7684\u5e94\u7528\u7a0b\u5e8f\u9884\u8ba1\u4f1a\u6709\u5927\u91cf\u6d41\u91cf\uff0c\u8bf7 with `queue()` \u65b9\u6cd5\u6765\u63a7\u5236\u5904\u7406\u901f\u7387\u3002\u8fd9\u5c06\u6392\u961f\u5904\u7406\u8c03\u7528\uff0c\u56e0\u6b64\u4e00\u6b21\u53ea\u5904\u7406\u4e00\u5b9a\u6570\u91cf\u7684\u8bf7\u6c42\u3002\u961f\u5217\u4f7f\u7528 Websockets\uff0c\u8fd8\u53ef\u4ee5\u9632\u6b62\u7f51\u7edc\u8d85\u65f6\uff0c\u56e0\u6b64\u5982\u679c\u60a8\u7684\u51fd\u6570\u7684\u63a8\u7406\u65f6\u95f4\u5f88\u957f\uff08> 1 \u5206\u949f\uff09\uff0c\u5e94\u4f7f\u7528\u961f\u5217\u3002\n\nwith `Interface`\uff1a\n\n```python\ndemo = gr.Interface(...).queue()\ndemo.launch()\n```\n\nwith `Blocks`\uff1a\n\n```python\nwith gr.Blocks() as demo\uff1a\n    #...\ndemo.queue()\ndemo.launch()\n```\n\n\u60a8\u53ef\u4ee5\u901a\u8fc7\u4ee5\u4e0b\u65b9\u5f0f\u63a7\u5236\u4e00\u6b21\u5904\u7406\u7684\u8bf7\u6c42\u6570\u91cf\uff1a\n\n```python\ndemo.queue(concurrency_count=3)\n```",
      "\u67e5\u770b\u6709\u5173\u914d\u7f6e\u5176\u4ed6\u961f\u5217\u53c2\u6570\u7684[\u961f\u5217\u6587\u6863](/docs/#queue)\u3002\n\n\u5728 Blocks \u4e2d\u6307\u5b9a\u4ec5\u5bf9\u67d0\u4e9b\u51fd\u6570\u8fdb\u884c\u6392\u961f\uff1a\n\n```python\nwith gr.Blocks() as demo2\uff1a\n    num1 = gr.Number()\n    num2 = gr.Number()\n    output = gr.Number()\n    gr.Button(\"Add\").click(\n        lambda a, b: a + b, [num1, num2], output)\n    gr.Button(\"Multiply\").click(\n        lambda a, b: a * b, [num1, num2], output, queue=True)\ndemo2.launch()\n```\n\n## \u8fed\u4ee3\u8f93\u51fa (Iterative Outputs)\n\n\u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\uff0c\u60a8\u53ef\u80fd\u9700\u8981\u4f20\u8f93\u4e00\u7cfb\u5217\u8f93\u51fa\u800c\u4e0d\u662f\u4e00\u6b21\u663e\u793a\u5355\u4e2a\u8f93\u51fa\u3002\u4f8b\u5982\uff0c\u60a8\u53ef\u80fd\u6709\u4e00\u4e2a\u56fe\u50cf\u751f\u6210\u6a21\u578b\uff0c\u5e0c\u671b\u663e\u793a\u751f\u6210\u7684\u6bcf\u4e2a\u6b65\u9aa4\u7684\u56fe\u50cf\uff0c\u76f4\u5230\u6700\u7ec8\u56fe\u50cf\u3002\u6216\u8005\u60a8\u53ef\u80fd\u6709\u4e00\u4e2a\u804a\u5929\u673a\u5668\u4eba\uff0c\u5b83\u9010\u5b57\u9010\u53e5\u5730\u6d41\u5f0f\u4f20\u8f93\u54cd\u5e94\uff0c\u800c\u4e0d\u662f\u4e00\u6b21\u8fd4\u56de\u5168\u90e8\u54cd\u5e94\u3002\n\n\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u60a8\u53ef\u4ee5\u5c06**\u751f\u6210\u5668**\u51fd\u6570\u63d0\u4f9b\u7ed9 Gradio\uff0c\u800c\u4e0d\u662f\u5e38\u89c4\u51fd\u6570\u3002\u5728 Python \u4e2d\u521b\u5efa\u751f\u6210\u5668\u975e\u5e38\u7b80\u5355\uff1a\u51fd\u6570\u4e0d\u5e94\u8be5\u6709\u4e00\u4e2a\u5355\u72ec\u7684 `return` \u503c\uff0c\u800c\u662f\u5e94\u8be5 with `yield` \u8fde\u7eed\u8fd4\u56de\u4e00\u7cfb\u5217\u503c\u3002\u901a\u5e38\uff0c`yield` \u8bed\u53e5\u653e\u7f6e\u5728\u67d0\u79cd\u5faa\u73af\u4e2d\u3002\u4e0b\u9762\u662f\u4e00\u4e2a\u7b80\u5355\u793a\u4f8b\uff0c\u751f\u6210\u5668\u53ea\u662f\u7b80\u5355\u8ba1\u6570\u5230\u7ed9\u5b9a\u6570\u5b57\uff1a\n\n```python\ndef my_generator(x):\n    for i in range(x):\n        yield i\n```",
      "\u60a8\u4ee5\u4e0e\u5e38\u89c4\u51fd\u6570\u76f8\u540c\u7684\u65b9\u5f0f\u5c06\u751f\u6210\u5668\u63d0\u4f9b\u7ed9 Gradio\u3002\u4f8b\u5982\uff0c\u8fd9\u662f\u4e00\u4e2a\uff08\u865a\u62df\u7684\uff09\u56fe\u50cf\u751f\u6210\u6a21\u578b\uff0c\u5b83\u5728\u8f93\u51fa\u56fe\u50cf\u4e4b\u524d\u751f\u6210\u6570\u4e2a\u6b65\u9aa4\u7684\u566a\u97f3\uff1a\n\n$code_fake_diffusion\n$demo_fake_diffusion\n\n\u8bf7\u6ce8\u610f\uff0c\u6211\u4eec\u5728\u8fed\u4ee3\u5668\u4e2d\u6dfb\u52a0\u4e86 `time.sleep(1)`\uff0c\u4ee5\u521b\u5efa\u6b65\u9aa4\u4e4b\u95f4\u7684\u4eba\u5de5\u6682\u505c\uff0c\u4ee5\u4fbf\u60a8\u53ef\u4ee5\u89c2\u5bdf\u8fed\u4ee3\u5668\u7684\u6b65\u9aa4\uff08\u5728\u771f\u5b9e\u7684\u56fe\u50cf\u751f\u6210\u6a21\u578b\u4e2d\uff0c\u8fd9\u53ef\u80fd\u662f\u4e0d\u5fc5\u8981\u7684\uff09\u3002\n\n\u5c06\u751f\u6210\u5668\u63d0\u4f9b\u7ed9 Gradio **\u9700\u8981**\u5728\u5e95\u5c42 Interface \u6216 Blocks \u4e2d\u542f\u7528\u961f\u5217\uff08\u8bf7\u53c2\u9605\u4e0a\u9762\u7684\u961f\u5217\u90e8\u5206\uff09\u3002\n\n## \u8fdb\u5ea6\u6761\n\nGradio \u652f\u6301\u521b\u5efa\u81ea\u5b9a\u4e49\u8fdb\u5ea6\u6761\uff0c\u4ee5\u4fbf\u60a8\u53ef\u4ee5\u81ea\u5b9a\u4e49\u548c\u63a7\u5236\u5411\u7528\u6237\u663e\u793a\u7684\u8fdb\u5ea6\u66f4\u65b0\u3002\u8981\u542f\u7528\u6b64\u529f\u80fd\uff0c\u53ea\u9700\u4e3a\u65b9\u6cd5\u6dfb\u52a0\u4e00\u4e2a\u9ed8\u8ba4\u503c\u4e3a `gr.Progress` \u5b9e\u4f8b\u7684\u53c2\u6570\u5373\u53ef\u3002\u7136\u540e\uff0c\u60a8\u53ef\u4ee5\u76f4\u63a5\u8c03\u7528\u6b64\u5b9e\u4f8b\u5e76\u4f20\u5165 0 \u5230 1 \u4e4b\u95f4\u7684\u6d6e\u70b9\u6570\u6765\u66f4\u65b0\u8fdb\u5ea6\u7ea7\u522b\uff0c\u6216\u8005 with `Progress` \u5b9e\u4f8b\u7684 `tqdm()` \u65b9\u6cd5\u6765\u8ddf\u8e2a\u53ef\u8fed\u4ee3\u5bf9\u8c61\u4e0a\u7684\u8fdb\u5ea6\uff0c\u5982\u4e0b\u6240\u793a\u3002\u5fc5\u987b\u542f\u7528\u961f\u5217\u4ee5\u8fdb\u884c\u8fdb\u5ea6\u66f4\u65b0\u3002\n\n$code_progress_simple\n$demo_progress_simple\n\n\u5982\u679c\u60a8 with `tqdm` \u5e93\uff0c\u5e76\u4e14\u5e0c\u671b\u4ece\u51fd\u6570\u5185\u90e8\u7684\u4efb\u4f55 `tqdm.tqdm` \u81ea\u52a8\u62a5\u544a\u8fdb\u5ea6\u66f4\u65b0\uff0c\u8bf7\u5c06\u9ed8\u8ba4\u53c2\u6570\u8bbe\u7f6e\u4e3a `gr.Progress(track_tqdm=True)`\uff01",
      "## \u6279\u5904\u7406\u51fd\u6570 (Batch Functions)\n\nGradio \u652f\u6301\u4f20\u9012*\u6279\u5904\u7406*\u51fd\u6570\u3002\u6279\u5904\u7406\u51fd\u6570\u53ea\u662f\u63a5\u53d7\u8f93\u5165\u5217\u8868\u5e76\u8fd4\u56de\u9884\u6d4b\u5217\u8868\u7684\u51fd\u6570\u3002\n\n\u4f8b\u5982\uff0c\u8fd9\u662f\u4e00\u4e2a\u6279\u5904\u7406\u51fd\u6570\uff0c\u5b83\u63a5\u53d7\u4e24\u4e2a\u8f93\u5165\u5217\u8868\uff08\u4e00\u4e2a\u5355\u8bcd\u5217\u8868\u548c\u4e00\u4e2a\u6574\u6570\u5217\u8868\uff09\uff0c\u5e76\u8fd4\u56de\u4fee\u526a\u8fc7\u7684\u5355\u8bcd\u5217\u8868\u4f5c\u4e3a\u8f93\u51fa\uff1a\n\n```python\nimport time\n\ndef trim_words(words, lens):\n    trimmed_words = []\n    time.sleep(5)\n    for w, l in zip(words, lens):\n        trimmed_words.append(w[:int(l)])\n    return [trimmed_words]\n    for w, l in zip(words, lens):\n```\n\n\u4f7f\u7528\u6279\u5904\u7406\u51fd\u6570\u7684\u4f18\u70b9\u662f\uff0c\u5982\u679c\u542f\u7528\u4e86\u961f\u5217\uff0cGradio \u670d\u52a1\u5668\u53ef\u4ee5\u81ea\u52a8*\u6279\u5904\u7406*\u4f20\u5165\u7684\u8bf7\u6c42\u5e76\u5e76\u884c\u5904\u7406\u5b83\u4eec\uff0c\u4ece\u800c\u53ef\u80fd\u52a0\u5feb\u6f14\u793a\u901f\u5ea6\u3002\u4ee5\u4e0b\u662f Gradio \u4ee3\u7801\u7684\u793a\u4f8b\uff08\u8bf7\u6ce8\u610f `batch=True` \u548c `max_batch_size=16` - \u8fd9\u4e24\u4e2a\u53c2\u6570\u90fd\u53ef\u4ee5\u4f20\u9012\u7ed9\u4e8b\u4ef6\u89e6\u53d1\u5668\u6216 `Interface` \u7c7b\uff09\n\nwith `Interface`\uff1a\n\n```python\ndemo = gr.Interface(trim_words, [\"textbox\", \"number\"], [\"output\"],\n                    batch=True, max_batch_size=16)\ndemo.queue()\ndemo.launch()\n```\n\nwith `Blocks`\uff1a\n\n```python\nimport gradio as gr\n\nwith gr.Blocks() as demo:\n    with gr.Row():\n        word = gr.Textbox(label=\"word\")\n        leng = gr.Number(label=\"leng\")\n        output = gr.Textbox(label=\"Output\")\n    with gr.Row():\n        run = gr.Button()\n\n    event = run.click(trim_words, [word, leng], output, batch=True, max_batch_size=16)",
      "demo.queue()\ndemo.launch()\n```\n\n\u5728\u4e0a\u9762\u7684\u793a\u4f8b\u4e2d\uff0c\u53ef\u4ee5\u5e76\u884c\u5904\u7406 16 \u4e2a\u8bf7\u6c42\uff08\u603b\u63a8\u7406\u65f6\u95f4\u4e3a 5 \u79d2\uff09\uff0c\u800c\u4e0d\u662f\u5206\u522b\u5904\u7406\u6bcf\u4e2a\u8bf7\u6c42\uff08\u603b\u63a8\u7406\u65f6\u95f4\u4e3a 80 \u79d2\uff09\u3002\u8bb8\u591a Hugging Face \u7684 `transformers` \u548c `diffusers` \u6a21\u578b\u5728 Gradio \u7684\u6279\u5904\u7406\u6a21\u5f0f\u4e0b\u81ea\u7136\u5de5\u4f5c\uff1a\u8fd9\u662f[\u4f7f\u7528\u6279\u5904\u7406\u751f\u6210\u56fe\u50cf\u7684\u793a\u4f8b\u6f14\u793a](https://github.com/gradio-app/gradio/blob/main/demo/diffusers_with_batching/run.py)\n\n\u6ce8\u610f\uff1a\u4f7f\u7528 Gradio \u7684\u6279\u5904\u7406\u51fd\u6570 **requires** \u5728\u5e95\u5c42 Interface \u6216 Blocks \u4e2d\u542f\u7528\u961f\u5217\uff08\u8bf7\u53c2\u9605\u4e0a\u9762\u7684\u961f\u5217\u90e8\u5206\uff09\u3002\n\n## Gradio \u7b14\u8bb0\u672c (Colab Notebooks)",
      "Gradio \u53ef\u4ee5\u5728\u4efb\u4f55\u8fd0\u884c Python \u7684\u5730\u65b9\u8fd0\u884c\uff0c\u5305\u62ec\u672c\u5730 Jupyter \u7b14\u8bb0\u672c\u548c\u534f\u4f5c\u7b14\u8bb0\u672c\uff0c\u5982[Google Colab](https://colab.research.google.com/)\u3002\u5bf9\u4e8e\u672c\u5730 Jupyter \u7b14\u8bb0\u672c\u548c Google Colab \u7b14\u8bb0\u672c\uff0cGradio \u5728\u672c\u5730\u670d\u52a1\u5668\u4e0a\u8fd0\u884c\uff0c\u60a8\u53ef\u4ee5\u5728\u6d4f\u89c8\u5668\u4e2d\u4e0e\u4e4b\u4ea4\u4e92\u3002\uff08\u6ce8\u610f\uff1a\u5bf9\u4e8e Google Colab\uff0c\u8fd9\u662f\u901a\u8fc7[\u670d\u52a1\u5de5\u4f5c\u5668\u96a7\u9053](https://github.com/tensorflow/tensorboard/blob/master/docs/design/colab_integration.md)\u5b9e\u73b0\u7684\uff0c\u60a8\u7684\u6d4f\u89c8\u5668\u9700\u8981\u542f\u7528 cookies\u3002\uff09\u5bf9\u4e8e\u5176\u4ed6\u8fdc\u7a0b\u7b14\u8bb0\u672c\uff0cGradio \u4e5f\u5c06\u5728\u670d\u52a1\u5668\u4e0a\u8fd0\u884c\uff0c\u4f46\u60a8\u9700\u8981\u4f7f\u7528[SSH \u96a7\u9053](https://coderwall.com/p/ohk6cg/remote-access-to-ipython-notebooks-via-ssh)\u5728\u672c\u5730\u6d4f\u89c8\u5668\u4e2d\u67e5\u770b\u5e94\u7528\u7a0b\u5e8f\u3002\u901a\u5e38\uff0c\u66f4\u7b80\u5355\u7684\u9009\u62e9\u662f\u4f7f\u7528 Gradio \u5185\u7f6e\u7684\u516c\u5171\u94fe\u63a5\uff0c[\u5728\u4e0b\u4e00\u7bc7\u6307\u5357\u4e2d\u8ba8\u8bba](/sharing-your-app/#sharing-demos)\u3002",
      "!--Copyright 2023 The HuggingFace Team. All rights reserved.\n\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\nthe License. You may obtain a copy of the License at\n\nhttp://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software distributed under the License is distributed on\nan \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n\n\u26a0\ufe0f Note that this file is in Markdown but contain specific syntax for our doc-builder (similar to MDX) that may not be\nrendered properly in your Markdown viewer.\n\n-->\n\n# Training on TPU with TensorFlow\n\n<Tip>\n\nIf you don't need long explanations and just want TPU code samples to get started with, check out [our TPU example notebook!](https://colab.research.google.com/github/huggingface/notebooks/blob/main/examples/tpu_training-tf.ipynb)\n\n</Tip>\n\n### What is a TPU?\n\nA TPU is a **Tensor Processing Unit.** They are hardware designed by Google, which are used to greatly speed up the tensor computations within neural networks, much like GPUs. They can be used for both network training and inference. They are generally accessed through Google\u2019s cloud services, but small TPUs can also be accessed directly for free through Google Colab and Kaggle Kernels.",
      "Because [all TensorFlow models in \ud83e\udd17 Transformers are Keras models](https://huggingface.co/blog/tensorflow-philosophy), most of the methods in this document are generally applicable to TPU training for any Keras model! However, there are a few points that are specific to the HuggingFace ecosystem (hug-o-system?) of Transformers and Datasets, and we\u2019ll make sure to flag them up when we get to them.\n\n### What kinds of TPU are available?\n\nNew users are often very confused by the range of TPUs, and the different ways to access them. The first key distinction to understand is the difference between **TPU Nodes** and **TPU VMs.**\n\nWhen you use a **TPU Node**, you are effectively indirectly accessing a remote TPU. You will need a separate VM, which will initialize your network and data pipeline and then forward them to the remote node. When you use a TPU on Google Colab, you are accessing it in the **TPU Node** style.\n\nUsing TPU Nodes can have some quite unexpected behaviour for people who aren\u2019t used to them! In particular, because the TPU is located on a physically different system to the machine you\u2019re running your Python code on, your data cannot be local to your machine - any data pipeline that loads from your machine\u2019s internal storage will totally fail! Instead, data must be stored in Google Cloud Storage where your data pipeline can still access it, even when the pipeline is running on the remote TPU node.\n\n<Tip>\n\nIf you can fit all your data in memory as `np.ndarray` or `tf.Tensor`, then you can `fit()` on that data even when using Colab or a TPU Node, without needing to upload it to Google Cloud Storage.\n\n</Tip>\n\n<Tip>",
      "**\ud83e\udd17Specific Hugging Face Tip\ud83e\udd17:** The methods `Dataset.to_tf_dataset()` and its higher-level wrapper `model.prepare_tf_dataset()` , which you will see throughout our TF code examples, will both fail on a TPU Node. The reason for this is that even though they create a `tf.data.Dataset` it is not a \u201cpure\u201d `tf.data` pipeline and uses `tf.numpy_function` or `Dataset.from_generator()` to stream data from the underlying HuggingFace `Dataset`. This HuggingFace `Dataset` is backed by data that is on a local disc and which the remote TPU Node will not be able to read.\n\n</Tip>\n\nThe second way to access a TPU is via a **TPU VM.** When using a TPU VM, you connect directly to the machine that the TPU is attached to, much like training on a GPU VM. TPU VMs are generally easier to work with, particularly when it comes to your data pipeline. All of the above warnings do not apply to TPU VMs!\n\nThis is an opinionated document, so here\u2019s our opinion: **Avoid using TPU Node if possible.** It is more confusing and more difficult to debug than TPU VMs. It is also likely to be unsupported in future - Google\u2019s latest TPU, TPUv4, can only be accessed as a TPU VM, which suggests that TPU Nodes are increasingly going to become a \u201clegacy\u201d access method. However, we understand that the only free TPU access is on Colab and Kaggle Kernels, which uses TPU Node - so we\u2019ll try to explain how to handle it if you have to! Check the [TPU example notebook](https://colab.research.google.com/github/huggingface/notebooks/blob/main/examples/tpu_training-tf.ipynb) for code samples that explain this in more detail.",
      "### What sizes of TPU are available?\n\nA single TPU (a v2-8/v3-8/v4-8) runs 8 replicas. TPUs exist in **pods** that can run hundreds or thousands of replicas simultaneously. When you use more than a single TPU but less than a whole pod (for example, a v3-32), your TPU fleet is referred to as a **pod slice.**\n\nWhen you access a free TPU via Colab, you generally get a single v2-8 TPU.\n\n### I keep hearing about this XLA thing. What\u2019s XLA, and how does it relate to TPUs?\n\nXLA is an optimizing compiler, used by both TensorFlow and JAX. In JAX it is the only compiler, whereas in TensorFlow it is optional (but mandatory on TPU!). The easiest way to enable it when training a Keras model is to pass the argument `jit_compile=True` to `model.compile()`. If you don\u2019t get any errors and performance is good, that\u2019s a great sign that you\u2019re ready to move to TPU!\n\nDebugging on TPU is generally a bit harder than on CPU/GPU, so we recommend getting your code running on CPU/GPU with XLA first before trying it on TPU. You don\u2019t have to train for long, of course - just for a few steps to make sure that your model and data pipeline are working like you expect them to.\n\n<Tip>\n\nXLA compiled code is usually faster - so even if you\u2019re not planning to run on TPU, adding `jit_compile=True` can improve your performance. Be sure to note the caveats below about XLA compatibility, though!\n\n</Tip>\n\n<Tip warning={true}>",
      "**Tip born of painful experience:** Although using `jit_compile=True` is a good way to get a speed boost and test if your CPU/GPU code is XLA-compatible, it can actually cause a lot of problems if you leave it in when actually training on TPU. XLA compilation will happen implicitly on TPU, so remember to remove that line before actually running your code on a TPU!\n\n</Tip>\n\n### How do I make my model XLA compatible?\n\nIn many cases, your code is probably XLA-compatible already! However, there are a few things that work in normal TensorFlow that don\u2019t work in XLA. We\u2019ve distilled them into three core rules below:\n\n<Tip>\n\n**\ud83e\udd17Specific HuggingFace Tip\ud83e\udd17:** We\u2019ve put a lot of effort into rewriting our TensorFlow models and loss functions to be XLA-compatible. Our models and loss functions generally obey rule #1 and #2 by default, so you can skip over them if you\u2019re using `transformers` models. Don\u2019t forget about these rules when writing your own models and loss functions, though!\n\n</Tip>\n\n#### XLA Rule #1: Your code cannot have \u201cdata-dependent conditionals\u201d\n\nWhat that means is that any `if` statement cannot depend on values inside a `tf.Tensor`. For example, this code block cannot be compiled with XLA!\n\n```python\nif tf.reduce_sum(tensor) > 10:\n    tensor = tensor / 2.0\n```\n\nThis might seem very restrictive at first, but most neural net code doesn\u2019t need to do this. You can often get around this restriction by using `tf.cond` (see the documentation [here](https://www.tensorflow.org/api_docs/python/tf/cond)) or by removing the conditional and finding a clever math trick with indicator variables instead, like so:",
      "```python\nsum_over_10 = tf.cast(tf.reduce_sum(tensor) > 10, tf.float32)\ntensor = tensor / (1.0 + sum_over_10)\n```\n\nThis code has exactly the same effect as the code above, but by avoiding a conditional, we ensure it will compile with XLA without problems!\n\n#### XLA Rule #2: Your code cannot have \u201cdata-dependent shapes\u201d\n\nWhat this means is that the shape of all of the `tf.Tensor` objects in your code cannot depend on their values. For example, the function `tf.unique` cannot be compiled with XLA, because it returns a `tensor` containing one instance of each unique value in the input. The shape of this output will obviously be different depending on how repetitive the input `Tensor` was, and so XLA refuses to handle it!\n\nIn general, most neural network code obeys rule #2 by default. However, there are a few common cases where it becomes a problem. One very common one is when you use **label masking**, setting your labels to a negative value to indicate that those positions should be ignored when computing the loss. If you look at NumPy or PyTorch loss functions that support label masking, you will often see code like this that uses [boolean indexing](https://numpy.org/doc/stable/user/basics.indexing.html#boolean-array-indexing):\n\n```python\nlabel_mask = labels >= 0\nmasked_outputs = outputs[label_mask]\nmasked_labels = labels[label_mask]\nloss = compute_loss(masked_outputs, masked_labels)\nmean_loss = torch.mean(loss)\n```",
      "This code is totally fine in NumPy or PyTorch, but it breaks in XLA! Why? Because the shape of `masked_outputs` and `masked_labels` depends on how many positions are masked - that makes it a **data-dependent shape.** However, just like for rule #1, we can often rewrite this code to yield exactly the same output without any data-dependent shapes.\n\n```python\nlabel_mask = tf.cast(labels >= 0, tf.float32)\nloss = compute_loss(outputs, labels)\nloss = loss * label_mask  # Set negative label positions to 0\nmean_loss = tf.reduce_sum(loss) / tf.reduce_sum(label_mask)\n```\n\nHere, we avoid data-dependent shapes by computing the loss for every position, but zeroing out the masked positions in both the numerator and denominator when we calculate the mean, which yields exactly the same result as the first block while maintaining XLA compatibility. Note that we use the same trick as in rule #1 - converting a `tf.bool` to `tf.float32` and using it as an indicator variable. This is a really useful trick, so remember it if you need to convert your own code to XLA!\n\n#### XLA Rule #3: XLA will need to recompile your model for every different input shape it sees\n\nThis is the big one. What this means is that if your input shapes are very variable, XLA will have to recompile your model over and over, which will create huge performance problems. This commonly arises in NLP models, where input texts have variable lengths after tokenization. In other modalities, static shapes are more common and this rule is much less of a problem.",
      "How can you get around rule #3? The key is **padding** - if you pad all your inputs to the same length, and then use an `attention_mask`, you can get the same results as you\u2019d get from variable shapes, but without any XLA issues. However, excessive padding can cause severe slowdown too - if you pad all your samples to the maximum length in the whole dataset, you might end up with batches consisting endless padding tokens, which will waste a lot of compute and memory!\n\nThere isn\u2019t a perfect solution to this problem. However, you can try some tricks. One very useful trick is to **pad batches of samples up to a multiple of a number like 32 or 64 tokens.** This often only increases the number of tokens by a small amount, but it hugely reduces the number of unique input shapes, because every input shape now has to be a multiple of 32 or 64. Fewer unique input shapes means fewer XLA compilations!\n\n<Tip>\n\n**\ud83e\udd17Specific HuggingFace Tip\ud83e\udd17:** Our tokenizers and data collators have methods that can help you here. You can use `padding=\"max_length\"` or `padding=\"longest\"` when calling tokenizers to get them to output padded data. Our tokenizers and data collators also have a `pad_to_multiple_of` argument that you can use to reduce the number of unique input shapes you see!\n\n</Tip>\n\n### How do I actually train my model on TPU?",
      "Once your training is XLA-compatible and (if you\u2019re using TPU Node / Colab) your dataset has been prepared appropriately, running on TPU is surprisingly easy! All you really need to change in your code is to add a few lines to initialize your TPU, and to ensure that your model and dataset are created inside a `TPUStrategy` scope. Take a look at [our TPU example notebook](https://colab.research.google.com/github/huggingface/notebooks/blob/main/examples/tpu_training-tf.ipynb) to see this in action!\n\n### Summary\n\nThere was a lot in here, so let\u2019s summarize with a quick checklist you can follow when you want to get your model ready for TPU training:",
      "- Make sure your code follows the three rules of XLA\n- Compile your model with `jit_compile=True` on CPU/GPU and confirm that you can train it with XLA\n- Either load your dataset into memory or use a TPU-compatible dataset loading approach (see [notebook](https://colab.research.google.com/github/huggingface/notebooks/blob/main/examples/tpu_training-tf.ipynb))\n- Migrate your code either to Colab (with accelerator set to \u201cTPU\u201d) or a TPU VM on Google Cloud\n- Add TPU initializer code (see [notebook](https://colab.research.google.com/github/huggingface/notebooks/blob/main/examples/tpu_training-tf.ipynb))\n- Create your `TPUStrategy` and make sure dataset loading and model creation are inside the `strategy.scope()` (see [notebook](https://colab.research.google.com/github/huggingface/notebooks/blob/main/examples/tpu_training-tf.ipynb))\n- Don\u2019t forget to take `jit_compile=True` out again when you move to TPU!\n- \ud83d\ude4f\ud83d\ude4f\ud83d\ude4f\ud83e\udd7a\ud83e\udd7a\ud83e\udd7a\n- Call model.fit()\n- You did it!",
      "Gradio Demo: blocks_random_slider\n\n\n```\n!pip install -q gradio \n```\n\n\n```\n\nimport gradio as gr\n\n\ndef func(slider_1, slider_2):\n    return slider_1 * 5 + slider_2\n\n\nwith gr.Blocks() as demo:\n    slider = gr.Slider(minimum=-10.2, maximum=15, label=\"Random Slider (Static)\", randomize=True)\n    slider_1 = gr.Slider(minimum=100, maximum=200, label=\"Random Slider (Input 1)\", randomize=True)\n    slider_2 = gr.Slider(minimum=10, maximum=23.2, label=\"Random Slider (Input 2)\", randomize=True)\n    slider_3 = gr.Slider(value=3, label=\"Non random slider\")\n    btn = gr.Button(\"Run\")\n    btn.click(func, inputs=[slider_1, slider_2], outputs=gr.Number())\n\nif __name__ == \"__main__\":\n    demo.launch()\n\n```",
      "Git over SSH\n\nYou can access and write data in repositories on huggingface.co using SSH (Secure Shell Protocol). When you connect via SSH, you authenticate using a private key file on your local machine.\n\nSome actions, such as pushing changes, or cloning private repositories, will require you to upload your SSH public key to your account on huggingface.co.\n\nYou can use a pre-existing SSH key, or generate a new one specifically for huggingface.co.\n\n## Checking for existing SSH keys\n\nIf you have an existing SSH key, you can use that key to authenticate Git operations over SSH.\n\nSSH keys are usually located under `~/.ssh` on Mac & Linux, and under `C:\\\\Users\\\\<username>\\\\.ssh` on Windows. List files under that directory and look for files of the form:\n\n- id_rsa.pub\n- id_ecdsa.pub\n- id_ed25519.pub\n\nThose files contain your SSH public key.\n\nIf you don't have such file under `~/.ssh`, you will have to [generate a new key](#generating-a-new-ssh-keypair). Otherwise, you can [add your existing SSH public key(s) to your huggingface.co account](#add-a-ssh-key-to-your-account).\n\n## Generating a new SSH keypair\n\nIf you don't have any SSH keys on your machine, you can use `ssh-keygen` to generate a new SSH key pair (public + private keys):\n\n```\n$ ssh-keygen -t ed25519 -C \"your.email@example.co\"\n```\n\nWe recommend entering a passphrase when you are prompted to. A passphrase is an extra layer of security: it is a password that will be prompted whenever you use your SSH key.\n\nOnce your new key is generated, add it to your SSH agent with `ssh-add`:\n\n```\n$ ssh-add ~/.ssh/id_ed25519\n```",
      "If you chose a different location than the default to store your SSH key, you would have to replace `~/.ssh/id_ed25519` with the file location you used.\n\n## Add a SSH key to your account\n\nTo access private repositories with SSH, or to push changes via SSH, you will need to add your SSH public key to your huggingface.co account. You can manage your SSH keys [in your user settings](https://huggingface.co/settings/keys).\n\nTo add a SSH key to your account, click on the \"Add SSH key\" button.\n\nThen, enter a name for this key (for example, \"Personal computer\"), and copy and paste the content of your **public** SSH key in the area below. The public key is located in the `~/.ssh/id_XXXX.pub` file you found or generated in the previous steps.\n\nClick on \"Add key\", and voil\u00e0! You have added a SSH key to your huggingface.co account.\n\n\n## Testing your SSH authentication\n\nOnce you have added your SSH key to your huggingface.co account, you can test that the connection works as expected.\n\nIn a terminal, run:\n```\n$ ssh -T git@hf.co\n```\n\nIf you see a message with your username, congrats! Everything went well, you are ready to use git over SSH.\n\nOtherwise, if the message states something like the following, make sure your SSH key is actually used by your SSH agent.\n```\nHi anonymous, welcome to Hugging Face.\n```",
      "!---\nCopyright 2022 The HuggingFace Team. All rights reserved.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n-->\n\n# Token classification with LayoutLMv3 (PyTorch version)\n\nThis directory contains a script, `run_funsd_cord.py`, that can be used to fine-tune (or evaluate) LayoutLMv3 on form understanding datasets, such as [FUNSD](https://guillaumejaume.github.io/FUNSD/) and [CORD](https://github.com/clovaai/cord).\n\nThe script `run_funsd_cord.py` leverages the \ud83e\udd17 Datasets library and the Trainer API. You can easily customize it to your needs.\n\n## Fine-tuning on FUNSD\n\nFine-tuning LayoutLMv3 for token classification on [FUNSD](https://guillaumejaume.github.io/FUNSD/) can be done as follows:",
      "```bash\npython run_funsd_cord.py \\\n  --model_name_or_path microsoft/layoutlmv3-base \\\n  --dataset_name funsd \\\n  --output_dir layoutlmv3-test \\\n  --do_train \\\n  --do_eval \\\n  --max_steps 1000 \\\n  --evaluation_strategy steps \\\n  --eval_steps 100 \\\n  --learning_rate 1e-5 \\\n  --load_best_model_at_end \\\n  --metric_for_best_model \"eval_f1\" \\\n  --push_to_hub \\\n  --push_to_hub\u00b0model_id layoutlmv3-finetuned-funsd\n```\n\n\ud83d\udc40 The resulting model can be found here: https://huggingface.co/nielsr/layoutlmv3-finetuned-funsd. By specifying the `push_to_hub` flag, the model gets uploaded automatically to the hub (regularly), together with a model card, which includes metrics such as precision, recall and F1. Note that you can easily update the model card, as it's just a README file of the respective repo on the hub.\n\nThere's also the \"Training metrics\" [tab](https://huggingface.co/nielsr/layoutlmv3-finetuned-funsd/tensorboard), which shows Tensorboard logs over the course of training. Pretty neat, huh?\n\n## Fine-tuning on CORD\n\nFine-tuning LayoutLMv3 for token classification on [CORD](https://github.com/clovaai/cord) can be done as follows:",
      "```bash\npython run_funsd_cord.py \\\n  --model_name_or_path microsoft/layoutlmv3-base \\\n  --dataset_name cord \\\n  --output_dir layoutlmv3-test \\\n  --do_train \\\n  --do_eval \\\n  --max_steps 1000 \\\n  --evaluation_strategy steps \\\n  --eval_steps 100 \\\n  --learning_rate 5e-5 \\\n  --load_best_model_at_end \\\n  --metric_for_best_model \"eval_f1\" \\\n  --push_to_hub \\\n  --push_to_hub\u00b0model_id layoutlmv3-finetuned-cord\n```\n\n\ud83d\udc40 The resulting model can be found here: https://huggingface.co/nielsr/layoutlmv3-finetuned-cord. Note that a model card gets generated automatically in case you specify the `push_to_hub` flag.",
      "State in Blocks\n\nWe covered [State in Interfaces](https://gradio.app/interface-state), this guide takes a look at state in Blocks, which works mostly the same.\n\n## Global State\n\nGlobal state in Blocks works the same as in Interface. Any variable created outside a function call is a reference shared between all users.\n\n## Session State\n\nGradio supports session **state**, where data persists across multiple submits within a page session, in Blocks apps as well. To reiterate, session data is _not_ shared between different users of your model. To store data in a session state, you need to do three things:\n\n1. Create a `gr.State()` object. If there is a default value to this stateful object, pass that into the constructor.\n2. In the event listener, put the `State` object as an input and output.\n3. In the event listener function, add the variable to the input parameters and the return value.\n\nLet's take a look at a game of hangman.\n\n$code_hangman\n$demo_hangman\n\nLet's see how we do each of the 3 steps listed above in this game:\n\n1. We store the used letters in `used_letters_var`. In the constructor of `State`, we set the initial value of this to `[]`, an empty list.\n2. In `btn.click()`, we have a reference to `used_letters_var` in both the inputs and outputs.\n3. In `guess_letter`, we pass the value of this `State` to `used_letters`, and then return an updated value of this `State` in the return statement.\n\nWith more complex apps, you will likely have many State variables storing session state in a single Blocks app.\n\nLearn more about `State` in the [docs](https://gradio.app/docs#state).",
      "\u5982\u4f55\u4f7f\u7528\u5730\u56fe\u7ec4\u4ef6\u7ed8\u5236\u56fe\u8868\n\nRelated spaces:\nTags: PLOTS, MAPS\n\n## \u7b80\u4ecb\n\n\u672c\u6307\u5357\u4ecb\u7ecd\u5982\u4f55\u4f7f\u7528 Gradio \u7684 `Plot` \u7ec4\u4ef6\u5728\u5730\u56fe\u4e0a\u7ed8\u5236\u5730\u7406\u6570\u636e\u3002Gradio \u7684 `Plot` \u7ec4\u4ef6\u53ef\u4ee5\u4e0e Matplotlib\u3001Bokeh \u548c Plotly \u4e00\u8d77\u4f7f\u7528\u3002\u5728\u672c\u6307\u5357\u4e2d\uff0c\u6211\u4eec\u5c06\u4f7f\u7528 Plotly \u8fdb\u884c\u64cd\u4f5c\u3002Plotly \u53ef\u4ee5\u8ba9\u5f00\u53d1\u4eba\u5458\u8f7b\u677e\u521b\u5efa\u5404\u79cd\u5730\u56fe\u6765\u5c55\u793a\u4ed6\u4eec\u7684\u5730\u7406\u6570\u636e\u3002\u70b9\u51fb[\u8fd9\u91cc](https://plotly.com/python/maps/)\u67e5\u770b\u4e00\u4e9b\u793a\u4f8b\u3002\n\n## \u6982\u8ff0\n\n\u6211\u4eec\u5c06\u4f7f\u7528\u7ebd\u7ea6\u5e02\u7684 Airbnb \u6570\u636e\u96c6\uff0c\u8be5\u6570\u636e\u96c6\u6258\u7ba1\u5728 kaggle \u4e0a\uff0c\u70b9\u51fb[\u8fd9\u91cc](https://www.kaggle.com/datasets/dgomonov/new-york-city-airbnb-open-data)\u3002\u6211\u5df2\u7ecf\u5c06\u5176\u4e0a\u4f20\u5230 Hugging Face Hub \u4f5c\u4e3a\u4e00\u4e2a\u6570\u636e\u96c6\uff0c\u65b9\u4fbf\u4f7f\u7528\u548c\u4e0b\u8f7d\uff0c\u70b9\u51fb[\u8fd9\u91cc](https://huggingface.co/datasets/gradio/NYC-Airbnb-Open-Data)\u3002\u4f7f\u7528\u8fd9\u4e9b\u6570\u636e\uff0c\u6211\u4eec\u5c06\u5728\u5730\u56fe\u4e0a\u7ed8\u5236 Airbnb \u7684\u4f4d\u7f6e\uff0c\u5e76\u5141\u8bb8\u57fa\u4e8e\u4ef7\u683c\u548c\u4f4d\u7f6e\u8fdb\u884c\u7b5b\u9009\u3002\u4e0b\u9762\u662f\u6211\u4eec\u5c06\u8981\u6784\u5efa\u7684\u6f14\u793a\u3002 \u26a1\ufe0f\n\n$demo_map_airbnb\n\n## \u6b65\u9aa4 1-\u52a0\u8f7d CSV \u6570\u636e \ud83d\udcbe\n\n\u8ba9\u6211\u4eec\u9996\u5148\u4ece Hugging Face Hub \u52a0\u8f7d\u7ebd\u7ea6\u5e02\u7684 Airbnb \u6570\u636e\u3002\n\n```python\nfrom datasets import load_dataset\n\ndataset = load_dataset(\"gradio/NYC-Airbnb-Open-Data\", split=\"train\")\ndf = dataset.to_pandas()",
      "def filter_map(min_price, max_price, boroughs):\n    new_df = df[(df['neighbourhood_group'].isin(boroughs)) &\n            (df['price'] > min_price) & (df['price'] < max_price)]\n    names = new_df[\"name\"].tolist()\n    prices = new_df[\"price\"].tolist()\n    text_list = [(names[i], prices[i]) for i in range(0, len(names))]\n```\n\n\u5728\u4e0a\u9762\u7684\u4ee3\u7801\u4e2d\uff0c\u6211\u4eec\u5148\u5c06 CSV \u6570\u636e\u52a0\u8f7d\u5230\u4e00\u4e2a pandas dataframe \u4e2d\u3002\u8ba9\u6211\u4eec\u9996\u5148\u5b9a\u4e49\u4e00\u4e2a\u51fd\u6570\uff0c\u8fd9\u5c06\u4f5c\u4e3a gradio \u5e94\u7528\u7a0b\u5e8f\u7684\u9884\u6d4b\u51fd\u6570\u3002\u8be5\u51fd\u6570\u5c06\u63a5\u53d7\u6700\u4f4e\u4ef7\u683c\u3001\u6700\u9ad8\u4ef7\u683c\u8303\u56f4\u548c\u7b5b\u9009\u7ed3\u679c\u5730\u533a\u7684\u5217\u8868\u4f5c\u4e3a\u53c2\u6570\u3002\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u4f20\u5165\u7684\u503c (`min_price`\u3001`max_price` \u548c\u5730\u533a\u5217\u8868) \u6765\u7b5b\u9009\u6570\u636e\u6846\u5e76\u521b\u5efa `new_df`\u3002\u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u5c06\u521b\u5efa\u5305\u542b\u6bcf\u4e2a Airbnb \u7684\u540d\u79f0\u548c\u4ef7\u683c\u7684 `text_list`\uff0c\u4ee5\u4fbf\u5728\u5730\u56fe\u4e0a\u4f7f\u7528\u4f5c\u4e3a\u6807\u7b7e\u3002\n\n## \u6b65\u9aa4 2-\u5730\u56fe\u56fe\u8868 \ud83c\udf10\n\nPlotly \u4f7f\u5f97\u5904\u7406\u5730\u56fe\u53d8\u5f97\u5f88\u5bb9\u6613\u3002\u8ba9\u6211\u4eec\u770b\u4e00\u4e0b\u4e0b\u9762\u7684\u4ee3\u7801\uff0c\u4e86\u89e3\u5982\u4f55\u521b\u5efa\u5730\u56fe\u56fe\u8868\u3002\n\n```python\nimport plotly.graph_objects as go",
      "fig = go.Figure(go.Scattermapbox(\n            customdata=text_list,\n            lat=new_df['latitude'].tolist(),\n            lon=new_df['longitude'].tolist(),\n            mode='markers',\n            marker=go.scattermapbox.Marker(\n                size=6\n            ),\n            hoverinfo=\"text\",\n            hovertemplate='<b>Name</b>: %{customdata[0]}<br><b>Price</b>: $%{customdata[1]}'\n        ))\n\nfig.update_layout(\n    mapbox_style=\"open-street-map\",\n    hovermode='closest',\n    mapbox=dict(\n        bearing=0,\n        center=go.layout.mapbox.Center(\n            lat=40.67,\n            lon=-73.90\n        ),\n        pitch=0,\n        zoom=9\n    ),\n)\n```\n\n\u4e0a\u9762\u7684\u4ee3\u7801\u4e2d\uff0c\u6211\u4eec\u901a\u8fc7\u4f20\u5165\u7ecf\u7eac\u5ea6\u5217\u8868\u6765\u521b\u5efa\u4e00\u4e2a\u6563\u70b9\u56fe\u3002\u6211\u4eec\u8fd8\u4f20\u5165\u4e86\u540d\u79f0\u548c\u4ef7\u683c\u7684\u81ea\u5b9a\u4e49\u6570\u636e\uff0c\u4ee5\u4fbf\u5728\u9f20\u6807\u60ac\u505c\u5728\u6bcf\u4e2a\u6807\u8bb0\u4e0a\u65f6\u663e\u793a\u989d\u5916\u7684\u4fe1\u606f\u3002\u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u4f7f\u7528 `update_layout` \u6765\u6307\u5b9a\u5176\u4ed6\u5730\u56fe\u8bbe\u7f6e\uff0c\u4f8b\u5982\u7f29\u653e\u548c\u5c45\u4e2d\u3002\n\n\u6709\u5173\u4f7f\u7528 Mapbox \u548c Plotly \u521b\u5efa\u6563\u70b9\u56fe\u7684\u66f4\u591a\u4fe1\u606f\uff0c\u8bf7\u70b9\u51fb[\u8fd9\u91cc](https://plotly.com/python/scattermapbox/)\u3002\n\n## \u6b65\u9aa4 3-Gradio \u5e94\u7528\u7a0b\u5e8f \u26a1\ufe0f\n\n\u6211\u4eec\u5c06\u4f7f\u7528\u4e24\u4e2a `gr.Number` \u7ec4\u4ef6\u548c\u4e00\u4e2a `gr.CheckboxGroup` \u7ec4\u4ef6\uff0c\u5141\u8bb8\u7528\u6237\u6307\u5b9a\u4ef7\u683c\u8303\u56f4\u548c\u5730\u533a\u4f4d\u7f6e\u3002\u7136\u540e\uff0c\u6211\u4eec\u5c06\u4f7f\u7528 `gr.Plot` \u7ec4\u4ef6\u4f5c\u4e3a\u6211\u4eec\u4e4b\u524d\u521b\u5efa\u7684 Plotly + Mapbox \u5730\u56fe\u7684\u8f93\u51fa\u3002",
      "```python\nwith gr.Blocks() as demo:\n    with gr.Column():\n        with gr.Row():\n            min_price = gr.Number(value=250, label=\"Minimum Price\")\n            max_price = gr.Number(value=1000, label=\"Maximum Price\")\n        boroughs = gr.CheckboxGroup(choices=[\"Queens\", \"Brooklyn\", \"Manhattan\", \"Bronx\", \"Staten Island\"], value=[\"Queens\", \"Brooklyn\"], label=\"Select Boroughs:\")\n        btn = gr.Button(value=\"Update Filter\")\n        map = gr.Plot()\n    demo.load(filter_map, [min_price, max_price, boroughs], map)\n    btn.click(filter_map, [min_price, max_price, boroughs], map)\n```\n\n\u6211\u4eec\u4f7f\u7528 `gr.Column` \u548c `gr.Row` \u5e03\u5c40\u8fd9\u4e9b\u7ec4\u4ef6\uff0c\u5e76\u4e3a\u6f14\u793a\u52a0\u8f7d\u65f6\u548c\u70b9\u51fb \" \u66f4\u65b0\u7b5b\u9009 \" \u6309\u94ae\u65f6\u6dfb\u52a0\u4e86\u4e8b\u4ef6\u89e6\u53d1\u5668\uff0c\u4ee5\u89e6\u53d1\u5730\u56fe\u66f4\u65b0\u65b0\u7684\u7b5b\u9009\u6761\u4ef6\u3002\n\n\u4ee5\u4e0b\u662f\u5b8c\u6574\u6f14\u793a\u4ee3\u7801\uff1a\n\n$code_map_airbnb\n\n## \u6b65\u9aa4 4-\u90e8\u7f72 Deployment \ud83e\udd17\n\n\u5982\u679c\u4f60\u8fd0\u884c\u4e0a\u9762\u7684\u4ee3\u7801\uff0c\u4f60\u7684\u5e94\u7528\u7a0b\u5e8f\u5c06\u5728\u672c\u5730\u8fd0\u884c\u3002\n\u5982\u679c\u8981\u83b7\u53d6\u4e34\u65f6\u5171\u4eab\u94fe\u63a5\uff0c\u53ef\u4ee5\u5c06 `share=True` \u53c2\u6570\u4f20\u9012\u7ed9 `launch`\u3002\n\n\u4f46\u5982\u679c\u4f60\u60f3\u8981\u4e00\u4e2a\u6c38\u4e45\u7684\u90e8\u7f72\u89e3\u51b3\u65b9\u6848\u5462\uff1f\n\u8ba9\u6211\u4eec\u5c06\u6211\u4eec\u7684 Gradio \u5e94\u7528\u7a0b\u5e8f\u90e8\u7f72\u5230\u514d\u8d39\u7684 HuggingFace Spaces \u5e73\u53f0\u3002\n\n\u5982\u679c\u4f60\u4ee5\u524d\u6ca1\u6709\u4f7f\u7528\u8fc7 Spaces\uff0c\u8bf7\u6309\u7167\u4e4b\u524d\u7684\u6307\u5357[\u8fd9\u91cc](/using_hugging_face_integrations)\u3002\n\n## \u7ed3\u8bba \ud83c\udf89",
      "\u4f60\u5df2\u7ecf\u5b8c\u6210\u4e86\uff01\u8fd9\u662f\u6784\u5efa\u5730\u56fe\u6f14\u793a\u6240\u9700\u7684\u6240\u6709\u4ee3\u7801\u3002\n\n\u94fe\u63a5\u5230\u6f14\u793a\uff1a[\u5730\u56fe\u6f14\u793a](https://huggingface.co/spaces/gradio/map_airbnb)\u548c[\u5b8c\u6574\u4ee3\u7801](https://huggingface.co/spaces/gradio/map_airbnb/blob/main/run.py)\uff08\u5728 Hugging Face Spaces\uff09",
      "SE-ResNet\n\n**SE ResNet** is a variant of a [ResNet](https://www.paperswithcode.com/method/resnet) that employs [squeeze-and-excitation blocks](https://paperswithcode.com/method/squeeze-and-excitation-block) to enable the network to perform dynamic channel-wise feature recalibration.\n\n## How do I use this model on an image?\n\nTo load a pretrained model:\n\n```py\n>>> import timm\n>>> model = timm.create_model('seresnet152d', pretrained=True)\n>>> model.eval()\n```\n\nTo load and preprocess the image:\n\n```py \n>>> import urllib\n>>> from PIL import Image\n>>> from timm.data import resolve_data_config\n>>> from timm.data.transforms_factory import create_transform\n\n>>> config = resolve_data_config({}, model=model)\n>>> transform = create_transform(**config)\n\n>>> url, filename = (\"https://github.com/pytorch/hub/raw/master/images/dog.jpg\", \"dog.jpg\")\n>>> urllib.request.urlretrieve(url, filename)\n>>> img = Image.open(filename).convert('RGB')\n>>> tensor = transform(img).unsqueeze(0) # transform and add batch dimension\n```\n\nTo get the model predictions:\n\n```py\n>>> import torch\n>>> with torch.no_grad():\n...     out = model(tensor)\n>>> probabilities = torch.nn.functional.softmax(out[0], dim=0)\n>>> print(probabilities.shape)\n>>> # prints: torch.Size([1000])\n```\n\nTo get the top-5 predictions class names:\n\n```py\n>>> # Get imagenet class mappings\n>>> url, filename = (\"https://raw.githubusercontent.com/pytorch/hub/master/imagenet_classes.txt\", \"imagenet_classes.txt\")\n>>> urllib.request.urlretrieve(url, filename) \n>>> with open(\"imagenet_classes.txt\", \"r\") as f:\n...     categories = [s.strip() for s in f.readlines()]",
      ">>> # Print top categories per image\n>>> top5_prob, top5_catid = torch.topk(probabilities, 5)\n>>> for i in range(top5_prob.size(0)):\n...     print(categories[top5_catid[i]], top5_prob[i].item())\n>>> # prints class names and probabilities like:\n>>> # [('Samoyed', 0.6425196528434753), ('Pomeranian', 0.04062102362513542), ('keeshond', 0.03186424449086189), ('white wolf', 0.01739676296710968), ('Eskimo dog', 0.011717947199940681)]\n```\n\nReplace the model name with the variant you want to use, e.g. `seresnet152d`. You can find the IDs in the model summaries at the top of this page.\n\nTo extract image features with this model, follow the [timm feature extraction examples](../feature_extraction), just change the name of the model you want to use.\n\n## How do I finetune this model?\n\nYou can finetune any of the pre-trained models just by changing the classifier (the last layer).\n\n```py\n>>> model = timm.create_model('seresnet152d', pretrained=True, num_classes=NUM_FINETUNE_CLASSES)\n```\nTo finetune on your own dataset, you have to write a training loop or adapt [timm's training\nscript](https://github.com/rwightman/pytorch-image-models/blob/master/train.py) to use your dataset.\n\n## How do I train this model?\n\nYou can follow the [timm recipe scripts](../scripts) for training a new model afresh.\n\n## Citation",
      "```BibTeX\n@misc{hu2019squeezeandexcitation,\n      title={Squeeze-and-Excitation Networks}, \n      author={Jie Hu and Li Shen and Samuel Albanie and Gang Sun and Enhua Wu},\n      year={2019},\n      eprint={1709.01507},\n      archivePrefix={arXiv},\n      primaryClass={cs.CV}\n}\n```",
      "<!--\nType: model-index\nCollections:\n- Name: SE ResNet\n  Paper:\n    Title: Squeeze-and-Excitation Networks\n    URL: https://paperswithcode.com/paper/squeeze-and-excitation-networks\nModels:\n- Name: seresnet152d\n  In Collection: SE ResNet\n  Metadata:\n    FLOPs: 20161904304\n    Parameters: 66840000\n    File Size: 268144497\n    Architecture:\n    - 1x1 Convolution\n    - Batch Normalization\n    - Bottleneck Residual Block\n    - Convolution\n    - Global Average Pooling\n    - Max Pooling\n    - ReLU\n    - Residual Block\n    - Residual Connection\n    - Softmax\n    - Squeeze-and-Excitation Block\n    Tasks:\n    - Image Classification\n    Training Techniques:\n    - Label Smoothing\n    - SGD with Momentum\n    - Weight Decay\n    Training Data:\n    - ImageNet\n    Training Resources: 8x NVIDIA Titan X GPUs\n    ID: seresnet152d\n    LR: 0.6\n    Epochs: 100\n    Layers: 152\n    Dropout: 0.2\n    Crop Pct: '0.94'\n    Momentum: 0.9\n    Batch Size: 1024\n    Image Size: '256'\n    Interpolation: bicubic\n  Code: https://github.com/rwightman/pytorch-image-models/blob/a7f95818e44b281137503bcf4b3e3e94d8ffa52f/timm/models/resnet.py#L1206",
      "Weights: https://github.com/rwightman/pytorch-image-models/releases/download/v0.1-weights/seresnet152d_ra2-04464dd2.pth\n  Results:\n  - Task: Image Classification\n    Dataset: ImageNet\n    Metrics:\n      Top 1 Accuracy: 83.74%\n      Top 5 Accuracy: 96.77%\n- Name: seresnet50\n  In Collection: SE ResNet\n  Metadata:\n    FLOPs: 5285062320\n    Parameters: 28090000\n    File Size: 112621903\n    Architecture:\n    - 1x1 Convolution\n    - Batch Normalization\n    - Bottleneck Residual Block\n    - Convolution\n    - Global Average Pooling\n    - Max Pooling\n    - ReLU\n    - Residual Block\n    - Residual Connection\n    - Softmax\n    - Squeeze-and-Excitation Block\n    Tasks:\n    - Image Classification\n    Training Techniques:\n    - Label Smoothing\n    - SGD with Momentum\n    - Weight Decay\n    Training Data:\n    - ImageNet\n    Training Resources: 8x NVIDIA Titan X GPUs\n    ID: seresnet50\n    LR: 0.6\n    Epochs: 100\n    Layers: 50\n    Dropout: 0.2\n    Crop Pct: '0.875'\n    Momentum: 0.9\n    Batch Size: 1024\n    Image Size: '224'\n    Interpolation: bicubic\n  Code: https://github.com/rwightman/pytorch-image-models/blob/a7f95818e44b281137503bcf4b3e3e94d8ffa52f/timm/models/resnet.py#L1180",
      "Weights: https://github.com/rwightman/pytorch-image-models/releases/download/v0.1-weights/seresnet50_ra_224-8efdb4bb.pth\n  Results:\n  - Task: Image Classification\n    Dataset: ImageNet\n    Metrics:\n      Top 1 Accuracy: 80.26%\n      Top 5 Accuracy: 95.07%\n-->"
    ]
  },
  {
    "chunk_size": 400,
    "chunk_overlap": 40,
    "limit": 10,
    "texts": [
      "Create an Endpoint\n\nAfter your first login, you will be directed to the [Endpoint creation page](https://ui.endpoints.huggingface.co/new). As an example, this guide will go through the steps to deploy [distilbert-base-uncased-finetuned-sst-2-english](https://huggingface.co/distilbert-base-uncased-finetuned-sst-2-english) for text classification. \n\n## 1. Enter the Hugging Face Repository ID and your desired endpoint name:\n\n<img src=\"https://raw.githubusercontent.com/huggingface/hf-endpoints-documentation/main/assets/1_repository.png\" alt=\"select repository\" />\n\n## 2. Select your Cloud Provider and region. Initially, only AWS will be available as a Cloud Provider with the `us-east-1` and `eu-west-1` regions. We will add Azure soon, and if you need to test Endpoints with other Cloud Providers or regions, please let us know.\n\n<img src=\"https://raw.githubusercontent.com/huggingface/hf-endpoints-documentation/main/assets/1_region.png\" alt=\"select region\" />\n\n## 3. Define the [Security Level](security) for the Endpoint:\n\n<img src=\"https://raw.githubusercontent.com/huggingface/hf-endpoints-documentation/main/assets/1_security.png\" alt=\"define security\" />\n\n## 4. Create your Endpoint by clicking **Create Endpoint**. By default, your Endpoint is created with a medium CPU (2 x 4GB vCPUs with Intel Xeon Ice Lake) The cost estimate assumes the Endpoint will be up for an entire month, and does not take autoscaling into account.\n\n<img src=\"https://raw.githubusercontent.com/huggingface/hf-endpoints-documentation/main/assets/1_create_cost.png\" alt=\"create endpoint\" />",
      "<img src=\"https://raw.githubusercontent.com/huggingface/hf-endpoints-documentation/main/assets/1_create_cost.png\" alt=\"create endpoint\" />\n\n## 5. Wait for the Endpoint to build, initialize and run which can take between 1 to 5 minutes.\n\n<img src=\"https://raw.githubusercontent.com/huggingface/hf-endpoints-documentation/main/assets/overview.png\" alt=\"overview\" />\n\n## 6. Test your Endpoint in the overview with the Inference widget \ud83c\udfc1 \ud83c\udf89!\n\n<img src=\"https://raw.githubusercontent.com/huggingface/hf-endpoints-documentation/main/assets/1_inference.png\" alt=\"run inference\" />",
      "Choosing a metric for your task\n\n**So you've trained your model and want to see how well it\u2019s doing on a dataset of your choice. Where do you start?**\n\nThere is no \u201cone size fits all\u201d approach to choosing an evaluation metric, but some good guidelines to keep in mind are:\n\n## Categories of metrics\n\nThere are 3 high-level categories of metrics:\n\n1. *Generic metrics*, which can be applied to a variety of situations and datasets, such as precision and accuracy.\n2. *Task-specific metrics*, which are limited to a given task, such as Machine Translation (often evaluated using metrics [BLEU](https://huggingface.co/metrics/bleu) or [ROUGE](https://huggingface.co/metrics/rouge)) or Named Entity Recognition (often evaluated with [seqeval](https://huggingface.co/metrics/seqeval)).\n3. *Dataset-specific metrics*, which aim to measure model performance on specific benchmarks: for instance, the [GLUE benchmark](https://huggingface.co/datasets/glue) has a dedicated [evaluation metric](https://huggingface.co/metrics/glue).\n\nLet's look at each of these three cases:\n\n### Generic metrics\n\nMany of the metrics used in the Machine Learning community are quite generic and can be applied in a variety of tasks and datasets.\n\nThis is the case for metrics like [accuracy](https://huggingface.co/metrics/accuracy) and [precision](https://huggingface.co/metrics/precision), which can be used for evaluating labeled (supervised) datasets, as well as [perplexity](https://huggingface.co/metrics/perplexity), which can be used for evaluating different kinds of (unsupervised) generative tasks.",
      "To see the input structure of a given metric, you can look at its metric card. For example, in the case of [precision](https://huggingface.co/metrics/precision), the format is:\n```\n>>> precision_metric = evaluate.load(\"precision\")\n>>> results = precision_metric.compute(references=[0, 1], predictions=[0, 1])\n>>> print(results)\n{'precision': 1.0}\n```\n\n### Task-specific metrics\n\nPopular ML tasks like Machine Translation and Named Entity Recognition have specific metrics that can be used to compare models. For example, a series of different metrics have been proposed for text generation, ranging from [BLEU](https://huggingface.co/metrics/bleu) and its derivatives such as [GoogleBLEU](https://huggingface.co/metrics/google_bleu) and [GLEU](https://huggingface.co/metrics/gleu), but also [ROUGE](https://huggingface.co/metrics/rouge), [MAUVE](https://huggingface.co/metrics/mauve), etc.\n\nYou can find the right metric for your task by:",
      "You can find the right metric for your task by:\n\n- **Looking at the [Task pages](https://huggingface.co/tasks)** to see what metrics can be used for evaluating models for a given task.\n- **Checking out leaderboards** on sites like [Papers With Code](https://paperswithcode.com/) (you can search by task and by dataset).\n-  **Reading the metric cards** for the relevant metrics and see which ones are a good fit for your use case. For example, see the [BLEU metric card](https://github.com/huggingface/evaluate/tree/main/metrics/bleu) or [SQuaD metric card](https://github.com/huggingface/evaluate/tree/main/metrics/squad).\n- **Looking at papers and blog posts** published on the topic and see what metrics they report. This can change over time, so try to pick papers from the last couple of years!\n\n### Dataset-specific metrics\n\nSome datasets have specific metrics associated with them -- this is especially in the case of popular benchmarks like [GLUE](https://huggingface.co/metrics/glue) and [SQuAD](https://huggingface.co/metrics/squad).\n\n<Tip warning={true}>\n\ud83d\udca1\nGLUE is actually a collection of different subsets on different tasks, so first you need to choose the one that corresponds to the NLI task, such as mnli, which is described as \u201ccrowdsourced collection of sentence pairs with textual entailment annotations\u201d\n</Tip>",
      "If you are evaluating your model on a benchmark dataset like the ones mentioned above, you can use its dedicated evaluation metric. Make sure you respect the format that they require. For example, to evaluate your model on the [SQuAD](https://huggingface.co/datasets/squad) dataset, you need to feed the `question` and `context` into your model and return the `prediction_text`, which should be compared with the `references` (based on matching the `id` of the question) :\n\n```\n>>> from evaluate import load\n>>> squad_metric = load(\"squad\")\n>>> predictions = [{'prediction_text': '1976', 'id': '56e10a3be3433e1400422b22'}]\n>>> references = [{'answers': {'answer_start': [97], 'text': ['1976']}, 'id': '56e10a3be3433e1400422b22'}]\n>>> results = squad_metric.compute(predictions=predictions, references=references)\n>>> results\n{'exact_match': 100.0, 'f1': 100.0}\n```\n\nYou can find examples of dataset structures by consulting the \"Dataset Preview\" function or the dataset card for a given dataset, and you can see how to use its dedicated evaluation function based on the metric card.",
      "\u4e3b\u8981\u7279\u70b9\n\n\u8ba9\u6211\u4eec\u6765\u4ecb\u7ecd\u4e00\u4e0b Gradio \u6700\u53d7\u6b22\u8fce\u7684\u4e00\u4e9b\u529f\u80fd\uff01\u8fd9\u91cc\u662f Gradio \u7684\u4e3b\u8981\u7279\u70b9\uff1a\n\n1. [\u6dfb\u52a0\u793a\u4f8b\u8f93\u5165](#example-inputs)\n2. [\u4f20\u9012\u81ea\u5b9a\u4e49\u9519\u8bef\u6d88\u606f](#errors)\n3. [\u6dfb\u52a0\u63cf\u8ff0\u5185\u5bb9](#descriptive-content)\n4. [\u8bbe\u7f6e\u65d7\u6807](#flagging)\n5. [\u9884\u5904\u7406\u548c\u540e\u5904\u7406](#preprocessing-and-postprocessing)\n6. [\u6837\u5f0f\u5316\u6f14\u793a](#styling)\n7. [\u6392\u961f\u7528\u6237](#queuing)\n8. [\u8fed\u4ee3\u8f93\u51fa](#iterative-outputs)\n9. [\u8fdb\u5ea6\u6761](#progress-bars)\n10. [\u6279\u5904\u7406\u51fd\u6570](#batch-functions)\n11. [\u5728\u534f\u4f5c\u7b14\u8bb0\u672c\u4e0a\u8fd0\u884c](#colab-notebooks)\n\n## \u793a\u4f8b\u8f93\u5165\n\n\u60a8\u53ef\u4ee5\u63d0\u4f9b\u7528\u6237\u53ef\u4ee5\u8f7b\u677e\u52a0\u8f7d\u5230 \"Interface\" \u4e2d\u7684\u793a\u4f8b\u6570\u636e\u3002\u8fd9\u5bf9\u4e8e\u6f14\u793a\u6a21\u578b\u671f\u671b\u7684\u8f93\u5165\u7c7b\u578b\u4ee5\u53ca\u6f14\u793a\u6570\u636e\u96c6\u548c\u6a21\u578b\u4e00\u8d77\u63a2\u7d22\u7684\u65b9\u5f0f\u975e\u5e38\u6709\u5e2e\u52a9\u3002\u8981\u52a0\u8f7d\u793a\u4f8b\u6570\u636e\uff0c\u60a8\u53ef\u4ee5\u5c06\u5d4c\u5957\u5217\u8868\u63d0\u4f9b\u7ed9 Interface \u6784\u9020\u51fd\u6570\u7684 `examples=` \u5173\u952e\u5b57\u53c2\u6570\u3002\u5916\u90e8\u5217\u8868\u4e2d\u7684\u6bcf\u4e2a\u5b50\u5217\u8868\u8868\u793a\u4e00\u4e2a\u6570\u636e\u6837\u672c\uff0c\u5b50\u5217\u8868\u4e2d\u7684\u6bcf\u4e2a\u5143\u7d20\u8868\u793a\u6bcf\u4e2a\u8f93\u5165\u7ec4\u4ef6\u7684\u8f93\u5165\u3002\u6709\u5173\u6bcf\u4e2a\u7ec4\u4ef6\u7684\u793a\u4f8b\u6570\u636e\u683c\u5f0f\u5728[Docs](https://gradio.app/docs#components)\u4e2d\u6709\u8bf4\u660e\u3002\n\n$code_calculator\n$demo_calculator",
      "$code_calculator\n$demo_calculator\n\n\u60a8\u53ef\u4ee5\u5c06\u5927\u578b\u6570\u636e\u96c6\u52a0\u8f7d\u5230\u793a\u4f8b\u4e2d\uff0c\u901a\u8fc7 Gradio \u6d4f\u89c8\u548c\u4e0e\u6570\u636e\u96c6\u8fdb\u884c\u4ea4\u4e92\u3002\u793a\u4f8b\u5c06\u81ea\u52a8\u5206\u9875\uff08\u53ef\u4ee5\u901a\u8fc7 Interface \u7684 `examples_per_page` \u53c2\u6570\u8fdb\u884c\u914d\u7f6e\uff09\u3002\n\n\u7ee7\u7eed\u4e86\u89e3\u793a\u4f8b\uff0c\u8bf7\u53c2\u9605[\u66f4\u591a\u793a\u4f8b](https://gradio.app/more-on-examples)\u6307\u5357\u3002\n\n## \u9519\u8bef\n\n\u60a8\u5e0c\u671b\u5411\u7528\u6237\u4f20\u9012\u81ea\u5b9a\u4e49\u9519\u8bef\u6d88\u606f\u3002\u4e3a\u6b64\uff0cwith `gr.Error(\"custom message\")` \u6765\u663e\u793a\u9519\u8bef\u6d88\u606f\u3002\u5982\u679c\u5728\u4e0a\u9762\u7684\u8ba1\u7b97\u5668\u793a\u4f8b\u4e2d\u5c1d\u8bd5\u9664\u4ee5\u96f6\uff0c\u5c06\u663e\u793a\u81ea\u5b9a\u4e49\u9519\u8bef\u6d88\u606f\u7684\u5f39\u51fa\u6a21\u6001\u7a97\u53e3\u3002\u4e86\u89e3\u6709\u5173\u9519\u8bef\u7684\u66f4\u591a\u4fe1\u606f\uff0c\u8bf7\u53c2\u9605[\u6587\u6863](https://gradio.app/docs#error)\u3002\n\n## \u63cf\u8ff0\u6027\u5185\u5bb9\n\n\u5728\u524d\u9762\u7684\u793a\u4f8b\u4e2d\uff0c\u60a8\u53ef\u80fd\u5df2\u7ecf\u6ce8\u610f\u5230 Interface \u6784\u9020\u51fd\u6570\u4e2d\u7684 `title=` \u548c `description=` \u5173\u952e\u5b57\u53c2\u6570\uff0c\u5e2e\u52a9\u7528\u6237\u4e86\u89e3\u60a8\u7684\u5e94\u7528\u7a0b\u5e8f\u3002\n\nInterface \u6784\u9020\u51fd\u6570\u4e2d\u6709\u4e09\u4e2a\u53c2\u6570\u7528\u4e8e\u6307\u5b9a\u6b64\u5185\u5bb9\u5e94\u653e\u7f6e\u5728\u54ea\u91cc\uff1a\n\n- `title`\uff1a\u63a5\u53d7\u6587\u672c\uff0c\u5e76\u53ef\u4ee5\u5c06\u5176\u663e\u793a\u5728\u754c\u9762\u7684\u9876\u90e8\uff0c\u4e5f\u5c06\u6210\u4e3a\u9875\u9762\u6807\u9898\u3002\n- `description`\uff1a\u63a5\u53d7\u6587\u672c\u3001Markdown \u6216 HTML\uff0c\u5e76\u5c06\u5176\u653e\u7f6e\u5728\u6807\u9898\u6b63\u4e0b\u65b9\u3002\n- `article`\uff1a\u4e5f\u63a5\u53d7\u6587\u672c\u3001Markdown \u6216 HTML\uff0c\u5e76\u5c06\u5176\u653e\u7f6e\u5728\u754c\u9762\u4e0b\u65b9\u3002\n\n![annotated](/assets/guides/annotated.png)",
      "![annotated](/assets/guides/annotated.png)\n\n\u5982\u679c\u60a8\u4f7f\u7528\u7684\u662f `Blocks` API\uff0c\u5219\u53ef\u4ee5 with `gr.Markdown(...)` \u6216 `gr.HTML(...)` \u7ec4\u4ef6\u5728\u4efb\u4f55\u4f4d\u7f6e\u63d2\u5165\u6587\u672c\u3001Markdown \u6216 HTML\uff0c\u5176\u4e2d\u63cf\u8ff0\u6027\u5185\u5bb9\u4f4d\u4e8e `Component` \u6784\u9020\u51fd\u6570\u5185\u90e8\u3002\n\n\u53e6\u4e00\u4e2a\u6709\u7528\u7684\u5173\u952e\u5b57\u53c2\u6570\u662f `label=`\uff0c\u5b83\u5b58\u5728\u4e8e\u6bcf\u4e2a `Component` \u4e2d\u3002\u8fd9\u4fee\u6539\u4e86\u6bcf\u4e2a `Component` \u9876\u90e8\u7684\u6807\u7b7e\u6587\u672c\u3002\u8fd8\u53ef\u4ee5\u4e3a\u8bf8\u5982 `Textbox` \u6216 `Radio` \u4e4b\u7c7b\u7684\u8868\u5355\u5143\u7d20\u6dfb\u52a0 `info=` \u5173\u952e\u5b57\u53c2\u6570\uff0c\u4ee5\u63d0\u4f9b\u6709\u5173\u5176\u7528\u6cd5\u7684\u8fdb\u4e00\u6b65\u4fe1\u606f\u3002\n\n```python\ngr.Number(label='\u5e74\u9f84', info='\u4ee5\u5e74\u4e3a\u5355\u4f4d\uff0c\u5fc5\u987b\u5927\u4e8e0')\n```\n\n## \u65d7\u6807\n\n\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\"Interface\" \u5c06\u6709\u4e00\u4e2a \"Flag\" \u6309\u94ae\u3002\u5f53\u7528\u6237\u6d4b\u8bd5\u60a8\u7684 `Interface` \u65f6\uff0c\u5982\u679c\u770b\u5230\u6709\u8da3\u7684\u8f93\u51fa\uff0c\u4f8b\u5982\u9519\u8bef\u6216\u610f\u5916\u7684\u6a21\u578b\u884c\u4e3a\uff0c\u4ed6\u4eec\u53ef\u4ee5\u5c06\u8f93\u5165\u6807\u8bb0\u4e3a\u60a8\u8fdb\u884c\u67e5\u770b\u3002\u5728\u7531 `Interface` \u6784\u9020\u51fd\u6570\u7684 `flagging_dir=` \u53c2\u6570\u63d0\u4f9b\u7684\u76ee\u5f55\u4e2d\uff0c\u5c06\u8bb0\u5f55\u6807\u8bb0\u7684\u8f93\u5165\u5230\u4e00\u4e2a CSV \u6587\u4ef6\u4e2d\u3002\u5982\u679c\u754c\u9762\u6d89\u53ca\u6587\u4ef6\u6570\u636e\uff0c\u4f8b\u5982\u56fe\u50cf\u548c\u97f3\u9891\u7ec4\u4ef6\uff0c\u5c06\u521b\u5efa\u6587\u4ef6\u5939\u6765\u5b58\u50a8\u8fd9\u4e9b\u6807\u8bb0\u7684\u6570\u636e\u3002\n\n\u4f8b\u5982\uff0c\u5bf9\u4e8e\u4e0a\u9762\u663e\u793a\u7684\u8ba1\u7b97\u5668\u754c\u9762\uff0c\u6211\u4eec\u5c06\u5728\u4e0b\u9762\u7684\u65d7\u6807\u76ee\u5f55\u4e2d\u5b58\u50a8\u6807\u8bb0\u7684\u6570\u636e\uff1a\n\n```directory\n+-- calculator.py\n+-- flagged/\n|   +-- logs.csv\n```\n\n_flagged/logs.csv_",
      "```directory\n+-- calculator.py\n+-- flagged/\n|   +-- logs.csv\n```\n\n_flagged/logs.csv_\n\n```csv\nnum1,operation,num2,Output\n5,add,7,12\n6,subtract,1.5,4.5\n```\n\n\u4e0e\u65e9\u671f\u663e\u793a\u7684\u51b7\u8272\u754c\u9762\u76f8\u5bf9\u5e94\uff0c\u6211\u4eec\u5c06\u5728\u4e0b\u9762\u7684\u65d7\u6807\u76ee\u5f55\u4e2d\u5b58\u50a8\u6807\u8bb0\u7684\u6570\u636e\uff1a\n\n```directory\n+-- sepia.py\n+-- flagged/\n|   +-- logs.csv\n|   +-- im/\n|   |   +-- 0.png\n|   |   +-- 1.png\n|   +-- Output/\n|   |   +-- 0.png\n|   |   +-- 1.png\n```\n\n_flagged/logs.csv_\n\n```csv\nim,Output\nim/0.png,Output/0.png\nim/1.png,Output/1.png\n```\n\n\u5982\u679c\u60a8\u5e0c\u671b\u7528\u6237\u63d0\u4f9b\u65d7\u6807\u539f\u56e0\uff0c\u53ef\u4ee5\u5c06\u5b57\u7b26\u4e32\u5217\u8868\u4f20\u9012\u7ed9 Interface \u7684 `flagging_options` \u53c2\u6570\u3002\u7528\u6237\u5728\u8fdb\u884c\u65d7\u6807\u65f6\u5fc5\u987b\u9009\u62e9\u5176\u4e2d\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u8fd9\u5c06\u4f5c\u4e3a\u9644\u52a0\u5217\u4fdd\u5b58\u5230 CSV \u4e2d\u3002\n\n## \u9884\u5904\u7406\u548c\u540e\u5904\u7406 (Preprocessing and Postprocessing)\n\n![annotated](/assets/img/dataflow.svg)\n\n\u5982\u60a8\u6240\u89c1\uff0cGradio \u5305\u62ec\u53ef\u4ee5\u5904\u7406\u5404\u79cd\u4e0d\u540c\u6570\u636e\u7c7b\u578b\u7684\u7ec4\u4ef6\uff0c\u4f8b\u5982\u56fe\u50cf\u3001\u97f3\u9891\u548c\u89c6\u9891\u3002\u5927\u591a\u6570\u7ec4\u4ef6\u90fd\u53ef\u4ee5\u7528\u4f5c\u8f93\u5165\u6216\u8f93\u51fa\u3002",
      "\u5f53\u7ec4\u4ef6\u7528\u4f5c\u8f93\u5165\u65f6\uff0cGradio \u81ea\u52a8\u5904\u7406*\u9884\u5904\u7406*\uff0c\u5c06\u6570\u636e\u4ece\u7528\u6237\u6d4f\u89c8\u5668\u53d1\u9001\u7684\u7c7b\u578b\uff08\u4f8b\u5982\u7f51\u7edc\u6444\u50cf\u5934\u5feb\u7167\u7684 base64 \u8868\u793a\uff09\u8f6c\u6362\u4e3a\u60a8\u7684\u51fd\u6570\u53ef\u4ee5\u63a5\u53d7\u7684\u5f62\u5f0f\uff08\u4f8b\u5982 `numpy` \u6570\u7ec4\uff09\u3002\n\n\u540c\u6837\uff0c\u5f53\u7ec4\u4ef6\u7528\u4f5c\u8f93\u51fa\u65f6\uff0cGradio \u81ea\u52a8\u5904\u7406*\u540e\u5904\u7406*\uff0c\u5c06\u6570\u636e\u4ece\u51fd\u6570\u8fd4\u56de\u7684\u5f62\u5f0f\uff08\u4f8b\u5982\u56fe\u50cf\u8def\u5f84\u5217\u8868\uff09\u8f6c\u6362\u4e3a\u53ef\u4ee5\u5728\u7528\u6237\u6d4f\u89c8\u5668\u4e2d\u663e\u793a\u7684\u5f62\u5f0f\uff08\u4f8b\u5982\u4ee5 base64 \u683c\u5f0f\u663e\u793a\u56fe\u50cf\u7684 `Gallery`\uff09\u3002\n\n\u60a8\u53ef\u4ee5\u4f7f\u7528\u6784\u5efa\u56fe\u50cf\u7ec4\u4ef6\u65f6\u7684\u53c2\u6570\u63a7\u5236*\u9884\u5904\u7406*\u3002\u4f8b\u5982\uff0c\u5982\u679c\u60a8\u4f7f\u7528\u4ee5\u4e0b\u53c2\u6570\u5b9e\u4f8b\u5316 `Image` \u7ec4\u4ef6\uff0c\u5b83\u5c06\u5c06\u56fe\u50cf\u8f6c\u6362\u4e3a `PIL` \u7c7b\u578b\uff0c\u5e76\u5c06\u5176\u91cd\u5851\u4e3a`(100, 100)`\uff0c\u800c\u4e0d\u7ba1\u63d0\u4ea4\u65f6\u7684\u539f\u59cb\u5927\u5c0f\u5982\u4f55\uff1a\n\n```py\nimg = gr.Image(shape=(100, 100), type=\"pil\")\n```\n\n\u76f8\u53cd\uff0c\u8fd9\u91cc\u6211\u4eec\u4fdd\u7559\u56fe\u50cf\u7684\u539f\u59cb\u5927\u5c0f\uff0c\u4f46\u5728\u5c06\u5176\u8f6c\u6362\u4e3a numpy \u6570\u7ec4\u4e4b\u524d\u53cd\u8f6c\u989c\u8272\uff1a\n\n```py\nimg = gr.Image(invert_colors=True, type=\"numpy\")\n```\n\n\u540e\u5904\u7406\u8981\u5bb9\u6613\u5f97\u591a\uff01Gradio \u81ea\u52a8\u8bc6\u522b\u8fd4\u56de\u6570\u636e\u7684\u683c\u5f0f\uff08\u4f8b\u5982 `Image` \u662f `numpy` \u6570\u7ec4\u8fd8\u662f `str` \u6587\u4ef6\u8def\u5f84\uff1f\uff09\uff0c\u5e76\u5c06\u5176\u540e\u5904\u7406\u4e3a\u53ef\u4ee5\u7531\u6d4f\u89c8\u5668\u663e\u793a\u7684\u683c\u5f0f\u3002\n\n\u8bf7\u67e5\u770b[\u6587\u6863](https://gradio.app/docs)\uff0c\u4e86\u89e3\u6bcf\u4e2a\u7ec4\u4ef6\u7684\u6240\u6709\u4e0e\u9884\u5904\u7406\u76f8\u5173\u7684\u53c2\u6570\u3002\n\n## \u6837\u5f0f (Styling)",
      "\u8bf7\u67e5\u770b[\u6587\u6863](https://gradio.app/docs)\uff0c\u4e86\u89e3\u6bcf\u4e2a\u7ec4\u4ef6\u7684\u6240\u6709\u4e0e\u9884\u5904\u7406\u76f8\u5173\u7684\u53c2\u6570\u3002\n\n## \u6837\u5f0f (Styling)\n\nGradio \u4e3b\u9898\u662f\u81ea\u5b9a\u4e49\u5e94\u7528\u7a0b\u5e8f\u5916\u89c2\u548c\u611f\u89c9\u7684\u6700\u7b80\u5355\u65b9\u6cd5\u3002\u60a8\u53ef\u4ee5\u9009\u62e9\u591a\u79cd\u4e3b\u9898\u6216\u521b\u5efa\u81ea\u5df1\u7684\u4e3b\u9898\u3002\u8981\u8fd9\u6837\u505a\uff0c\u8bf7\u5c06 `theme=` \u53c2\u6570\u4f20\u9012\u7ed9 `Interface` \u6784\u9020\u51fd\u6570\u3002\u4f8b\u5982\uff1a\n\n```python\ndemo = gr.Interface(..., theme=gr.themes.Monochrome())\n```\n\nGradio \u5e26\u6709\u4e00\u7ec4\u9884\u5148\u6784\u5efa\u7684\u4e3b\u9898\uff0c\u60a8\u53ef\u4ee5\u4ece `gr.themes.*` \u52a0\u8f7d\u3002\u60a8\u53ef\u4ee5\u6269\u5c55\u8fd9\u4e9b\u4e3b\u9898\u6216\u4ece\u5934\u5f00\u59cb\u521b\u5efa\u81ea\u5df1\u7684\u4e3b\u9898 - \u6709\u5173\u66f4\u591a\u8be6\u7ec6\u4fe1\u606f\uff0c\u8bf7\u53c2\u9605[\u4e3b\u9898\u6307\u5357](https://gradio.app/theming-guide)\u3002\n\n\u8981\u589e\u52a0\u989d\u5916\u7684\u6837\u5f0f\u80fd\u529b\uff0c\u60a8\u53ef\u4ee5 with `css=` \u5173\u952e\u5b57\u5c06\u4efb\u4f55 CSS \u4f20\u9012\u7ed9\u60a8\u7684\u5e94\u7528\u7a0b\u5e8f\u3002\nGradio \u5e94\u7528\u7a0b\u5e8f\u7684\u57fa\u7c7b\u662f `gradio-container`\uff0c\u56e0\u6b64\u4ee5\u4e0b\u662f\u4e00\u4e2a\u66f4\u6539 Gradio \u5e94\u7528\u7a0b\u5e8f\u80cc\u666f\u989c\u8272\u7684\u793a\u4f8b\uff1a\n\n```python\nwith `gr.Interface(css=\".gradio-container {background-color: red}\") as demo:\n    ...\n```\n\n## \u961f\u5217 (Queuing)",
      "```python\nwith `gr.Interface(css=\".gradio-container {background-color: red}\") as demo:\n    ...\n```\n\n## \u961f\u5217 (Queuing)\n\n\u5982\u679c\u60a8\u7684\u5e94\u7528\u7a0b\u5e8f\u9884\u8ba1\u4f1a\u6709\u5927\u91cf\u6d41\u91cf\uff0c\u8bf7 with `queue()` \u65b9\u6cd5\u6765\u63a7\u5236\u5904\u7406\u901f\u7387\u3002\u8fd9\u5c06\u6392\u961f\u5904\u7406\u8c03\u7528\uff0c\u56e0\u6b64\u4e00\u6b21\u53ea\u5904\u7406\u4e00\u5b9a\u6570\u91cf\u7684\u8bf7\u6c42\u3002\u961f\u5217\u4f7f\u7528 Websockets\uff0c\u8fd8\u53ef\u4ee5\u9632\u6b62\u7f51\u7edc\u8d85\u65f6\uff0c\u56e0\u6b64\u5982\u679c\u60a8\u7684\u51fd\u6570\u7684\u63a8\u7406\u65f6\u95f4\u5f88\u957f\uff08> 1 \u5206\u949f\uff09\uff0c\u5e94\u4f7f\u7528\u961f\u5217\u3002\n\nwith `Interface`\uff1a\n\n```python\ndemo = gr.Interface(...).queue()\ndemo.launch()\n```\n\nwith `Blocks`\uff1a\n\n```python\nwith gr.Blocks() as demo\uff1a\n    #...\ndemo.queue()\ndemo.launch()\n```\n\n\u60a8\u53ef\u4ee5\u901a\u8fc7\u4ee5\u4e0b\u65b9\u5f0f\u63a7\u5236\u4e00\u6b21\u5904\u7406\u7684\u8bf7\u6c42\u6570\u91cf\uff1a\n\n```python\ndemo.queue(concurrency_count=3)\n```\n\n\u67e5\u770b\u6709\u5173\u914d\u7f6e\u5176\u4ed6\u961f\u5217\u53c2\u6570\u7684[\u961f\u5217\u6587\u6863](/docs/#queue)\u3002\n\n\u5728 Blocks \u4e2d\u6307\u5b9a\u4ec5\u5bf9\u67d0\u4e9b\u51fd\u6570\u8fdb\u884c\u6392\u961f\uff1a\n\n```python\nwith gr.Blocks() as demo2\uff1a\n    num1 = gr.Number()\n    num2 = gr.Number()\n    output = gr.Number()\n    gr.Button(\"Add\").click(\n        lambda a, b: a + b, [num1, num2], output)\n    gr.Button(\"Multiply\").click(\n        lambda a, b: a * b, [num1, num2], output, queue=True)\ndemo2.launch()\n```\n\n## \u8fed\u4ee3\u8f93\u51fa (Iterative Outputs)",
      "## \u8fed\u4ee3\u8f93\u51fa (Iterative Outputs)\n\n\u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\uff0c\u60a8\u53ef\u80fd\u9700\u8981\u4f20\u8f93\u4e00\u7cfb\u5217\u8f93\u51fa\u800c\u4e0d\u662f\u4e00\u6b21\u663e\u793a\u5355\u4e2a\u8f93\u51fa\u3002\u4f8b\u5982\uff0c\u60a8\u53ef\u80fd\u6709\u4e00\u4e2a\u56fe\u50cf\u751f\u6210\u6a21\u578b\uff0c\u5e0c\u671b\u663e\u793a\u751f\u6210\u7684\u6bcf\u4e2a\u6b65\u9aa4\u7684\u56fe\u50cf\uff0c\u76f4\u5230\u6700\u7ec8\u56fe\u50cf\u3002\u6216\u8005\u60a8\u53ef\u80fd\u6709\u4e00\u4e2a\u804a\u5929\u673a\u5668\u4eba\uff0c\u5b83\u9010\u5b57\u9010\u53e5\u5730\u6d41\u5f0f\u4f20\u8f93\u54cd\u5e94\uff0c\u800c\u4e0d\u662f\u4e00\u6b21\u8fd4\u56de\u5168\u90e8\u54cd\u5e94\u3002\n\n\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u60a8\u53ef\u4ee5\u5c06**\u751f\u6210\u5668**\u51fd\u6570\u63d0\u4f9b\u7ed9 Gradio\uff0c\u800c\u4e0d\u662f\u5e38\u89c4\u51fd\u6570\u3002\u5728 Python \u4e2d\u521b\u5efa\u751f\u6210\u5668\u975e\u5e38\u7b80\u5355\uff1a\u51fd\u6570\u4e0d\u5e94\u8be5\u6709\u4e00\u4e2a\u5355\u72ec\u7684 `return` \u503c\uff0c\u800c\u662f\u5e94\u8be5 with `yield` \u8fde\u7eed\u8fd4\u56de\u4e00\u7cfb\u5217\u503c\u3002\u901a\u5e38\uff0c`yield` \u8bed\u53e5\u653e\u7f6e\u5728\u67d0\u79cd\u5faa\u73af\u4e2d\u3002\u4e0b\u9762\u662f\u4e00\u4e2a\u7b80\u5355\u793a\u4f8b\uff0c\u751f\u6210\u5668\u53ea\u662f\u7b80\u5355\u8ba1\u6570\u5230\u7ed9\u5b9a\u6570\u5b57\uff1a\n\n```python\ndef my_generator(x):\n    for i in range(x):\n        yield i\n```\n\n\u60a8\u4ee5\u4e0e\u5e38\u89c4\u51fd\u6570\u76f8\u540c\u7684\u65b9\u5f0f\u5c06\u751f\u6210\u5668\u63d0\u4f9b\u7ed9 Gradio\u3002\u4f8b\u5982\uff0c\u8fd9\u662f\u4e00\u4e2a\uff08\u865a\u62df\u7684\uff09\u56fe\u50cf\u751f\u6210\u6a21\u578b\uff0c\u5b83\u5728\u8f93\u51fa\u56fe\u50cf\u4e4b\u524d\u751f\u6210\u6570\u4e2a\u6b65\u9aa4\u7684\u566a\u97f3\uff1a\n\n$code_fake_diffusion\n$demo_fake_diffusion",
      "$code_fake_diffusion\n$demo_fake_diffusion\n\n\u8bf7\u6ce8\u610f\uff0c\u6211\u4eec\u5728\u8fed\u4ee3\u5668\u4e2d\u6dfb\u52a0\u4e86 `time.sleep(1)`\uff0c\u4ee5\u521b\u5efa\u6b65\u9aa4\u4e4b\u95f4\u7684\u4eba\u5de5\u6682\u505c\uff0c\u4ee5\u4fbf\u60a8\u53ef\u4ee5\u89c2\u5bdf\u8fed\u4ee3\u5668\u7684\u6b65\u9aa4\uff08\u5728\u771f\u5b9e\u7684\u56fe\u50cf\u751f\u6210\u6a21\u578b\u4e2d\uff0c\u8fd9\u53ef\u80fd\u662f\u4e0d\u5fc5\u8981\u7684\uff09\u3002\n\n\u5c06\u751f\u6210\u5668\u63d0\u4f9b\u7ed9 Gradio **\u9700\u8981**\u5728\u5e95\u5c42 Interface \u6216 Blocks \u4e2d\u542f\u7528\u961f\u5217\uff08\u8bf7\u53c2\u9605\u4e0a\u9762\u7684\u961f\u5217\u90e8\u5206\uff09\u3002\n\n## \u8fdb\u5ea6\u6761\n\nGradio \u652f\u6301\u521b\u5efa\u81ea\u5b9a\u4e49\u8fdb\u5ea6\u6761\uff0c\u4ee5\u4fbf\u60a8\u53ef\u4ee5\u81ea\u5b9a\u4e49\u548c\u63a7\u5236\u5411\u7528\u6237\u663e\u793a\u7684\u8fdb\u5ea6\u66f4\u65b0\u3002\u8981\u542f\u7528\u6b64\u529f\u80fd\uff0c\u53ea\u9700\u4e3a\u65b9\u6cd5\u6dfb\u52a0\u4e00\u4e2a\u9ed8\u8ba4\u503c\u4e3a `gr.Progress` \u5b9e\u4f8b\u7684\u53c2\u6570\u5373\u53ef\u3002\u7136\u540e\uff0c\u60a8\u53ef\u4ee5\u76f4\u63a5\u8c03\u7528\u6b64\u5b9e\u4f8b\u5e76\u4f20\u5165 0 \u5230 1 \u4e4b\u95f4\u7684\u6d6e\u70b9\u6570\u6765\u66f4\u65b0\u8fdb\u5ea6\u7ea7\u522b\uff0c\u6216\u8005 with `Progress` \u5b9e\u4f8b\u7684 `tqdm()` \u65b9\u6cd5\u6765\u8ddf\u8e2a\u53ef\u8fed\u4ee3\u5bf9\u8c61\u4e0a\u7684\u8fdb\u5ea6\uff0c\u5982\u4e0b\u6240\u793a\u3002\u5fc5\u987b\u542f\u7528\u961f\u5217\u4ee5\u8fdb\u884c\u8fdb\u5ea6\u66f4\u65b0\u3002\n\n$code_progress_simple\n$demo_progress_simple\n\n\u5982\u679c\u60a8 with `tqdm` \u5e93\uff0c\u5e76\u4e14\u5e0c\u671b\u4ece\u51fd\u6570\u5185\u90e8\u7684\u4efb\u4f55 `tqdm.tqdm` \u81ea\u52a8\u62a5\u544a\u8fdb\u5ea6\u66f4\u65b0\uff0c\u8bf7\u5c06\u9ed8\u8ba4\u53c2\u6570\u8bbe\u7f6e\u4e3a `gr.Progress(track_tqdm=True)`\uff01\n\n## \u6279\u5904\u7406\u51fd\u6570 (Batch Functions)\n\nGradio \u652f\u6301\u4f20\u9012*\u6279\u5904\u7406*\u51fd\u6570\u3002\u6279\u5904\u7406\u51fd\u6570\u53ea\u662f\u63a5\u53d7\u8f93\u5165\u5217\u8868\u5e76\u8fd4\u56de\u9884\u6d4b\u5217\u8868\u7684\u51fd\u6570\u3002",
      "Gradio \u652f\u6301\u4f20\u9012*\u6279\u5904\u7406*\u51fd\u6570\u3002\u6279\u5904\u7406\u51fd\u6570\u53ea\u662f\u63a5\u53d7\u8f93\u5165\u5217\u8868\u5e76\u8fd4\u56de\u9884\u6d4b\u5217\u8868\u7684\u51fd\u6570\u3002\n\n\u4f8b\u5982\uff0c\u8fd9\u662f\u4e00\u4e2a\u6279\u5904\u7406\u51fd\u6570\uff0c\u5b83\u63a5\u53d7\u4e24\u4e2a\u8f93\u5165\u5217\u8868\uff08\u4e00\u4e2a\u5355\u8bcd\u5217\u8868\u548c\u4e00\u4e2a\u6574\u6570\u5217\u8868\uff09\uff0c\u5e76\u8fd4\u56de\u4fee\u526a\u8fc7\u7684\u5355\u8bcd\u5217\u8868\u4f5c\u4e3a\u8f93\u51fa\uff1a\n\n```python\nimport time\n\ndef trim_words(words, lens):\n    trimmed_words = []\n    time.sleep(5)\n    for w, l in zip(words, lens):\n        trimmed_words.append(w[:int(l)])\n    return [trimmed_words]\n    for w, l in zip(words, lens):\n```\n\n\u4f7f\u7528\u6279\u5904\u7406\u51fd\u6570\u7684\u4f18\u70b9\u662f\uff0c\u5982\u679c\u542f\u7528\u4e86\u961f\u5217\uff0cGradio \u670d\u52a1\u5668\u53ef\u4ee5\u81ea\u52a8*\u6279\u5904\u7406*\u4f20\u5165\u7684\u8bf7\u6c42\u5e76\u5e76\u884c\u5904\u7406\u5b83\u4eec\uff0c\u4ece\u800c\u53ef\u80fd\u52a0\u5feb\u6f14\u793a\u901f\u5ea6\u3002\u4ee5\u4e0b\u662f Gradio \u4ee3\u7801\u7684\u793a\u4f8b\uff08\u8bf7\u6ce8\u610f `batch=True` \u548c `max_batch_size=16` - \u8fd9\u4e24\u4e2a\u53c2\u6570\u90fd\u53ef\u4ee5\u4f20\u9012\u7ed9\u4e8b\u4ef6\u89e6\u53d1\u5668\u6216 `Interface` \u7c7b\uff09\n\nwith `Interface`\uff1a\n\n```python\ndemo = gr.Interface(trim_words, [\"textbox\", \"number\"], [\"output\"],\n                    batch=True, max_batch_size=16)\ndemo.queue()\ndemo.launch()\n```\n\nwith `Blocks`\uff1a\n\n```python\nimport gradio as gr\n\nwith gr.Blocks() as demo:\n    with gr.Row():\n        word = gr.Textbox(label=\"word\")\n        leng = gr.Number(label=\"leng\")\n        output = gr.Textbox(label=\"Output\")\n    with gr.Row():\n        run = gr.Button()\n\n    event = run.click(trim_words, [word, leng], output, batch=True, max_batch_size=16)\n\ndemo.queue()\ndemo.launch()\n```",
      "event = run.click(trim_words, [word, leng], output, batch=True, max_batch_size=16)\n\ndemo.queue()\ndemo.launch()\n```\n\n\u5728\u4e0a\u9762\u7684\u793a\u4f8b\u4e2d\uff0c\u53ef\u4ee5\u5e76\u884c\u5904\u7406 16 \u4e2a\u8bf7\u6c42\uff08\u603b\u63a8\u7406\u65f6\u95f4\u4e3a 5 \u79d2\uff09\uff0c\u800c\u4e0d\u662f\u5206\u522b\u5904\u7406\u6bcf\u4e2a\u8bf7\u6c42\uff08\u603b\u63a8\u7406\u65f6\u95f4\u4e3a 80 \u79d2\uff09\u3002\u8bb8\u591a Hugging Face \u7684 `transformers` \u548c `diffusers` \u6a21\u578b\u5728 Gradio \u7684\u6279\u5904\u7406\u6a21\u5f0f\u4e0b\u81ea\u7136\u5de5\u4f5c\uff1a\u8fd9\u662f[\u4f7f\u7528\u6279\u5904\u7406\u751f\u6210\u56fe\u50cf\u7684\u793a\u4f8b\u6f14\u793a](https://github.com/gradio-app/gradio/blob/main/demo/diffusers_with_batching/run.py)\n\n\u6ce8\u610f\uff1a\u4f7f\u7528 Gradio \u7684\u6279\u5904\u7406\u51fd\u6570 **requires** \u5728\u5e95\u5c42 Interface \u6216 Blocks \u4e2d\u542f\u7528\u961f\u5217\uff08\u8bf7\u53c2\u9605\u4e0a\u9762\u7684\u961f\u5217\u90e8\u5206\uff09\u3002\n\n## Gradio \u7b14\u8bb0\u672c (Colab Notebooks)",
      "## Gradio \u7b14\u8bb0\u672c (Colab Notebooks)\n\nGradio \u53ef\u4ee5\u5728\u4efb\u4f55\u8fd0\u884c Python \u7684\u5730\u65b9\u8fd0\u884c\uff0c\u5305\u62ec\u672c\u5730 Jupyter \u7b14\u8bb0\u672c\u548c\u534f\u4f5c\u7b14\u8bb0\u672c\uff0c\u5982[Google Colab](https://colab.research.google.com/)\u3002\u5bf9\u4e8e\u672c\u5730 Jupyter \u7b14\u8bb0\u672c\u548c Google Colab \u7b14\u8bb0\u672c\uff0cGradio \u5728\u672c\u5730\u670d\u52a1\u5668\u4e0a\u8fd0\u884c\uff0c\u60a8\u53ef\u4ee5\u5728\u6d4f\u89c8\u5668\u4e2d\u4e0e\u4e4b\u4ea4\u4e92\u3002\uff08\u6ce8\u610f\uff1a\u5bf9\u4e8e Google Colab\uff0c\u8fd9\u662f\u901a\u8fc7[\u670d\u52a1\u5de5\u4f5c\u5668\u96a7\u9053](https://github.com/tensorflow/tensorboard/blob/master/docs/design/colab_integration.md)\u5b9e\u73b0\u7684\uff0c\u60a8\u7684\u6d4f\u89c8\u5668\u9700\u8981\u542f\u7528 cookies\u3002\uff09\u5bf9\u4e8e\u5176\u4ed6\u8fdc\u7a0b\u7b14\u8bb0\u672c\uff0cGradio \u4e5f\u5c06\u5728\u670d\u52a1\u5668\u4e0a\u8fd0\u884c\uff0c\u4f46\u60a8\u9700\u8981\u4f7f\u7528[SSH \u96a7\u9053](https://coderwall.com/p/ohk6cg/remote-access-to-ipython-notebooks-via-ssh)\u5728\u672c\u5730\u6d4f\u89c8\u5668\u4e2d\u67e5\u770b\u5e94\u7528\u7a0b\u5e8f\u3002\u901a\u5e38\uff0c\u66f4\u7b80\u5355\u7684\u9009\u62e9\u662f\u4f7f\u7528 Gradio \u5185\u7f6e\u7684\u516c\u5171\u94fe\u63a5\uff0c[\u5728\u4e0b\u4e00\u7bc7\u6307\u5357\u4e2d\u8ba8\u8bba](/sharing-your-app/#sharing-demos)\u3002",
      "!--Copyright 2023 The HuggingFace Team. All rights reserved.\n\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\nthe License. You may obtain a copy of the License at\n\nhttp://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software distributed under the License is distributed on\nan \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n\n\u26a0\ufe0f Note that this file is in Markdown but contain specific syntax for our doc-builder (similar to MDX) that may not be\nrendered properly in your Markdown viewer.\n\n-->\n\n# Training on TPU with TensorFlow\n\n<Tip>\n\nIf you don't need long explanations and just want TPU code samples to get started with, check out [our TPU example notebook!](https://colab.research.google.com/github/huggingface/notebooks/blob/main/examples/tpu_training-tf.ipynb)\n\n</Tip>\n\n### What is a TPU?\n\nA TPU is a **Tensor Processing Unit.** They are hardware designed by Google, which are used to greatly speed up the tensor computations within neural networks, much like GPUs. They can be used for both network training and inference. They are generally accessed through Google\u2019s cloud services, but small TPUs can also be accessed directly for free through Google Colab and Kaggle Kernels.",
      "Because [all TensorFlow models in \ud83e\udd17 Transformers are Keras models](https://huggingface.co/blog/tensorflow-philosophy), most of the methods in this document are generally applicable to TPU training for any Keras model! However, there are a few points that are specific to the HuggingFace ecosystem (hug-o-system?) of Transformers and Datasets, and we\u2019ll make sure to flag them up when we get to them.\n\n### What kinds of TPU are available?\n\nNew users are often very confused by the range of TPUs, and the different ways to access them. The first key distinction to understand is the difference between **TPU Nodes** and **TPU VMs.**\n\nWhen you use a **TPU Node**, you are effectively indirectly accessing a remote TPU. You will need a separate VM, which will initialize your network and data pipeline and then forward them to the remote node. When you use a TPU on Google Colab, you are accessing it in the **TPU Node** style.\n\nUsing TPU Nodes can have some quite unexpected behaviour for people who aren\u2019t used to them! In particular, because the TPU is located on a physically different system to the machine you\u2019re running your Python code on, your data cannot be local to your machine - any data pipeline that loads from your machine\u2019s internal storage will totally fail! Instead, data must be stored in Google Cloud Storage where your data pipeline can still access it, even when the pipeline is running on the remote TPU node.\n\n<Tip>\n\nIf you can fit all your data in memory as `np.ndarray` or `tf.Tensor`, then you can `fit()` on that data even when using Colab or a TPU Node, without needing to upload it to Google Cloud Storage.\n\n</Tip>\n\n<Tip>",
      "</Tip>\n\n<Tip>\n\n**\ud83e\udd17Specific Hugging Face Tip\ud83e\udd17:** The methods `Dataset.to_tf_dataset()` and its higher-level wrapper `model.prepare_tf_dataset()` , which you will see throughout our TF code examples, will both fail on a TPU Node. The reason for this is that even though they create a `tf.data.Dataset` it is not a \u201cpure\u201d `tf.data` pipeline and uses `tf.numpy_function` or `Dataset.from_generator()` to stream data from the underlying HuggingFace `Dataset`. This HuggingFace `Dataset` is backed by data that is on a local disc and which the remote TPU Node will not be able to read.\n\n</Tip>\n\nThe second way to access a TPU is via a **TPU VM.** When using a TPU VM, you connect directly to the machine that the TPU is attached to, much like training on a GPU VM. TPU VMs are generally easier to work with, particularly when it comes to your data pipeline. All of the above warnings do not apply to TPU VMs!",
      "This is an opinionated document, so here\u2019s our opinion: **Avoid using TPU Node if possible.** It is more confusing and more difficult to debug than TPU VMs. It is also likely to be unsupported in future - Google\u2019s latest TPU, TPUv4, can only be accessed as a TPU VM, which suggests that TPU Nodes are increasingly going to become a \u201clegacy\u201d access method. However, we understand that the only free TPU access is on Colab and Kaggle Kernels, which uses TPU Node - so we\u2019ll try to explain how to handle it if you have to! Check the [TPU example notebook](https://colab.research.google.com/github/huggingface/notebooks/blob/main/examples/tpu_training-tf.ipynb) for code samples that explain this in more detail.\n\n### What sizes of TPU are available?\n\nA single TPU (a v2-8/v3-8/v4-8) runs 8 replicas. TPUs exist in **pods** that can run hundreds or thousands of replicas simultaneously. When you use more than a single TPU but less than a whole pod (for example, a v3-32), your TPU fleet is referred to as a **pod slice.**\n\nWhen you access a free TPU via Colab, you generally get a single v2-8 TPU.\n\n### I keep hearing about this XLA thing. What\u2019s XLA, and how does it relate to TPUs?",
      "### I keep hearing about this XLA thing. What\u2019s XLA, and how does it relate to TPUs?\n\nXLA is an optimizing compiler, used by both TensorFlow and JAX. In JAX it is the only compiler, whereas in TensorFlow it is optional (but mandatory on TPU!). The easiest way to enable it when training a Keras model is to pass the argument `jit_compile=True` to `model.compile()`. If you don\u2019t get any errors and performance is good, that\u2019s a great sign that you\u2019re ready to move to TPU!\n\nDebugging on TPU is generally a bit harder than on CPU/GPU, so we recommend getting your code running on CPU/GPU with XLA first before trying it on TPU. You don\u2019t have to train for long, of course - just for a few steps to make sure that your model and data pipeline are working like you expect them to.\n\n<Tip>\n\nXLA compiled code is usually faster - so even if you\u2019re not planning to run on TPU, adding `jit_compile=True` can improve your performance. Be sure to note the caveats below about XLA compatibility, though!\n\n</Tip>\n\n<Tip warning={true}>\n\n**Tip born of painful experience:** Although using `jit_compile=True` is a good way to get a speed boost and test if your CPU/GPU code is XLA-compatible, it can actually cause a lot of problems if you leave it in when actually training on TPU. XLA compilation will happen implicitly on TPU, so remember to remove that line before actually running your code on a TPU!\n\n</Tip>\n\n### How do I make my model XLA compatible?\n\nIn many cases, your code is probably XLA-compatible already! However, there are a few things that work in normal TensorFlow that don\u2019t work in XLA. We\u2019ve distilled them into three core rules below:",
      "<Tip>\n\n**\ud83e\udd17Specific HuggingFace Tip\ud83e\udd17:** We\u2019ve put a lot of effort into rewriting our TensorFlow models and loss functions to be XLA-compatible. Our models and loss functions generally obey rule #1 and #2 by default, so you can skip over them if you\u2019re using `transformers` models. Don\u2019t forget about these rules when writing your own models and loss functions, though!\n\n</Tip>\n\n#### XLA Rule #1: Your code cannot have \u201cdata-dependent conditionals\u201d\n\nWhat that means is that any `if` statement cannot depend on values inside a `tf.Tensor`. For example, this code block cannot be compiled with XLA!\n\n```python\nif tf.reduce_sum(tensor) > 10:\n    tensor = tensor / 2.0\n```\n\nThis might seem very restrictive at first, but most neural net code doesn\u2019t need to do this. You can often get around this restriction by using `tf.cond` (see the documentation [here](https://www.tensorflow.org/api_docs/python/tf/cond)) or by removing the conditional and finding a clever math trick with indicator variables instead, like so:\n\n```python\nsum_over_10 = tf.cast(tf.reduce_sum(tensor) > 10, tf.float32)\ntensor = tensor / (1.0 + sum_over_10)\n```\n\nThis code has exactly the same effect as the code above, but by avoiding a conditional, we ensure it will compile with XLA without problems!\n\n#### XLA Rule #2: Your code cannot have \u201cdata-dependent shapes\u201d",
      "#### XLA Rule #2: Your code cannot have \u201cdata-dependent shapes\u201d\n\nWhat this means is that the shape of all of the `tf.Tensor` objects in your code cannot depend on their values. For example, the function `tf.unique` cannot be compiled with XLA, because it returns a `tensor` containing one instance of each unique value in the input. The shape of this output will obviously be different depending on how repetitive the input `Tensor` was, and so XLA refuses to handle it!\n\nIn general, most neural network code obeys rule #2 by default. However, there are a few common cases where it becomes a problem. One very common one is when you use **label masking**, setting your labels to a negative value to indicate that those positions should be ignored when computing the loss. If you look at NumPy or PyTorch loss functions that support label masking, you will often see code like this that uses [boolean indexing](https://numpy.org/doc/stable/user/basics.indexing.html#boolean-array-indexing):\n\n```python\nlabel_mask = labels >= 0\nmasked_outputs = outputs[label_mask]\nmasked_labels = labels[label_mask]\nloss = compute_loss(masked_outputs, masked_labels)\nmean_loss = torch.mean(loss)\n```\n\nThis code is totally fine in NumPy or PyTorch, but it breaks in XLA! Why? Because the shape of `masked_outputs` and `masked_labels` depends on how many positions are masked - that makes it a **data-dependent shape.** However, just like for rule #1, we can often rewrite this code to yield exactly the same output without any data-dependent shapes.",
      "```python\nlabel_mask = tf.cast(labels >= 0, tf.float32)\nloss = compute_loss(outputs, labels)\nloss = loss * label_mask  # Set negative label positions to 0\nmean_loss = tf.reduce_sum(loss) / tf.reduce_sum(label_mask)\n```\n\nHere, we avoid data-dependent shapes by computing the loss for every position, but zeroing out the masked positions in both the numerator and denominator when we calculate the mean, which yields exactly the same result as the first block while maintaining XLA compatibility. Note that we use the same trick as in rule #1 - converting a `tf.bool` to `tf.float32` and using it as an indicator variable. This is a really useful trick, so remember it if you need to convert your own code to XLA!\n\n#### XLA Rule #3: XLA will need to recompile your model for every different input shape it sees\n\nThis is the big one. What this means is that if your input shapes are very variable, XLA will have to recompile your model over and over, which will create huge performance problems. This commonly arises in NLP models, where input texts have variable lengths after tokenization. In other modalities, static shapes are more common and this rule is much less of a problem.\n\nHow can you get around rule #3? The key is **padding** - if you pad all your inputs to the same length, and then use an `attention_mask`, you can get the same results as you\u2019d get from variable shapes, but without any XLA issues. However, excessive padding can cause severe slowdown too - if you pad all your samples to the maximum length in the whole dataset, you might end up with batches consisting endless padding tokens, which will waste a lot of compute and memory!",
      "There isn\u2019t a perfect solution to this problem. However, you can try some tricks. One very useful trick is to **pad batches of samples up to a multiple of a number like 32 or 64 tokens.** This often only increases the number of tokens by a small amount, but it hugely reduces the number of unique input shapes, because every input shape now has to be a multiple of 32 or 64. Fewer unique input shapes means fewer XLA compilations!\n\n<Tip>\n\n**\ud83e\udd17Specific HuggingFace Tip\ud83e\udd17:** Our tokenizers and data collators have methods that can help you here. You can use `padding=\"max_length\"` or `padding=\"longest\"` when calling tokenizers to get them to output padded data. Our tokenizers and data collators also have a `pad_to_multiple_of` argument that you can use to reduce the number of unique input shapes you see!\n\n</Tip>\n\n### How do I actually train my model on TPU?\n\nOnce your training is XLA-compatible and (if you\u2019re using TPU Node / Colab) your dataset has been prepared appropriately, running on TPU is surprisingly easy! All you really need to change in your code is to add a few lines to initialize your TPU, and to ensure that your model and dataset are created inside a `TPUStrategy` scope. Take a look at [our TPU example notebook](https://colab.research.google.com/github/huggingface/notebooks/blob/main/examples/tpu_training-tf.ipynb) to see this in action!\n\n### Summary\n\nThere was a lot in here, so let\u2019s summarize with a quick checklist you can follow when you want to get your model ready for TPU training:",
      "### Summary\n\nThere was a lot in here, so let\u2019s summarize with a quick checklist you can follow when you want to get your model ready for TPU training:\n\n- Make sure your code follows the three rules of XLA\n- Compile your model with `jit_compile=True` on CPU/GPU and confirm that you can train it with XLA\n- Either load your dataset into memory or use a TPU-compatible dataset loading approach (see [notebook](https://colab.research.google.com/github/huggingface/notebooks/blob/main/examples/tpu_training-tf.ipynb))\n- Migrate your code either to Colab (with accelerator set to \u201cTPU\u201d) or a TPU VM on Google Cloud\n- Add TPU initializer code (see [notebook](https://colab.research.google.com/github/huggingface/notebooks/blob/main/examples/tpu_training-tf.ipynb))\n- Create your `TPUStrategy` and make sure dataset loading and model creation are inside the `strategy.scope()` (see [notebook](https://colab.research.google.com/github/huggingface/notebooks/blob/main/examples/tpu_training-tf.ipynb))\n- Don\u2019t forget to take `jit_compile=True` out again when you move to TPU!\n- \ud83d\ude4f\ud83d\ude4f\ud83d\ude4f\ud83e\udd7a\ud83e\udd7a\ud83e\udd7a\n- Call model.fit()\n- You did it!",
      "Gradio Demo: blocks_random_slider\n\n\n```\n!pip install -q gradio \n```\n\n\n```\n\nimport gradio as gr\n\n\ndef func(slider_1, slider_2):\n    return slider_1 * 5 + slider_2\n\n\nwith gr.Blocks() as demo:\n    slider = gr.Slider(minimum=-10.2, maximum=15, label=\"Random Slider (Static)\", randomize=True)\n    slider_1 = gr.Slider(minimum=100, maximum=200, label=\"Random Slider (Input 1)\", randomize=True)\n    slider_2 = gr.Slider(minimum=10, maximum=23.2, label=\"Random Slider (Input 2)\", randomize=True)\n    slider_3 = gr.Slider(value=3, label=\"Non random slider\")\n    btn = gr.Button(\"Run\")\n    btn.click(func, inputs=[slider_1, slider_2], outputs=gr.Number())\n\nif __name__ == \"__main__\":\n    demo.launch()\n\n```",
      "Git over SSH\n\nYou can access and write data in repositories on huggingface.co using SSH (Secure Shell Protocol). When you connect via SSH, you authenticate using a private key file on your local machine.\n\nSome actions, such as pushing changes, or cloning private repositories, will require you to upload your SSH public key to your account on huggingface.co.\n\nYou can use a pre-existing SSH key, or generate a new one specifically for huggingface.co.\n\n## Checking for existing SSH keys\n\nIf you have an existing SSH key, you can use that key to authenticate Git operations over SSH.\n\nSSH keys are usually located under `~/.ssh` on Mac & Linux, and under `C:\\\\Users\\\\<username>\\\\.ssh` on Windows. List files under that directory and look for files of the form:\n\n- id_rsa.pub\n- id_ecdsa.pub\n- id_ed25519.pub\n\nThose files contain your SSH public key.\n\nIf you don't have such file under `~/.ssh`, you will have to [generate a new key](#generating-a-new-ssh-keypair). Otherwise, you can [add your existing SSH public key(s) to your huggingface.co account](#add-a-ssh-key-to-your-account).\n\n## Generating a new SSH keypair\n\nIf you don't have any SSH keys on your machine, you can use `ssh-keygen` to generate a new SSH key pair (public + private keys):\n\n```\n$ ssh-keygen -t ed25519 -C \"your.email@example.co\"\n```\n\nWe recommend entering a passphrase when you are prompted to. A passphrase is an extra layer of security: it is a password that will be prompted whenever you use your SSH key.\n\nOnce your new key is generated, add it to your SSH agent with `ssh-add`:\n\n```\n$ ssh-add ~/.ssh/id_ed25519\n```",
      "Once your new key is generated, add it to your SSH agent with `ssh-add`:\n\n```\n$ ssh-add ~/.ssh/id_ed25519\n```\n\nIf you chose a different location than the default to store your SSH key, you would have to replace `~/.ssh/id_ed25519` with the file location you used.\n\n## Add a SSH key to your account\n\nTo access private repositories with SSH, or to push changes via SSH, you will need to add your SSH public key to your huggingface.co account. You can manage your SSH keys [in your user settings](https://huggingface.co/settings/keys).\n\nTo add a SSH key to your account, click on the \"Add SSH key\" button.\n\nThen, enter a name for this key (for example, \"Personal computer\"), and copy and paste the content of your **public** SSH key in the area below. The public key is located in the `~/.ssh/id_XXXX.pub` file you found or generated in the previous steps.\n\nClick on \"Add key\", and voil\u00e0! You have added a SSH key to your huggingface.co account.\n\n\n## Testing your SSH authentication\n\nOnce you have added your SSH key to your huggingface.co account, you can test that the connection works as expected.\n\nIn a terminal, run:\n```\n$ ssh -T git@hf.co\n```\n\nIf you see a message with your username, congrats! Everything went well, you are ready to use git over SSH.\n\nOtherwise, if the message states something like the following, make sure your SSH key is actually used by your SSH agent.\n```\nHi anonymous, welcome to Hugging Face.\n```",
      "!---\nCopyright 2022 The HuggingFace Team. All rights reserved.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n-->\n\n# Token classification with LayoutLMv3 (PyTorch version)\n\nThis directory contains a script, `run_funsd_cord.py`, that can be used to fine-tune (or evaluate) LayoutLMv3 on form understanding datasets, such as [FUNSD](https://guillaumejaume.github.io/FUNSD/) and [CORD](https://github.com/clovaai/cord).\n\nThe script `run_funsd_cord.py` leverages the \ud83e\udd17 Datasets library and the Trainer API. You can easily customize it to your needs.\n\n## Fine-tuning on FUNSD\n\nFine-tuning LayoutLMv3 for token classification on [FUNSD](https://guillaumejaume.github.io/FUNSD/) can be done as follows:",
      "Fine-tuning LayoutLMv3 for token classification on [FUNSD](https://guillaumejaume.github.io/FUNSD/) can be done as follows:\n\n```bash\npython run_funsd_cord.py \\\n  --model_name_or_path microsoft/layoutlmv3-base \\\n  --dataset_name funsd \\\n  --output_dir layoutlmv3-test \\\n  --do_train \\\n  --do_eval \\\n  --max_steps 1000 \\\n  --evaluation_strategy steps \\\n  --eval_steps 100 \\\n  --learning_rate 1e-5 \\\n  --load_best_model_at_end \\\n  --metric_for_best_model \"eval_f1\" \\\n  --push_to_hub \\\n  --push_to_hub\u00b0model_id layoutlmv3-finetuned-funsd\n```\n\n\ud83d\udc40 The resulting model can be found here: https://huggingface.co/nielsr/layoutlmv3-finetuned-funsd. By specifying the `push_to_hub` flag, the model gets uploaded automatically to the hub (regularly), together with a model card, which includes metrics such as precision, recall and F1. Note that you can easily update the model card, as it's just a README file of the respective repo on the hub.\n\nThere's also the \"Training metrics\" [tab](https://huggingface.co/nielsr/layoutlmv3-finetuned-funsd/tensorboard), which shows Tensorboard logs over the course of training. Pretty neat, huh?\n\n## Fine-tuning on CORD\n\nFine-tuning LayoutLMv3 for token classification on [CORD](https://github.com/clovaai/cord) can be done as follows:",
      "## Fine-tuning on CORD\n\nFine-tuning LayoutLMv3 for token classification on [CORD](https://github.com/clovaai/cord) can be done as follows:\n\n```bash\npython run_funsd_cord.py \\\n  --model_name_or_path microsoft/layoutlmv3-base \\\n  --dataset_name cord \\\n  --output_dir layoutlmv3-test \\\n  --do_train \\\n  --do_eval \\\n  --max_steps 1000 \\\n  --evaluation_strategy steps \\\n  --eval_steps 100 \\\n  --learning_rate 5e-5 \\\n  --load_best_model_at_end \\\n  --metric_for_best_model \"eval_f1\" \\\n  --push_to_hub \\\n  --push_to_hub\u00b0model_id layoutlmv3-finetuned-cord\n```\n\n\ud83d\udc40 The resulting model can be found here: https://huggingface.co/nielsr/layoutlmv3-finetuned-cord. Note that a model card gets generated automatically in case you specify the `push_to_hub` flag.",
      "State in Blocks\n\nWe covered [State in Interfaces](https://gradio.app/interface-state), this guide takes a look at state in Blocks, which works mostly the same.\n\n## Global State\n\nGlobal state in Blocks works the same as in Interface. Any variable created outside a function call is a reference shared between all users.\n\n## Session State\n\nGradio supports session **state**, where data persists across multiple submits within a page session, in Blocks apps as well. To reiterate, session data is _not_ shared between different users of your model. To store data in a session state, you need to do three things:\n\n1. Create a `gr.State()` object. If there is a default value to this stateful object, pass that into the constructor.\n2. In the event listener, put the `State` object as an input and output.\n3. In the event listener function, add the variable to the input parameters and the return value.\n\nLet's take a look at a game of hangman.\n\n$code_hangman\n$demo_hangman\n\nLet's see how we do each of the 3 steps listed above in this game:\n\n1. We store the used letters in `used_letters_var`. In the constructor of `State`, we set the initial value of this to `[]`, an empty list.\n2. In `btn.click()`, we have a reference to `used_letters_var` in both the inputs and outputs.\n3. In `guess_letter`, we pass the value of this `State` to `used_letters`, and then return an updated value of this `State` in the return statement.\n\nWith more complex apps, you will likely have many State variables storing session state in a single Blocks app.\n\nLearn more about `State` in the [docs](https://gradio.app/docs#state).",
      "\u5982\u4f55\u4f7f\u7528\u5730\u56fe\u7ec4\u4ef6\u7ed8\u5236\u56fe\u8868\n\nRelated spaces:\nTags: PLOTS, MAPS\n\n## \u7b80\u4ecb\n\n\u672c\u6307\u5357\u4ecb\u7ecd\u5982\u4f55\u4f7f\u7528 Gradio \u7684 `Plot` \u7ec4\u4ef6\u5728\u5730\u56fe\u4e0a\u7ed8\u5236\u5730\u7406\u6570\u636e\u3002Gradio \u7684 `Plot` \u7ec4\u4ef6\u53ef\u4ee5\u4e0e Matplotlib\u3001Bokeh \u548c Plotly \u4e00\u8d77\u4f7f\u7528\u3002\u5728\u672c\u6307\u5357\u4e2d\uff0c\u6211\u4eec\u5c06\u4f7f\u7528 Plotly \u8fdb\u884c\u64cd\u4f5c\u3002Plotly \u53ef\u4ee5\u8ba9\u5f00\u53d1\u4eba\u5458\u8f7b\u677e\u521b\u5efa\u5404\u79cd\u5730\u56fe\u6765\u5c55\u793a\u4ed6\u4eec\u7684\u5730\u7406\u6570\u636e\u3002\u70b9\u51fb[\u8fd9\u91cc](https://plotly.com/python/maps/)\u67e5\u770b\u4e00\u4e9b\u793a\u4f8b\u3002\n\n## \u6982\u8ff0\n\n\u6211\u4eec\u5c06\u4f7f\u7528\u7ebd\u7ea6\u5e02\u7684 Airbnb \u6570\u636e\u96c6\uff0c\u8be5\u6570\u636e\u96c6\u6258\u7ba1\u5728 kaggle \u4e0a\uff0c\u70b9\u51fb[\u8fd9\u91cc](https://www.kaggle.com/datasets/dgomonov/new-york-city-airbnb-open-data)\u3002\u6211\u5df2\u7ecf\u5c06\u5176\u4e0a\u4f20\u5230 Hugging Face Hub \u4f5c\u4e3a\u4e00\u4e2a\u6570\u636e\u96c6\uff0c\u65b9\u4fbf\u4f7f\u7528\u548c\u4e0b\u8f7d\uff0c\u70b9\u51fb[\u8fd9\u91cc](https://huggingface.co/datasets/gradio/NYC-Airbnb-Open-Data)\u3002\u4f7f\u7528\u8fd9\u4e9b\u6570\u636e\uff0c\u6211\u4eec\u5c06\u5728\u5730\u56fe\u4e0a\u7ed8\u5236 Airbnb \u7684\u4f4d\u7f6e\uff0c\u5e76\u5141\u8bb8\u57fa\u4e8e\u4ef7\u683c\u548c\u4f4d\u7f6e\u8fdb\u884c\u7b5b\u9009\u3002\u4e0b\u9762\u662f\u6211\u4eec\u5c06\u8981\u6784\u5efa\u7684\u6f14\u793a\u3002 \u26a1\ufe0f\n\n$demo_map_airbnb\n\n## \u6b65\u9aa4 1-\u52a0\u8f7d CSV \u6570\u636e \ud83d\udcbe\n\n\u8ba9\u6211\u4eec\u9996\u5148\u4ece Hugging Face Hub \u52a0\u8f7d\u7ebd\u7ea6\u5e02\u7684 Airbnb \u6570\u636e\u3002\n\n```python\nfrom datasets import load_dataset\n\ndataset = load_dataset(\"gradio/NYC-Airbnb-Open-Data\", split=\"train\")\ndf = dataset.to_pandas()",
      "```python\nfrom datasets import load_dataset\n\ndataset = load_dataset(\"gradio/NYC-Airbnb-Open-Data\", split=\"train\")\ndf = dataset.to_pandas()\n\ndef filter_map(min_price, max_price, boroughs):\n    new_df = df[(df['neighbourhood_group'].isin(boroughs)) &\n            (df['price'] > min_price) & (df['price'] < max_price)]\n    names = new_df[\"name\"].tolist()\n    prices = new_df[\"price\"].tolist()\n    text_list = [(names[i], prices[i]) for i in range(0, len(names))]\n```\n\n\u5728\u4e0a\u9762\u7684\u4ee3\u7801\u4e2d\uff0c\u6211\u4eec\u5148\u5c06 CSV \u6570\u636e\u52a0\u8f7d\u5230\u4e00\u4e2a pandas dataframe \u4e2d\u3002\u8ba9\u6211\u4eec\u9996\u5148\u5b9a\u4e49\u4e00\u4e2a\u51fd\u6570\uff0c\u8fd9\u5c06\u4f5c\u4e3a gradio \u5e94\u7528\u7a0b\u5e8f\u7684\u9884\u6d4b\u51fd\u6570\u3002\u8be5\u51fd\u6570\u5c06\u63a5\u53d7\u6700\u4f4e\u4ef7\u683c\u3001\u6700\u9ad8\u4ef7\u683c\u8303\u56f4\u548c\u7b5b\u9009\u7ed3\u679c\u5730\u533a\u7684\u5217\u8868\u4f5c\u4e3a\u53c2\u6570\u3002\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u4f20\u5165\u7684\u503c (`min_price`\u3001`max_price` \u548c\u5730\u533a\u5217\u8868) \u6765\u7b5b\u9009\u6570\u636e\u6846\u5e76\u521b\u5efa `new_df`\u3002\u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u5c06\u521b\u5efa\u5305\u542b\u6bcf\u4e2a Airbnb \u7684\u540d\u79f0\u548c\u4ef7\u683c\u7684 `text_list`\uff0c\u4ee5\u4fbf\u5728\u5730\u56fe\u4e0a\u4f7f\u7528\u4f5c\u4e3a\u6807\u7b7e\u3002\n\n## \u6b65\u9aa4 2-\u5730\u56fe\u56fe\u8868 \ud83c\udf10\n\nPlotly \u4f7f\u5f97\u5904\u7406\u5730\u56fe\u53d8\u5f97\u5f88\u5bb9\u6613\u3002\u8ba9\u6211\u4eec\u770b\u4e00\u4e0b\u4e0b\u9762\u7684\u4ee3\u7801\uff0c\u4e86\u89e3\u5982\u4f55\u521b\u5efa\u5730\u56fe\u56fe\u8868\u3002\n\n```python\nimport plotly.graph_objects as go",
      "```python\nimport plotly.graph_objects as go\n\nfig = go.Figure(go.Scattermapbox(\n            customdata=text_list,\n            lat=new_df['latitude'].tolist(),\n            lon=new_df['longitude'].tolist(),\n            mode='markers',\n            marker=go.scattermapbox.Marker(\n                size=6\n            ),\n            hoverinfo=\"text\",\n            hovertemplate='<b>Name</b>: %{customdata[0]}<br><b>Price</b>: $%{customdata[1]}'\n        ))\n\nfig.update_layout(\n    mapbox_style=\"open-street-map\",\n    hovermode='closest',\n    mapbox=dict(\n        bearing=0,\n        center=go.layout.mapbox.Center(\n            lat=40.67,\n            lon=-73.90\n        ),\n        pitch=0,\n        zoom=9\n    ),\n)\n```\n\n\u4e0a\u9762\u7684\u4ee3\u7801\u4e2d\uff0c\u6211\u4eec\u901a\u8fc7\u4f20\u5165\u7ecf\u7eac\u5ea6\u5217\u8868\u6765\u521b\u5efa\u4e00\u4e2a\u6563\u70b9\u56fe\u3002\u6211\u4eec\u8fd8\u4f20\u5165\u4e86\u540d\u79f0\u548c\u4ef7\u683c\u7684\u81ea\u5b9a\u4e49\u6570\u636e\uff0c\u4ee5\u4fbf\u5728\u9f20\u6807\u60ac\u505c\u5728\u6bcf\u4e2a\u6807\u8bb0\u4e0a\u65f6\u663e\u793a\u989d\u5916\u7684\u4fe1\u606f\u3002\u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u4f7f\u7528 `update_layout` \u6765\u6307\u5b9a\u5176\u4ed6\u5730\u56fe\u8bbe\u7f6e\uff0c\u4f8b\u5982\u7f29\u653e\u548c\u5c45\u4e2d\u3002\n\n\u6709\u5173\u4f7f\u7528 Mapbox \u548c Plotly \u521b\u5efa\u6563\u70b9\u56fe\u7684\u66f4\u591a\u4fe1\u606f\uff0c\u8bf7\u70b9\u51fb[\u8fd9\u91cc](https://plotly.com/python/scattermapbox/)\u3002\n\n## \u6b65\u9aa4 3-Gradio \u5e94\u7528\u7a0b\u5e8f \u26a1\ufe0f\n\n\u6211\u4eec\u5c06\u4f7f\u7528\u4e24\u4e2a `gr.Number` \u7ec4\u4ef6\u548c\u4e00\u4e2a `gr.CheckboxGroup` \u7ec4\u4ef6\uff0c\u5141\u8bb8\u7528\u6237\u6307\u5b9a\u4ef7\u683c\u8303\u56f4\u548c\u5730\u533a\u4f4d\u7f6e\u3002\u7136\u540e\uff0c\u6211\u4eec\u5c06\u4f7f\u7528 `gr.Plot` \u7ec4\u4ef6\u4f5c\u4e3a\u6211\u4eec\u4e4b\u524d\u521b\u5efa\u7684 Plotly + Mapbox \u5730\u56fe\u7684\u8f93\u51fa\u3002",
      "```python\nwith gr.Blocks() as demo:\n    with gr.Column():\n        with gr.Row():\n            min_price = gr.Number(value=250, label=\"Minimum Price\")\n            max_price = gr.Number(value=1000, label=\"Maximum Price\")\n        boroughs = gr.CheckboxGroup(choices=[\"Queens\", \"Brooklyn\", \"Manhattan\", \"Bronx\", \"Staten Island\"], value=[\"Queens\", \"Brooklyn\"], label=\"Select Boroughs:\")\n        btn = gr.Button(value=\"Update Filter\")\n        map = gr.Plot()\n    demo.load(filter_map, [min_price, max_price, boroughs], map)\n    btn.click(filter_map, [min_price, max_price, boroughs], map)\n```\n\n\u6211\u4eec\u4f7f\u7528 `gr.Column` \u548c `gr.Row` \u5e03\u5c40\u8fd9\u4e9b\u7ec4\u4ef6\uff0c\u5e76\u4e3a\u6f14\u793a\u52a0\u8f7d\u65f6\u548c\u70b9\u51fb \" \u66f4\u65b0\u7b5b\u9009 \" \u6309\u94ae\u65f6\u6dfb\u52a0\u4e86\u4e8b\u4ef6\u89e6\u53d1\u5668\uff0c\u4ee5\u89e6\u53d1\u5730\u56fe\u66f4\u65b0\u65b0\u7684\u7b5b\u9009\u6761\u4ef6\u3002\n\n\u4ee5\u4e0b\u662f\u5b8c\u6574\u6f14\u793a\u4ee3\u7801\uff1a\n\n$code_map_airbnb\n\n## \u6b65\u9aa4 4-\u90e8\u7f72 Deployment \ud83e\udd17\n\n\u5982\u679c\u4f60\u8fd0\u884c\u4e0a\u9762\u7684\u4ee3\u7801\uff0c\u4f60\u7684\u5e94\u7528\u7a0b\u5e8f\u5c06\u5728\u672c\u5730\u8fd0\u884c\u3002\n\u5982\u679c\u8981\u83b7\u53d6\u4e34\u65f6\u5171\u4eab\u94fe\u63a5\uff0c\u53ef\u4ee5\u5c06 `share=True` \u53c2\u6570\u4f20\u9012\u7ed9 `launch`\u3002\n\n\u4f46\u5982\u679c\u4f60\u60f3\u8981\u4e00\u4e2a\u6c38\u4e45\u7684\u90e8\u7f72\u89e3\u51b3\u65b9\u6848\u5462\uff1f\n\u8ba9\u6211\u4eec\u5c06\u6211\u4eec\u7684 Gradio \u5e94\u7528\u7a0b\u5e8f\u90e8\u7f72\u5230\u514d\u8d39\u7684 HuggingFace Spaces \u5e73\u53f0\u3002\n\n\u5982\u679c\u4f60\u4ee5\u524d\u6ca1\u6709\u4f7f\u7528\u8fc7 Spaces\uff0c\u8bf7\u6309\u7167\u4e4b\u524d\u7684\u6307\u5357[\u8fd9\u91cc](/using_hugging_face_integrations)\u3002\n\n## \u7ed3\u8bba \ud83c\udf89",
      "\u5982\u679c\u4f60\u4ee5\u524d\u6ca1\u6709\u4f7f\u7528\u8fc7 Spaces\uff0c\u8bf7\u6309\u7167\u4e4b\u524d\u7684\u6307\u5357[\u8fd9\u91cc](/using_hugging_face_integrations)\u3002\n\n## \u7ed3\u8bba \ud83c\udf89\n\n\u4f60\u5df2\u7ecf\u5b8c\u6210\u4e86\uff01\u8fd9\u662f\u6784\u5efa\u5730\u56fe\u6f14\u793a\u6240\u9700\u7684\u6240\u6709\u4ee3\u7801\u3002\n\n\u94fe\u63a5\u5230\u6f14\u793a\uff1a[\u5730\u56fe\u6f14\u793a](https://huggingface.co/spaces/gradio/map_airbnb)\u548c[\u5b8c\u6574\u4ee3\u7801](https://huggingface.co/spaces/gradio/map_airbnb/blob/main/run.py)\uff08\u5728 Hugging Face Spaces\uff09",
      "SE-ResNet\n\n**SE ResNet** is a variant of a [ResNet](https://www.paperswithcode.com/method/resnet) that employs [squeeze-and-excitation blocks](https://paperswithcode.com/method/squeeze-and-excitation-block) to enable the network to perform dynamic channel-wise feature recalibration.\n\n## How do I use this model on an image?\n\nTo load a pretrained model:\n\n```py\n>>> import timm\n>>> model = timm.create_model('seresnet152d', pretrained=True)\n>>> model.eval()\n```\n\nTo load and preprocess the image:\n\n```py \n>>> import urllib\n>>> from PIL import Image\n>>> from timm.data import resolve_data_config\n>>> from timm.data.transforms_factory import create_transform\n\n>>> config = resolve_data_config({}, model=model)\n>>> transform = create_transform(**config)\n\n>>> url, filename = (\"https://github.com/pytorch/hub/raw/master/images/dog.jpg\", \"dog.jpg\")\n>>> urllib.request.urlretrieve(url, filename)\n>>> img = Image.open(filename).convert('RGB')\n>>> tensor = transform(img).unsqueeze(0) # transform and add batch dimension\n```\n\nTo get the model predictions:\n\n```py\n>>> import torch\n>>> with torch.no_grad():\n...     out = model(tensor)\n>>> probabilities = torch.nn.functional.softmax(out[0], dim=0)\n>>> print(probabilities.shape)\n>>> # prints: torch.Size([1000])\n```\n\nTo get the top-5 predictions class names:\n\n```py\n>>> # Get imagenet class mappings\n>>> url, filename = (\"https://raw.githubusercontent.com/pytorch/hub/master/imagenet_classes.txt\", \"imagenet_classes.txt\")\n>>> urllib.request.urlretrieve(url, filename) \n>>> with open(\"imagenet_classes.txt\", \"r\") as f:\n...     categories = [s.strip() for s in f.readlines()]",
      ">>> # Print top categories per image\n>>> top5_prob, top5_catid = torch.topk(probabilities, 5)\n>>> for i in range(top5_prob.size(0)):\n...     print(categories[top5_catid[i]], top5_prob[i].item())\n>>> # prints class names and probabilities like:\n>>> # [('Samoyed', 0.6425196528434753), ('Pomeranian', 0.04062102362513542), ('keeshond', 0.03186424449086189), ('white wolf', 0.01739676296710968), ('Eskimo dog', 0.011717947199940681)]\n```\n\nReplace the model name with the variant you want to use, e.g. `seresnet152d`. You can find the IDs in the model summaries at the top of this page.\n\nTo extract image features with this model, follow the [timm feature extraction examples](../feature_extraction), just change the name of the model you want to use.\n\n## How do I finetune this model?\n\nYou can finetune any of the pre-trained models just by changing the classifier (the last layer).\n\n```py\n>>> model = timm.create_model('seresnet152d', pretrained=True, num_classes=NUM_FINETUNE_CLASSES)\n```\nTo finetune on your own dataset, you have to write a training loop or adapt [timm's training\nscript](https://github.com/rwightman/pytorch-image-models/blob/master/train.py) to use your dataset.\n\n## How do I train this model?\n\nYou can follow the [timm recipe scripts](../scripts) for training a new model afresh.\n\n## Citation",
      "## How do I train this model?\n\nYou can follow the [timm recipe scripts](../scripts) for training a new model afresh.\n\n## Citation\n\n```BibTeX\n@misc{hu2019squeezeandexcitation,\n      title={Squeeze-and-Excitation Networks}, \n      author={Jie Hu and Li Shen and Samuel Albanie and Gang Sun and Enhua Wu},\n      year={2019},\n      eprint={1709.01507},\n      archivePrefix={arXiv},\n      primaryClass={cs.CV}\n}\n```",
      "<!--\nType: model-index\nCollections:\n- Name: SE ResNet\n  Paper:\n    Title: Squeeze-and-Excitation Networks\n    URL: https://paperswithcode.com/paper/squeeze-and-excitation-networks\nModels:\n- Name: seresnet152d\n  In Collection: SE ResNet\n  Metadata:\n    FLOPs: 20161904304\n    Parameters: 66840000\n    File Size: 268144497\n    Architecture:\n    - 1x1 Convolution\n    - Batch Normalization\n    - Bottleneck Residual Block\n    - Convolution\n    - Global Average Pooling\n    - Max Pooling\n    - ReLU\n    - Residual Block\n    - Residual Connection\n    - Softmax\n    - Squeeze-and-Excitation Block\n    Tasks:\n    - Image Classification\n    Training Techniques:\n    - Label Smoothing\n    - SGD with Momentum\n    - Weight Decay\n    Training Data:\n    - ImageNet\n    Training Resources: 8x NVIDIA Titan X GPUs\n    ID: seresnet152d\n    LR: 0.6\n    Epochs: 100\n    Layers: 152\n    Dropout: 0.2\n    Crop Pct: '0.94'\n    Momentum: 0.9\n    Batch Size: 1024\n    Image Size: '256'\n    Interpolation: bicubic\n  Code: https://github.com/rwightman/pytorch-image-models/blob/a7f95818e44b281137503bcf4b3e3e94d8ffa52f/timm/models/resnet.py#L1206",
      "Weights: https://github.com/rwightman/pytorch-image-models/releases/download/v0.1-weights/seresnet152d_ra2-04464dd2.pth\n  Results:\n  - Task: Image Classification\n    Dataset: ImageNet\n    Metrics:\n      Top 1 Accuracy: 83.74%\n      Top 5 Accuracy: 96.77%\n- Name: seresnet50\n  In Collection: SE ResNet\n  Metadata:\n    FLOPs: 5285062320\n    Parameters: 28090000\n    File Size: 112621903\n    Architecture:\n    - 1x1 Convolution\n    - Batch Normalization\n    - Bottleneck Residual Block\n    - Convolution\n    - Global Average Pooling\n    - Max Pooling\n    - ReLU\n    - Residual Block\n    - Residual Connection\n    - Softmax\n    - Squeeze-and-Excitation Block\n    Tasks:\n    - Image Classification\n    Training Techniques:\n    - Label Smoothing\n    - SGD with Momentum\n    - Weight Decay\n    Training Data:\n    - ImageNet\n    Training Resources: 8x NVIDIA Titan X GPUs\n    ID: seresnet50\n    LR: 0.6\n    Epochs: 100\n    Layers: 50\n    Dropout: 0.2\n    Crop Pct: '0.875'\n    Momentum: 0.9\n    Batch Size: 1024\n    Image Size: '224'\n    Interpolation: bicubic\n  Code: https://github.com/rwightman/pytorch-image-models/blob/a7f95818e44b281137503bcf4b3e3e94d8ffa52f/timm/models/resnet.py#L1180",
      "Weights: https://github.com/rwightman/pytorch-image-models/releases/download/v0.1-weights/seresnet50_ra_224-8efdb4bb.pth\n  Results:\n  - Task: Image Classification\n    Dataset: ImageNet\n    Metrics:\n      Top 1 Accuracy: 80.26%\n      Top 5 Accuracy: 95.07%\n-->"
    ]
  },
  {
    "chunk_size": 400,
    "chunk_overlap": 20,
    "limit": 10,
    "texts": [
      "Create an Endpoint\n\nAfter your first login, you will be directed to the [Endpoint creation page](https://ui.endpoints.huggingface.co/new). As an example, this guide will go through the steps to deploy [distilbert-base-uncased-finetuned-sst-2-english](https://huggingface.co/distilbert-base-uncased-finetuned-sst-2-english) for text classification. \n\n## 1. Enter the Hugging Face Repository ID and your desired endpoint name:\n\n<img src=\"https://raw.githubusercontent.com/huggingface/hf-endpoints-documentation/main/assets/1_repository.png\" alt=\"select repository\" />\n\n## 2. Select your Cloud Provider and region. Initially, only AWS will be available as a Cloud Provider with the `us-east-1` and `eu-west-1` regions. We will add Azure soon, and if you need to test Endpoints with other Cloud Providers or regions, please let us know.\n\n<img src=\"https://raw.githubusercontent.com/huggingface/hf-endpoints-documentation/main/assets/1_region.png\" alt=\"select region\" />\n\n## 3. Define the [Security Level](security) for the Endpoint:\n\n<img src=\"https://raw.githubusercontent.com/huggingface/hf-endpoints-documentation/main/assets/1_security.png\" alt=\"define security\" />\n\n## 4. Create your Endpoint by clicking **Create Endpoint**. By default, your Endpoint is created with a medium CPU (2 x 4GB vCPUs with Intel Xeon Ice Lake) The cost estimate assumes the Endpoint will be up for an entire month, and does not take autoscaling into account.\n\n<img src=\"https://raw.githubusercontent.com/huggingface/hf-endpoints-documentation/main/assets/1_create_cost.png\" alt=\"create endpoint\" />",
      "## 5. Wait for the Endpoint to build, initialize and run which can take between 1 to 5 minutes.\n\n<img src=\"https://raw.githubusercontent.com/huggingface/hf-endpoints-documentation/main/assets/overview.png\" alt=\"overview\" />\n\n## 6. Test your Endpoint in the overview with the Inference widget \ud83c\udfc1 \ud83c\udf89!\n\n<img src=\"https://raw.githubusercontent.com/huggingface/hf-endpoints-documentation/main/assets/1_inference.png\" alt=\"run inference\" />",
      "Choosing a metric for your task\n\n**So you've trained your model and want to see how well it\u2019s doing on a dataset of your choice. Where do you start?**\n\nThere is no \u201cone size fits all\u201d approach to choosing an evaluation metric, but some good guidelines to keep in mind are:\n\n## Categories of metrics\n\nThere are 3 high-level categories of metrics:\n\n1. *Generic metrics*, which can be applied to a variety of situations and datasets, such as precision and accuracy.\n2. *Task-specific metrics*, which are limited to a given task, such as Machine Translation (often evaluated using metrics [BLEU](https://huggingface.co/metrics/bleu) or [ROUGE](https://huggingface.co/metrics/rouge)) or Named Entity Recognition (often evaluated with [seqeval](https://huggingface.co/metrics/seqeval)).\n3. *Dataset-specific metrics*, which aim to measure model performance on specific benchmarks: for instance, the [GLUE benchmark](https://huggingface.co/datasets/glue) has a dedicated [evaluation metric](https://huggingface.co/metrics/glue).\n\nLet's look at each of these three cases:\n\n### Generic metrics\n\nMany of the metrics used in the Machine Learning community are quite generic and can be applied in a variety of tasks and datasets.\n\nThis is the case for metrics like [accuracy](https://huggingface.co/metrics/accuracy) and [precision](https://huggingface.co/metrics/precision), which can be used for evaluating labeled (supervised) datasets, as well as [perplexity](https://huggingface.co/metrics/perplexity), which can be used for evaluating different kinds of (unsupervised) generative tasks.",
      "To see the input structure of a given metric, you can look at its metric card. For example, in the case of [precision](https://huggingface.co/metrics/precision), the format is:\n```\n>>> precision_metric = evaluate.load(\"precision\")\n>>> results = precision_metric.compute(references=[0, 1], predictions=[0, 1])\n>>> print(results)\n{'precision': 1.0}\n```\n\n### Task-specific metrics\n\nPopular ML tasks like Machine Translation and Named Entity Recognition have specific metrics that can be used to compare models. For example, a series of different metrics have been proposed for text generation, ranging from [BLEU](https://huggingface.co/metrics/bleu) and its derivatives such as [GoogleBLEU](https://huggingface.co/metrics/google_bleu) and [GLEU](https://huggingface.co/metrics/gleu), but also [ROUGE](https://huggingface.co/metrics/rouge), [MAUVE](https://huggingface.co/metrics/mauve), etc.\n\nYou can find the right metric for your task by:",
      "You can find the right metric for your task by:\n\n- **Looking at the [Task pages](https://huggingface.co/tasks)** to see what metrics can be used for evaluating models for a given task.\n- **Checking out leaderboards** on sites like [Papers With Code](https://paperswithcode.com/) (you can search by task and by dataset).\n-  **Reading the metric cards** for the relevant metrics and see which ones are a good fit for your use case. For example, see the [BLEU metric card](https://github.com/huggingface/evaluate/tree/main/metrics/bleu) or [SQuaD metric card](https://github.com/huggingface/evaluate/tree/main/metrics/squad).\n- **Looking at papers and blog posts** published on the topic and see what metrics they report. This can change over time, so try to pick papers from the last couple of years!\n\n### Dataset-specific metrics\n\nSome datasets have specific metrics associated with them -- this is especially in the case of popular benchmarks like [GLUE](https://huggingface.co/metrics/glue) and [SQuAD](https://huggingface.co/metrics/squad).\n\n<Tip warning={true}>\n\ud83d\udca1\nGLUE is actually a collection of different subsets on different tasks, so first you need to choose the one that corresponds to the NLI task, such as mnli, which is described as \u201ccrowdsourced collection of sentence pairs with textual entailment annotations\u201d\n</Tip>",
      "If you are evaluating your model on a benchmark dataset like the ones mentioned above, you can use its dedicated evaluation metric. Make sure you respect the format that they require. For example, to evaluate your model on the [SQuAD](https://huggingface.co/datasets/squad) dataset, you need to feed the `question` and `context` into your model and return the `prediction_text`, which should be compared with the `references` (based on matching the `id` of the question) :\n\n```\n>>> from evaluate import load\n>>> squad_metric = load(\"squad\")\n>>> predictions = [{'prediction_text': '1976', 'id': '56e10a3be3433e1400422b22'}]\n>>> references = [{'answers': {'answer_start': [97], 'text': ['1976']}, 'id': '56e10a3be3433e1400422b22'}]\n>>> results = squad_metric.compute(predictions=predictions, references=references)\n>>> results\n{'exact_match': 100.0, 'f1': 100.0}\n```\n\nYou can find examples of dataset structures by consulting the \"Dataset Preview\" function or the dataset card for a given dataset, and you can see how to use its dedicated evaluation function based on the metric card.",
      "\u4e3b\u8981\u7279\u70b9\n\n\u8ba9\u6211\u4eec\u6765\u4ecb\u7ecd\u4e00\u4e0b Gradio \u6700\u53d7\u6b22\u8fce\u7684\u4e00\u4e9b\u529f\u80fd\uff01\u8fd9\u91cc\u662f Gradio \u7684\u4e3b\u8981\u7279\u70b9\uff1a\n\n1. [\u6dfb\u52a0\u793a\u4f8b\u8f93\u5165](#example-inputs)\n2. [\u4f20\u9012\u81ea\u5b9a\u4e49\u9519\u8bef\u6d88\u606f](#errors)\n3. [\u6dfb\u52a0\u63cf\u8ff0\u5185\u5bb9](#descriptive-content)\n4. [\u8bbe\u7f6e\u65d7\u6807](#flagging)\n5. [\u9884\u5904\u7406\u548c\u540e\u5904\u7406](#preprocessing-and-postprocessing)\n6. [\u6837\u5f0f\u5316\u6f14\u793a](#styling)\n7. [\u6392\u961f\u7528\u6237](#queuing)\n8. [\u8fed\u4ee3\u8f93\u51fa](#iterative-outputs)\n9. [\u8fdb\u5ea6\u6761](#progress-bars)\n10. [\u6279\u5904\u7406\u51fd\u6570](#batch-functions)\n11. [\u5728\u534f\u4f5c\u7b14\u8bb0\u672c\u4e0a\u8fd0\u884c](#colab-notebooks)\n\n## \u793a\u4f8b\u8f93\u5165\n\n\u60a8\u53ef\u4ee5\u63d0\u4f9b\u7528\u6237\u53ef\u4ee5\u8f7b\u677e\u52a0\u8f7d\u5230 \"Interface\" \u4e2d\u7684\u793a\u4f8b\u6570\u636e\u3002\u8fd9\u5bf9\u4e8e\u6f14\u793a\u6a21\u578b\u671f\u671b\u7684\u8f93\u5165\u7c7b\u578b\u4ee5\u53ca\u6f14\u793a\u6570\u636e\u96c6\u548c\u6a21\u578b\u4e00\u8d77\u63a2\u7d22\u7684\u65b9\u5f0f\u975e\u5e38\u6709\u5e2e\u52a9\u3002\u8981\u52a0\u8f7d\u793a\u4f8b\u6570\u636e\uff0c\u60a8\u53ef\u4ee5\u5c06\u5d4c\u5957\u5217\u8868\u63d0\u4f9b\u7ed9 Interface \u6784\u9020\u51fd\u6570\u7684 `examples=` \u5173\u952e\u5b57\u53c2\u6570\u3002\u5916\u90e8\u5217\u8868\u4e2d\u7684\u6bcf\u4e2a\u5b50\u5217\u8868\u8868\u793a\u4e00\u4e2a\u6570\u636e\u6837\u672c\uff0c\u5b50\u5217\u8868\u4e2d\u7684\u6bcf\u4e2a\u5143\u7d20\u8868\u793a\u6bcf\u4e2a\u8f93\u5165\u7ec4\u4ef6\u7684\u8f93\u5165\u3002\u6709\u5173\u6bcf\u4e2a\u7ec4\u4ef6\u7684\u793a\u4f8b\u6570\u636e\u683c\u5f0f\u5728[Docs](https://gradio.app/docs#components)\u4e2d\u6709\u8bf4\u660e\u3002\n\n$code_calculator\n$demo_calculator",
      "$code_calculator\n$demo_calculator\n\n\u60a8\u53ef\u4ee5\u5c06\u5927\u578b\u6570\u636e\u96c6\u52a0\u8f7d\u5230\u793a\u4f8b\u4e2d\uff0c\u901a\u8fc7 Gradio \u6d4f\u89c8\u548c\u4e0e\u6570\u636e\u96c6\u8fdb\u884c\u4ea4\u4e92\u3002\u793a\u4f8b\u5c06\u81ea\u52a8\u5206\u9875\uff08\u53ef\u4ee5\u901a\u8fc7 Interface \u7684 `examples_per_page` \u53c2\u6570\u8fdb\u884c\u914d\u7f6e\uff09\u3002\n\n\u7ee7\u7eed\u4e86\u89e3\u793a\u4f8b\uff0c\u8bf7\u53c2\u9605[\u66f4\u591a\u793a\u4f8b](https://gradio.app/more-on-examples)\u6307\u5357\u3002\n\n## \u9519\u8bef\n\n\u60a8\u5e0c\u671b\u5411\u7528\u6237\u4f20\u9012\u81ea\u5b9a\u4e49\u9519\u8bef\u6d88\u606f\u3002\u4e3a\u6b64\uff0cwith `gr.Error(\"custom message\")` \u6765\u663e\u793a\u9519\u8bef\u6d88\u606f\u3002\u5982\u679c\u5728\u4e0a\u9762\u7684\u8ba1\u7b97\u5668\u793a\u4f8b\u4e2d\u5c1d\u8bd5\u9664\u4ee5\u96f6\uff0c\u5c06\u663e\u793a\u81ea\u5b9a\u4e49\u9519\u8bef\u6d88\u606f\u7684\u5f39\u51fa\u6a21\u6001\u7a97\u53e3\u3002\u4e86\u89e3\u6709\u5173\u9519\u8bef\u7684\u66f4\u591a\u4fe1\u606f\uff0c\u8bf7\u53c2\u9605[\u6587\u6863](https://gradio.app/docs#error)\u3002\n\n## \u63cf\u8ff0\u6027\u5185\u5bb9\n\n\u5728\u524d\u9762\u7684\u793a\u4f8b\u4e2d\uff0c\u60a8\u53ef\u80fd\u5df2\u7ecf\u6ce8\u610f\u5230 Interface \u6784\u9020\u51fd\u6570\u4e2d\u7684 `title=` \u548c `description=` \u5173\u952e\u5b57\u53c2\u6570\uff0c\u5e2e\u52a9\u7528\u6237\u4e86\u89e3\u60a8\u7684\u5e94\u7528\u7a0b\u5e8f\u3002\n\nInterface \u6784\u9020\u51fd\u6570\u4e2d\u6709\u4e09\u4e2a\u53c2\u6570\u7528\u4e8e\u6307\u5b9a\u6b64\u5185\u5bb9\u5e94\u653e\u7f6e\u5728\u54ea\u91cc\uff1a\n\n- `title`\uff1a\u63a5\u53d7\u6587\u672c\uff0c\u5e76\u53ef\u4ee5\u5c06\u5176\u663e\u793a\u5728\u754c\u9762\u7684\u9876\u90e8\uff0c\u4e5f\u5c06\u6210\u4e3a\u9875\u9762\u6807\u9898\u3002\n- `description`\uff1a\u63a5\u53d7\u6587\u672c\u3001Markdown \u6216 HTML\uff0c\u5e76\u5c06\u5176\u653e\u7f6e\u5728\u6807\u9898\u6b63\u4e0b\u65b9\u3002\n- `article`\uff1a\u4e5f\u63a5\u53d7\u6587\u672c\u3001Markdown \u6216 HTML\uff0c\u5e76\u5c06\u5176\u653e\u7f6e\u5728\u754c\u9762\u4e0b\u65b9\u3002\n\n![annotated](/assets/guides/annotated.png)",
      "![annotated](/assets/guides/annotated.png)\n\n\u5982\u679c\u60a8\u4f7f\u7528\u7684\u662f `Blocks` API\uff0c\u5219\u53ef\u4ee5 with `gr.Markdown(...)` \u6216 `gr.HTML(...)` \u7ec4\u4ef6\u5728\u4efb\u4f55\u4f4d\u7f6e\u63d2\u5165\u6587\u672c\u3001Markdown \u6216 HTML\uff0c\u5176\u4e2d\u63cf\u8ff0\u6027\u5185\u5bb9\u4f4d\u4e8e `Component` \u6784\u9020\u51fd\u6570\u5185\u90e8\u3002\n\n\u53e6\u4e00\u4e2a\u6709\u7528\u7684\u5173\u952e\u5b57\u53c2\u6570\u662f `label=`\uff0c\u5b83\u5b58\u5728\u4e8e\u6bcf\u4e2a `Component` \u4e2d\u3002\u8fd9\u4fee\u6539\u4e86\u6bcf\u4e2a `Component` \u9876\u90e8\u7684\u6807\u7b7e\u6587\u672c\u3002\u8fd8\u53ef\u4ee5\u4e3a\u8bf8\u5982 `Textbox` \u6216 `Radio` \u4e4b\u7c7b\u7684\u8868\u5355\u5143\u7d20\u6dfb\u52a0 `info=` \u5173\u952e\u5b57\u53c2\u6570\uff0c\u4ee5\u63d0\u4f9b\u6709\u5173\u5176\u7528\u6cd5\u7684\u8fdb\u4e00\u6b65\u4fe1\u606f\u3002\n\n```python\ngr.Number(label='\u5e74\u9f84', info='\u4ee5\u5e74\u4e3a\u5355\u4f4d\uff0c\u5fc5\u987b\u5927\u4e8e0')\n```\n\n## \u65d7\u6807\n\n\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\"Interface\" \u5c06\u6709\u4e00\u4e2a \"Flag\" \u6309\u94ae\u3002\u5f53\u7528\u6237\u6d4b\u8bd5\u60a8\u7684 `Interface` \u65f6\uff0c\u5982\u679c\u770b\u5230\u6709\u8da3\u7684\u8f93\u51fa\uff0c\u4f8b\u5982\u9519\u8bef\u6216\u610f\u5916\u7684\u6a21\u578b\u884c\u4e3a\uff0c\u4ed6\u4eec\u53ef\u4ee5\u5c06\u8f93\u5165\u6807\u8bb0\u4e3a\u60a8\u8fdb\u884c\u67e5\u770b\u3002\u5728\u7531 `Interface` \u6784\u9020\u51fd\u6570\u7684 `flagging_dir=` \u53c2\u6570\u63d0\u4f9b\u7684\u76ee\u5f55\u4e2d\uff0c\u5c06\u8bb0\u5f55\u6807\u8bb0\u7684\u8f93\u5165\u5230\u4e00\u4e2a CSV \u6587\u4ef6\u4e2d\u3002\u5982\u679c\u754c\u9762\u6d89\u53ca\u6587\u4ef6\u6570\u636e\uff0c\u4f8b\u5982\u56fe\u50cf\u548c\u97f3\u9891\u7ec4\u4ef6\uff0c\u5c06\u521b\u5efa\u6587\u4ef6\u5939\u6765\u5b58\u50a8\u8fd9\u4e9b\u6807\u8bb0\u7684\u6570\u636e\u3002\n\n\u4f8b\u5982\uff0c\u5bf9\u4e8e\u4e0a\u9762\u663e\u793a\u7684\u8ba1\u7b97\u5668\u754c\u9762\uff0c\u6211\u4eec\u5c06\u5728\u4e0b\u9762\u7684\u65d7\u6807\u76ee\u5f55\u4e2d\u5b58\u50a8\u6807\u8bb0\u7684\u6570\u636e\uff1a\n\n```directory\n+-- calculator.py\n+-- flagged/\n|   +-- logs.csv\n```\n\n_flagged/logs.csv_",
      "_flagged/logs.csv_\n\n```csv\nnum1,operation,num2,Output\n5,add,7,12\n6,subtract,1.5,4.5\n```\n\n\u4e0e\u65e9\u671f\u663e\u793a\u7684\u51b7\u8272\u754c\u9762\u76f8\u5bf9\u5e94\uff0c\u6211\u4eec\u5c06\u5728\u4e0b\u9762\u7684\u65d7\u6807\u76ee\u5f55\u4e2d\u5b58\u50a8\u6807\u8bb0\u7684\u6570\u636e\uff1a\n\n```directory\n+-- sepia.py\n+-- flagged/\n|   +-- logs.csv\n|   +-- im/\n|   |   +-- 0.png\n|   |   +-- 1.png\n|   +-- Output/\n|   |   +-- 0.png\n|   |   +-- 1.png\n```\n\n_flagged/logs.csv_\n\n```csv\nim,Output\nim/0.png,Output/0.png\nim/1.png,Output/1.png\n```\n\n\u5982\u679c\u60a8\u5e0c\u671b\u7528\u6237\u63d0\u4f9b\u65d7\u6807\u539f\u56e0\uff0c\u53ef\u4ee5\u5c06\u5b57\u7b26\u4e32\u5217\u8868\u4f20\u9012\u7ed9 Interface \u7684 `flagging_options` \u53c2\u6570\u3002\u7528\u6237\u5728\u8fdb\u884c\u65d7\u6807\u65f6\u5fc5\u987b\u9009\u62e9\u5176\u4e2d\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u8fd9\u5c06\u4f5c\u4e3a\u9644\u52a0\u5217\u4fdd\u5b58\u5230 CSV \u4e2d\u3002\n\n## \u9884\u5904\u7406\u548c\u540e\u5904\u7406 (Preprocessing and Postprocessing)\n\n![annotated](/assets/img/dataflow.svg)\n\n\u5982\u60a8\u6240\u89c1\uff0cGradio \u5305\u62ec\u53ef\u4ee5\u5904\u7406\u5404\u79cd\u4e0d\u540c\u6570\u636e\u7c7b\u578b\u7684\u7ec4\u4ef6\uff0c\u4f8b\u5982\u56fe\u50cf\u3001\u97f3\u9891\u548c\u89c6\u9891\u3002\u5927\u591a\u6570\u7ec4\u4ef6\u90fd\u53ef\u4ee5\u7528\u4f5c\u8f93\u5165\u6216\u8f93\u51fa\u3002\n\n\u5f53\u7ec4\u4ef6\u7528\u4f5c\u8f93\u5165\u65f6\uff0cGradio \u81ea\u52a8\u5904\u7406*\u9884\u5904\u7406*\uff0c\u5c06\u6570\u636e\u4ece\u7528\u6237\u6d4f\u89c8\u5668\u53d1\u9001\u7684\u7c7b\u578b\uff08\u4f8b\u5982\u7f51\u7edc\u6444\u50cf\u5934\u5feb\u7167\u7684 base64 \u8868\u793a\uff09\u8f6c\u6362\u4e3a\u60a8\u7684\u51fd\u6570\u53ef\u4ee5\u63a5\u53d7\u7684\u5f62\u5f0f\uff08\u4f8b\u5982 `numpy` \u6570\u7ec4\uff09\u3002",
      "\u540c\u6837\uff0c\u5f53\u7ec4\u4ef6\u7528\u4f5c\u8f93\u51fa\u65f6\uff0cGradio \u81ea\u52a8\u5904\u7406*\u540e\u5904\u7406*\uff0c\u5c06\u6570\u636e\u4ece\u51fd\u6570\u8fd4\u56de\u7684\u5f62\u5f0f\uff08\u4f8b\u5982\u56fe\u50cf\u8def\u5f84\u5217\u8868\uff09\u8f6c\u6362\u4e3a\u53ef\u4ee5\u5728\u7528\u6237\u6d4f\u89c8\u5668\u4e2d\u663e\u793a\u7684\u5f62\u5f0f\uff08\u4f8b\u5982\u4ee5 base64 \u683c\u5f0f\u663e\u793a\u56fe\u50cf\u7684 `Gallery`\uff09\u3002\n\n\u60a8\u53ef\u4ee5\u4f7f\u7528\u6784\u5efa\u56fe\u50cf\u7ec4\u4ef6\u65f6\u7684\u53c2\u6570\u63a7\u5236*\u9884\u5904\u7406*\u3002\u4f8b\u5982\uff0c\u5982\u679c\u60a8\u4f7f\u7528\u4ee5\u4e0b\u53c2\u6570\u5b9e\u4f8b\u5316 `Image` \u7ec4\u4ef6\uff0c\u5b83\u5c06\u5c06\u56fe\u50cf\u8f6c\u6362\u4e3a `PIL` \u7c7b\u578b\uff0c\u5e76\u5c06\u5176\u91cd\u5851\u4e3a`(100, 100)`\uff0c\u800c\u4e0d\u7ba1\u63d0\u4ea4\u65f6\u7684\u539f\u59cb\u5927\u5c0f\u5982\u4f55\uff1a\n\n```py\nimg = gr.Image(shape=(100, 100), type=\"pil\")\n```\n\n\u76f8\u53cd\uff0c\u8fd9\u91cc\u6211\u4eec\u4fdd\u7559\u56fe\u50cf\u7684\u539f\u59cb\u5927\u5c0f\uff0c\u4f46\u5728\u5c06\u5176\u8f6c\u6362\u4e3a numpy \u6570\u7ec4\u4e4b\u524d\u53cd\u8f6c\u989c\u8272\uff1a\n\n```py\nimg = gr.Image(invert_colors=True, type=\"numpy\")\n```\n\n\u540e\u5904\u7406\u8981\u5bb9\u6613\u5f97\u591a\uff01Gradio \u81ea\u52a8\u8bc6\u522b\u8fd4\u56de\u6570\u636e\u7684\u683c\u5f0f\uff08\u4f8b\u5982 `Image` \u662f `numpy` \u6570\u7ec4\u8fd8\u662f `str` \u6587\u4ef6\u8def\u5f84\uff1f\uff09\uff0c\u5e76\u5c06\u5176\u540e\u5904\u7406\u4e3a\u53ef\u4ee5\u7531\u6d4f\u89c8\u5668\u663e\u793a\u7684\u683c\u5f0f\u3002\n\n\u8bf7\u67e5\u770b[\u6587\u6863](https://gradio.app/docs)\uff0c\u4e86\u89e3\u6bcf\u4e2a\u7ec4\u4ef6\u7684\u6240\u6709\u4e0e\u9884\u5904\u7406\u76f8\u5173\u7684\u53c2\u6570\u3002\n\n## \u6837\u5f0f (Styling)\n\nGradio \u4e3b\u9898\u662f\u81ea\u5b9a\u4e49\u5e94\u7528\u7a0b\u5e8f\u5916\u89c2\u548c\u611f\u89c9\u7684\u6700\u7b80\u5355\u65b9\u6cd5\u3002\u60a8\u53ef\u4ee5\u9009\u62e9\u591a\u79cd\u4e3b\u9898\u6216\u521b\u5efa\u81ea\u5df1\u7684\u4e3b\u9898\u3002\u8981\u8fd9\u6837\u505a\uff0c\u8bf7\u5c06 `theme=` \u53c2\u6570\u4f20\u9012\u7ed9 `Interface` \u6784\u9020\u51fd\u6570\u3002\u4f8b\u5982\uff1a",
      "```python\ndemo = gr.Interface(..., theme=gr.themes.Monochrome())\n```\n\nGradio \u5e26\u6709\u4e00\u7ec4\u9884\u5148\u6784\u5efa\u7684\u4e3b\u9898\uff0c\u60a8\u53ef\u4ee5\u4ece `gr.themes.*` \u52a0\u8f7d\u3002\u60a8\u53ef\u4ee5\u6269\u5c55\u8fd9\u4e9b\u4e3b\u9898\u6216\u4ece\u5934\u5f00\u59cb\u521b\u5efa\u81ea\u5df1\u7684\u4e3b\u9898 - \u6709\u5173\u66f4\u591a\u8be6\u7ec6\u4fe1\u606f\uff0c\u8bf7\u53c2\u9605[\u4e3b\u9898\u6307\u5357](https://gradio.app/theming-guide)\u3002\n\n\u8981\u589e\u52a0\u989d\u5916\u7684\u6837\u5f0f\u80fd\u529b\uff0c\u60a8\u53ef\u4ee5 with `css=` \u5173\u952e\u5b57\u5c06\u4efb\u4f55 CSS \u4f20\u9012\u7ed9\u60a8\u7684\u5e94\u7528\u7a0b\u5e8f\u3002\nGradio \u5e94\u7528\u7a0b\u5e8f\u7684\u57fa\u7c7b\u662f `gradio-container`\uff0c\u56e0\u6b64\u4ee5\u4e0b\u662f\u4e00\u4e2a\u66f4\u6539 Gradio \u5e94\u7528\u7a0b\u5e8f\u80cc\u666f\u989c\u8272\u7684\u793a\u4f8b\uff1a\n\n```python\nwith `gr.Interface(css=\".gradio-container {background-color: red}\") as demo:\n    ...\n```\n\n## \u961f\u5217 (Queuing)\n\n\u5982\u679c\u60a8\u7684\u5e94\u7528\u7a0b\u5e8f\u9884\u8ba1\u4f1a\u6709\u5927\u91cf\u6d41\u91cf\uff0c\u8bf7 with `queue()` \u65b9\u6cd5\u6765\u63a7\u5236\u5904\u7406\u901f\u7387\u3002\u8fd9\u5c06\u6392\u961f\u5904\u7406\u8c03\u7528\uff0c\u56e0\u6b64\u4e00\u6b21\u53ea\u5904\u7406\u4e00\u5b9a\u6570\u91cf\u7684\u8bf7\u6c42\u3002\u961f\u5217\u4f7f\u7528 Websockets\uff0c\u8fd8\u53ef\u4ee5\u9632\u6b62\u7f51\u7edc\u8d85\u65f6\uff0c\u56e0\u6b64\u5982\u679c\u60a8\u7684\u51fd\u6570\u7684\u63a8\u7406\u65f6\u95f4\u5f88\u957f\uff08> 1 \u5206\u949f\uff09\uff0c\u5e94\u4f7f\u7528\u961f\u5217\u3002\n\nwith `Interface`\uff1a\n\n```python\ndemo = gr.Interface(...).queue()\ndemo.launch()\n```\n\nwith `Blocks`\uff1a\n\n```python\nwith gr.Blocks() as demo\uff1a\n    #...\ndemo.queue()\ndemo.launch()\n```\n\n\u60a8\u53ef\u4ee5\u901a\u8fc7\u4ee5\u4e0b\u65b9\u5f0f\u63a7\u5236\u4e00\u6b21\u5904\u7406\u7684\u8bf7\u6c42\u6570\u91cf\uff1a\n\n```python\ndemo.queue(concurrency_count=3)\n```",
      "```python\ndemo.queue(concurrency_count=3)\n```\n\n\u67e5\u770b\u6709\u5173\u914d\u7f6e\u5176\u4ed6\u961f\u5217\u53c2\u6570\u7684[\u961f\u5217\u6587\u6863](/docs/#queue)\u3002\n\n\u5728 Blocks \u4e2d\u6307\u5b9a\u4ec5\u5bf9\u67d0\u4e9b\u51fd\u6570\u8fdb\u884c\u6392\u961f\uff1a\n\n```python\nwith gr.Blocks() as demo2\uff1a\n    num1 = gr.Number()\n    num2 = gr.Number()\n    output = gr.Number()\n    gr.Button(\"Add\").click(\n        lambda a, b: a + b, [num1, num2], output)\n    gr.Button(\"Multiply\").click(\n        lambda a, b: a * b, [num1, num2], output, queue=True)\ndemo2.launch()\n```\n\n## \u8fed\u4ee3\u8f93\u51fa (Iterative Outputs)\n\n\u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\uff0c\u60a8\u53ef\u80fd\u9700\u8981\u4f20\u8f93\u4e00\u7cfb\u5217\u8f93\u51fa\u800c\u4e0d\u662f\u4e00\u6b21\u663e\u793a\u5355\u4e2a\u8f93\u51fa\u3002\u4f8b\u5982\uff0c\u60a8\u53ef\u80fd\u6709\u4e00\u4e2a\u56fe\u50cf\u751f\u6210\u6a21\u578b\uff0c\u5e0c\u671b\u663e\u793a\u751f\u6210\u7684\u6bcf\u4e2a\u6b65\u9aa4\u7684\u56fe\u50cf\uff0c\u76f4\u5230\u6700\u7ec8\u56fe\u50cf\u3002\u6216\u8005\u60a8\u53ef\u80fd\u6709\u4e00\u4e2a\u804a\u5929\u673a\u5668\u4eba\uff0c\u5b83\u9010\u5b57\u9010\u53e5\u5730\u6d41\u5f0f\u4f20\u8f93\u54cd\u5e94\uff0c\u800c\u4e0d\u662f\u4e00\u6b21\u8fd4\u56de\u5168\u90e8\u54cd\u5e94\u3002\n\n\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u60a8\u53ef\u4ee5\u5c06**\u751f\u6210\u5668**\u51fd\u6570\u63d0\u4f9b\u7ed9 Gradio\uff0c\u800c\u4e0d\u662f\u5e38\u89c4\u51fd\u6570\u3002\u5728 Python \u4e2d\u521b\u5efa\u751f\u6210\u5668\u975e\u5e38\u7b80\u5355\uff1a\u51fd\u6570\u4e0d\u5e94\u8be5\u6709\u4e00\u4e2a\u5355\u72ec\u7684 `return` \u503c\uff0c\u800c\u662f\u5e94\u8be5 with `yield` \u8fde\u7eed\u8fd4\u56de\u4e00\u7cfb\u5217\u503c\u3002\u901a\u5e38\uff0c`yield` \u8bed\u53e5\u653e\u7f6e\u5728\u67d0\u79cd\u5faa\u73af\u4e2d\u3002\u4e0b\u9762\u662f\u4e00\u4e2a\u7b80\u5355\u793a\u4f8b\uff0c\u751f\u6210\u5668\u53ea\u662f\u7b80\u5355\u8ba1\u6570\u5230\u7ed9\u5b9a\u6570\u5b57\uff1a",
      "```python\ndef my_generator(x):\n    for i in range(x):\n        yield i\n```\n\n\u60a8\u4ee5\u4e0e\u5e38\u89c4\u51fd\u6570\u76f8\u540c\u7684\u65b9\u5f0f\u5c06\u751f\u6210\u5668\u63d0\u4f9b\u7ed9 Gradio\u3002\u4f8b\u5982\uff0c\u8fd9\u662f\u4e00\u4e2a\uff08\u865a\u62df\u7684\uff09\u56fe\u50cf\u751f\u6210\u6a21\u578b\uff0c\u5b83\u5728\u8f93\u51fa\u56fe\u50cf\u4e4b\u524d\u751f\u6210\u6570\u4e2a\u6b65\u9aa4\u7684\u566a\u97f3\uff1a\n\n$code_fake_diffusion\n$demo_fake_diffusion\n\n\u8bf7\u6ce8\u610f\uff0c\u6211\u4eec\u5728\u8fed\u4ee3\u5668\u4e2d\u6dfb\u52a0\u4e86 `time.sleep(1)`\uff0c\u4ee5\u521b\u5efa\u6b65\u9aa4\u4e4b\u95f4\u7684\u4eba\u5de5\u6682\u505c\uff0c\u4ee5\u4fbf\u60a8\u53ef\u4ee5\u89c2\u5bdf\u8fed\u4ee3\u5668\u7684\u6b65\u9aa4\uff08\u5728\u771f\u5b9e\u7684\u56fe\u50cf\u751f\u6210\u6a21\u578b\u4e2d\uff0c\u8fd9\u53ef\u80fd\u662f\u4e0d\u5fc5\u8981\u7684\uff09\u3002\n\n\u5c06\u751f\u6210\u5668\u63d0\u4f9b\u7ed9 Gradio **\u9700\u8981**\u5728\u5e95\u5c42 Interface \u6216 Blocks \u4e2d\u542f\u7528\u961f\u5217\uff08\u8bf7\u53c2\u9605\u4e0a\u9762\u7684\u961f\u5217\u90e8\u5206\uff09\u3002\n\n## \u8fdb\u5ea6\u6761\n\nGradio \u652f\u6301\u521b\u5efa\u81ea\u5b9a\u4e49\u8fdb\u5ea6\u6761\uff0c\u4ee5\u4fbf\u60a8\u53ef\u4ee5\u81ea\u5b9a\u4e49\u548c\u63a7\u5236\u5411\u7528\u6237\u663e\u793a\u7684\u8fdb\u5ea6\u66f4\u65b0\u3002\u8981\u542f\u7528\u6b64\u529f\u80fd\uff0c\u53ea\u9700\u4e3a\u65b9\u6cd5\u6dfb\u52a0\u4e00\u4e2a\u9ed8\u8ba4\u503c\u4e3a `gr.Progress` \u5b9e\u4f8b\u7684\u53c2\u6570\u5373\u53ef\u3002\u7136\u540e\uff0c\u60a8\u53ef\u4ee5\u76f4\u63a5\u8c03\u7528\u6b64\u5b9e\u4f8b\u5e76\u4f20\u5165 0 \u5230 1 \u4e4b\u95f4\u7684\u6d6e\u70b9\u6570\u6765\u66f4\u65b0\u8fdb\u5ea6\u7ea7\u522b\uff0c\u6216\u8005 with `Progress` \u5b9e\u4f8b\u7684 `tqdm()` \u65b9\u6cd5\u6765\u8ddf\u8e2a\u53ef\u8fed\u4ee3\u5bf9\u8c61\u4e0a\u7684\u8fdb\u5ea6\uff0c\u5982\u4e0b\u6240\u793a\u3002\u5fc5\u987b\u542f\u7528\u961f\u5217\u4ee5\u8fdb\u884c\u8fdb\u5ea6\u66f4\u65b0\u3002\n\n$code_progress_simple\n$demo_progress_simple",
      "$code_progress_simple\n$demo_progress_simple\n\n\u5982\u679c\u60a8 with `tqdm` \u5e93\uff0c\u5e76\u4e14\u5e0c\u671b\u4ece\u51fd\u6570\u5185\u90e8\u7684\u4efb\u4f55 `tqdm.tqdm` \u81ea\u52a8\u62a5\u544a\u8fdb\u5ea6\u66f4\u65b0\uff0c\u8bf7\u5c06\u9ed8\u8ba4\u53c2\u6570\u8bbe\u7f6e\u4e3a `gr.Progress(track_tqdm=True)`\uff01\n\n## \u6279\u5904\u7406\u51fd\u6570 (Batch Functions)\n\nGradio \u652f\u6301\u4f20\u9012*\u6279\u5904\u7406*\u51fd\u6570\u3002\u6279\u5904\u7406\u51fd\u6570\u53ea\u662f\u63a5\u53d7\u8f93\u5165\u5217\u8868\u5e76\u8fd4\u56de\u9884\u6d4b\u5217\u8868\u7684\u51fd\u6570\u3002\n\n\u4f8b\u5982\uff0c\u8fd9\u662f\u4e00\u4e2a\u6279\u5904\u7406\u51fd\u6570\uff0c\u5b83\u63a5\u53d7\u4e24\u4e2a\u8f93\u5165\u5217\u8868\uff08\u4e00\u4e2a\u5355\u8bcd\u5217\u8868\u548c\u4e00\u4e2a\u6574\u6570\u5217\u8868\uff09\uff0c\u5e76\u8fd4\u56de\u4fee\u526a\u8fc7\u7684\u5355\u8bcd\u5217\u8868\u4f5c\u4e3a\u8f93\u51fa\uff1a\n\n```python\nimport time\n\ndef trim_words(words, lens):\n    trimmed_words = []\n    time.sleep(5)\n    for w, l in zip(words, lens):\n        trimmed_words.append(w[:int(l)])\n    return [trimmed_words]\n    for w, l in zip(words, lens):\n```\n\n\u4f7f\u7528\u6279\u5904\u7406\u51fd\u6570\u7684\u4f18\u70b9\u662f\uff0c\u5982\u679c\u542f\u7528\u4e86\u961f\u5217\uff0cGradio \u670d\u52a1\u5668\u53ef\u4ee5\u81ea\u52a8*\u6279\u5904\u7406*\u4f20\u5165\u7684\u8bf7\u6c42\u5e76\u5e76\u884c\u5904\u7406\u5b83\u4eec\uff0c\u4ece\u800c\u53ef\u80fd\u52a0\u5feb\u6f14\u793a\u901f\u5ea6\u3002\u4ee5\u4e0b\u662f Gradio \u4ee3\u7801\u7684\u793a\u4f8b\uff08\u8bf7\u6ce8\u610f `batch=True` \u548c `max_batch_size=16` - \u8fd9\u4e24\u4e2a\u53c2\u6570\u90fd\u53ef\u4ee5\u4f20\u9012\u7ed9\u4e8b\u4ef6\u89e6\u53d1\u5668\u6216 `Interface` \u7c7b\uff09\n\nwith `Interface`\uff1a\n\n```python\ndemo = gr.Interface(trim_words, [\"textbox\", \"number\"], [\"output\"],\n                    batch=True, max_batch_size=16)\ndemo.queue()\ndemo.launch()\n```\n\nwith `Blocks`\uff1a\n\n```python\nimport gradio as gr",
      "with `Blocks`\uff1a\n\n```python\nimport gradio as gr\n\nwith gr.Blocks() as demo:\n    with gr.Row():\n        word = gr.Textbox(label=\"word\")\n        leng = gr.Number(label=\"leng\")\n        output = gr.Textbox(label=\"Output\")\n    with gr.Row():\n        run = gr.Button()\n\n    event = run.click(trim_words, [word, leng], output, batch=True, max_batch_size=16)\n\ndemo.queue()\ndemo.launch()\n```\n\n\u5728\u4e0a\u9762\u7684\u793a\u4f8b\u4e2d\uff0c\u53ef\u4ee5\u5e76\u884c\u5904\u7406 16 \u4e2a\u8bf7\u6c42\uff08\u603b\u63a8\u7406\u65f6\u95f4\u4e3a 5 \u79d2\uff09\uff0c\u800c\u4e0d\u662f\u5206\u522b\u5904\u7406\u6bcf\u4e2a\u8bf7\u6c42\uff08\u603b\u63a8\u7406\u65f6\u95f4\u4e3a 80 \u79d2\uff09\u3002\u8bb8\u591a Hugging Face \u7684 `transformers` \u548c `diffusers` \u6a21\u578b\u5728 Gradio \u7684\u6279\u5904\u7406\u6a21\u5f0f\u4e0b\u81ea\u7136\u5de5\u4f5c\uff1a\u8fd9\u662f[\u4f7f\u7528\u6279\u5904\u7406\u751f\u6210\u56fe\u50cf\u7684\u793a\u4f8b\u6f14\u793a](https://github.com/gradio-app/gradio/blob/main/demo/diffusers_with_batching/run.py)\n\n\u6ce8\u610f\uff1a\u4f7f\u7528 Gradio \u7684\u6279\u5904\u7406\u51fd\u6570 **requires** \u5728\u5e95\u5c42 Interface \u6216 Blocks \u4e2d\u542f\u7528\u961f\u5217\uff08\u8bf7\u53c2\u9605\u4e0a\u9762\u7684\u961f\u5217\u90e8\u5206\uff09\u3002\n\n## Gradio \u7b14\u8bb0\u672c (Colab Notebooks)",
      "## Gradio \u7b14\u8bb0\u672c (Colab Notebooks)\n\nGradio \u53ef\u4ee5\u5728\u4efb\u4f55\u8fd0\u884c Python \u7684\u5730\u65b9\u8fd0\u884c\uff0c\u5305\u62ec\u672c\u5730 Jupyter \u7b14\u8bb0\u672c\u548c\u534f\u4f5c\u7b14\u8bb0\u672c\uff0c\u5982[Google Colab](https://colab.research.google.com/)\u3002\u5bf9\u4e8e\u672c\u5730 Jupyter \u7b14\u8bb0\u672c\u548c Google Colab \u7b14\u8bb0\u672c\uff0cGradio \u5728\u672c\u5730\u670d\u52a1\u5668\u4e0a\u8fd0\u884c\uff0c\u60a8\u53ef\u4ee5\u5728\u6d4f\u89c8\u5668\u4e2d\u4e0e\u4e4b\u4ea4\u4e92\u3002\uff08\u6ce8\u610f\uff1a\u5bf9\u4e8e Google Colab\uff0c\u8fd9\u662f\u901a\u8fc7[\u670d\u52a1\u5de5\u4f5c\u5668\u96a7\u9053](https://github.com/tensorflow/tensorboard/blob/master/docs/design/colab_integration.md)\u5b9e\u73b0\u7684\uff0c\u60a8\u7684\u6d4f\u89c8\u5668\u9700\u8981\u542f\u7528 cookies\u3002\uff09\u5bf9\u4e8e\u5176\u4ed6\u8fdc\u7a0b\u7b14\u8bb0\u672c\uff0cGradio \u4e5f\u5c06\u5728\u670d\u52a1\u5668\u4e0a\u8fd0\u884c\uff0c\u4f46\u60a8\u9700\u8981\u4f7f\u7528[SSH \u96a7\u9053](https://coderwall.com/p/ohk6cg/remote-access-to-ipython-notebooks-via-ssh)\u5728\u672c\u5730\u6d4f\u89c8\u5668\u4e2d\u67e5\u770b\u5e94\u7528\u7a0b\u5e8f\u3002\u901a\u5e38\uff0c\u66f4\u7b80\u5355\u7684\u9009\u62e9\u662f\u4f7f\u7528 Gradio \u5185\u7f6e\u7684\u516c\u5171\u94fe\u63a5\uff0c[\u5728\u4e0b\u4e00\u7bc7\u6307\u5357\u4e2d\u8ba8\u8bba](/sharing-your-app/#sharing-demos)\u3002",
      "!--Copyright 2023 The HuggingFace Team. All rights reserved.\n\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\nthe License. You may obtain a copy of the License at\n\nhttp://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software distributed under the License is distributed on\nan \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n\n\u26a0\ufe0f Note that this file is in Markdown but contain specific syntax for our doc-builder (similar to MDX) that may not be\nrendered properly in your Markdown viewer.\n\n-->\n\n# Training on TPU with TensorFlow\n\n<Tip>\n\nIf you don't need long explanations and just want TPU code samples to get started with, check out [our TPU example notebook!](https://colab.research.google.com/github/huggingface/notebooks/blob/main/examples/tpu_training-tf.ipynb)\n\n</Tip>\n\n### What is a TPU?\n\nA TPU is a **Tensor Processing Unit.** They are hardware designed by Google, which are used to greatly speed up the tensor computations within neural networks, much like GPUs. They can be used for both network training and inference. They are generally accessed through Google\u2019s cloud services, but small TPUs can also be accessed directly for free through Google Colab and Kaggle Kernels.",
      "Because [all TensorFlow models in \ud83e\udd17 Transformers are Keras models](https://huggingface.co/blog/tensorflow-philosophy), most of the methods in this document are generally applicable to TPU training for any Keras model! However, there are a few points that are specific to the HuggingFace ecosystem (hug-o-system?) of Transformers and Datasets, and we\u2019ll make sure to flag them up when we get to them.\n\n### What kinds of TPU are available?\n\nNew users are often very confused by the range of TPUs, and the different ways to access them. The first key distinction to understand is the difference between **TPU Nodes** and **TPU VMs.**\n\nWhen you use a **TPU Node**, you are effectively indirectly accessing a remote TPU. You will need a separate VM, which will initialize your network and data pipeline and then forward them to the remote node. When you use a TPU on Google Colab, you are accessing it in the **TPU Node** style.\n\nUsing TPU Nodes can have some quite unexpected behaviour for people who aren\u2019t used to them! In particular, because the TPU is located on a physically different system to the machine you\u2019re running your Python code on, your data cannot be local to your machine - any data pipeline that loads from your machine\u2019s internal storage will totally fail! Instead, data must be stored in Google Cloud Storage where your data pipeline can still access it, even when the pipeline is running on the remote TPU node.\n\n<Tip>\n\nIf you can fit all your data in memory as `np.ndarray` or `tf.Tensor`, then you can `fit()` on that data even when using Colab or a TPU Node, without needing to upload it to Google Cloud Storage.\n\n</Tip>\n\n<Tip>",
      "</Tip>\n\n<Tip>\n\n**\ud83e\udd17Specific Hugging Face Tip\ud83e\udd17:** The methods `Dataset.to_tf_dataset()` and its higher-level wrapper `model.prepare_tf_dataset()` , which you will see throughout our TF code examples, will both fail on a TPU Node. The reason for this is that even though they create a `tf.data.Dataset` it is not a \u201cpure\u201d `tf.data` pipeline and uses `tf.numpy_function` or `Dataset.from_generator()` to stream data from the underlying HuggingFace `Dataset`. This HuggingFace `Dataset` is backed by data that is on a local disc and which the remote TPU Node will not be able to read.\n\n</Tip>\n\nThe second way to access a TPU is via a **TPU VM.** When using a TPU VM, you connect directly to the machine that the TPU is attached to, much like training on a GPU VM. TPU VMs are generally easier to work with, particularly when it comes to your data pipeline. All of the above warnings do not apply to TPU VMs!",
      "This is an opinionated document, so here\u2019s our opinion: **Avoid using TPU Node if possible.** It is more confusing and more difficult to debug than TPU VMs. It is also likely to be unsupported in future - Google\u2019s latest TPU, TPUv4, can only be accessed as a TPU VM, which suggests that TPU Nodes are increasingly going to become a \u201clegacy\u201d access method. However, we understand that the only free TPU access is on Colab and Kaggle Kernels, which uses TPU Node - so we\u2019ll try to explain how to handle it if you have to! Check the [TPU example notebook](https://colab.research.google.com/github/huggingface/notebooks/blob/main/examples/tpu_training-tf.ipynb) for code samples that explain this in more detail.\n\n### What sizes of TPU are available?\n\nA single TPU (a v2-8/v3-8/v4-8) runs 8 replicas. TPUs exist in **pods** that can run hundreds or thousands of replicas simultaneously. When you use more than a single TPU but less than a whole pod (for example, a v3-32), your TPU fleet is referred to as a **pod slice.**\n\nWhen you access a free TPU via Colab, you generally get a single v2-8 TPU.\n\n### I keep hearing about this XLA thing. What\u2019s XLA, and how does it relate to TPUs?",
      "XLA is an optimizing compiler, used by both TensorFlow and JAX. In JAX it is the only compiler, whereas in TensorFlow it is optional (but mandatory on TPU!). The easiest way to enable it when training a Keras model is to pass the argument `jit_compile=True` to `model.compile()`. If you don\u2019t get any errors and performance is good, that\u2019s a great sign that you\u2019re ready to move to TPU!\n\nDebugging on TPU is generally a bit harder than on CPU/GPU, so we recommend getting your code running on CPU/GPU with XLA first before trying it on TPU. You don\u2019t have to train for long, of course - just for a few steps to make sure that your model and data pipeline are working like you expect them to.\n\n<Tip>\n\nXLA compiled code is usually faster - so even if you\u2019re not planning to run on TPU, adding `jit_compile=True` can improve your performance. Be sure to note the caveats below about XLA compatibility, though!\n\n</Tip>\n\n<Tip warning={true}>\n\n**Tip born of painful experience:** Although using `jit_compile=True` is a good way to get a speed boost and test if your CPU/GPU code is XLA-compatible, it can actually cause a lot of problems if you leave it in when actually training on TPU. XLA compilation will happen implicitly on TPU, so remember to remove that line before actually running your code on a TPU!\n\n</Tip>\n\n### How do I make my model XLA compatible?\n\nIn many cases, your code is probably XLA-compatible already! However, there are a few things that work in normal TensorFlow that don\u2019t work in XLA. We\u2019ve distilled them into three core rules below:\n\n<Tip>",
      "<Tip>\n\n**\ud83e\udd17Specific HuggingFace Tip\ud83e\udd17:** We\u2019ve put a lot of effort into rewriting our TensorFlow models and loss functions to be XLA-compatible. Our models and loss functions generally obey rule #1 and #2 by default, so you can skip over them if you\u2019re using `transformers` models. Don\u2019t forget about these rules when writing your own models and loss functions, though!\n\n</Tip>\n\n#### XLA Rule #1: Your code cannot have \u201cdata-dependent conditionals\u201d\n\nWhat that means is that any `if` statement cannot depend on values inside a `tf.Tensor`. For example, this code block cannot be compiled with XLA!\n\n```python\nif tf.reduce_sum(tensor) > 10:\n    tensor = tensor / 2.0\n```\n\nThis might seem very restrictive at first, but most neural net code doesn\u2019t need to do this. You can often get around this restriction by using `tf.cond` (see the documentation [here](https://www.tensorflow.org/api_docs/python/tf/cond)) or by removing the conditional and finding a clever math trick with indicator variables instead, like so:\n\n```python\nsum_over_10 = tf.cast(tf.reduce_sum(tensor) > 10, tf.float32)\ntensor = tensor / (1.0 + sum_over_10)\n```\n\nThis code has exactly the same effect as the code above, but by avoiding a conditional, we ensure it will compile with XLA without problems!\n\n#### XLA Rule #2: Your code cannot have \u201cdata-dependent shapes\u201d",
      "#### XLA Rule #2: Your code cannot have \u201cdata-dependent shapes\u201d\n\nWhat this means is that the shape of all of the `tf.Tensor` objects in your code cannot depend on their values. For example, the function `tf.unique` cannot be compiled with XLA, because it returns a `tensor` containing one instance of each unique value in the input. The shape of this output will obviously be different depending on how repetitive the input `Tensor` was, and so XLA refuses to handle it!\n\nIn general, most neural network code obeys rule #2 by default. However, there are a few common cases where it becomes a problem. One very common one is when you use **label masking**, setting your labels to a negative value to indicate that those positions should be ignored when computing the loss. If you look at NumPy or PyTorch loss functions that support label masking, you will often see code like this that uses [boolean indexing](https://numpy.org/doc/stable/user/basics.indexing.html#boolean-array-indexing):\n\n```python\nlabel_mask = labels >= 0\nmasked_outputs = outputs[label_mask]\nmasked_labels = labels[label_mask]\nloss = compute_loss(masked_outputs, masked_labels)\nmean_loss = torch.mean(loss)\n```\n\nThis code is totally fine in NumPy or PyTorch, but it breaks in XLA! Why? Because the shape of `masked_outputs` and `masked_labels` depends on how many positions are masked - that makes it a **data-dependent shape.** However, just like for rule #1, we can often rewrite this code to yield exactly the same output without any data-dependent shapes.",
      "```python\nlabel_mask = tf.cast(labels >= 0, tf.float32)\nloss = compute_loss(outputs, labels)\nloss = loss * label_mask  # Set negative label positions to 0\nmean_loss = tf.reduce_sum(loss) / tf.reduce_sum(label_mask)\n```\n\nHere, we avoid data-dependent shapes by computing the loss for every position, but zeroing out the masked positions in both the numerator and denominator when we calculate the mean, which yields exactly the same result as the first block while maintaining XLA compatibility. Note that we use the same trick as in rule #1 - converting a `tf.bool` to `tf.float32` and using it as an indicator variable. This is a really useful trick, so remember it if you need to convert your own code to XLA!\n\n#### XLA Rule #3: XLA will need to recompile your model for every different input shape it sees\n\nThis is the big one. What this means is that if your input shapes are very variable, XLA will have to recompile your model over and over, which will create huge performance problems. This commonly arises in NLP models, where input texts have variable lengths after tokenization. In other modalities, static shapes are more common and this rule is much less of a problem.\n\nHow can you get around rule #3? The key is **padding** - if you pad all your inputs to the same length, and then use an `attention_mask`, you can get the same results as you\u2019d get from variable shapes, but without any XLA issues. However, excessive padding can cause severe slowdown too - if you pad all your samples to the maximum length in the whole dataset, you might end up with batches consisting endless padding tokens, which will waste a lot of compute and memory!",
      "There isn\u2019t a perfect solution to this problem. However, you can try some tricks. One very useful trick is to **pad batches of samples up to a multiple of a number like 32 or 64 tokens.** This often only increases the number of tokens by a small amount, but it hugely reduces the number of unique input shapes, because every input shape now has to be a multiple of 32 or 64. Fewer unique input shapes means fewer XLA compilations!\n\n<Tip>\n\n**\ud83e\udd17Specific HuggingFace Tip\ud83e\udd17:** Our tokenizers and data collators have methods that can help you here. You can use `padding=\"max_length\"` or `padding=\"longest\"` when calling tokenizers to get them to output padded data. Our tokenizers and data collators also have a `pad_to_multiple_of` argument that you can use to reduce the number of unique input shapes you see!\n\n</Tip>\n\n### How do I actually train my model on TPU?\n\nOnce your training is XLA-compatible and (if you\u2019re using TPU Node / Colab) your dataset has been prepared appropriately, running on TPU is surprisingly easy! All you really need to change in your code is to add a few lines to initialize your TPU, and to ensure that your model and dataset are created inside a `TPUStrategy` scope. Take a look at [our TPU example notebook](https://colab.research.google.com/github/huggingface/notebooks/blob/main/examples/tpu_training-tf.ipynb) to see this in action!\n\n### Summary\n\nThere was a lot in here, so let\u2019s summarize with a quick checklist you can follow when you want to get your model ready for TPU training:",
      "- Make sure your code follows the three rules of XLA\n- Compile your model with `jit_compile=True` on CPU/GPU and confirm that you can train it with XLA\n- Either load your dataset into memory or use a TPU-compatible dataset loading approach (see [notebook](https://colab.research.google.com/github/huggingface/notebooks/blob/main/examples/tpu_training-tf.ipynb))\n- Migrate your code either to Colab (with accelerator set to \u201cTPU\u201d) or a TPU VM on Google Cloud\n- Add TPU initializer code (see [notebook](https://colab.research.google.com/github/huggingface/notebooks/blob/main/examples/tpu_training-tf.ipynb))\n- Create your `TPUStrategy` and make sure dataset loading and model creation are inside the `strategy.scope()` (see [notebook](https://colab.research.google.com/github/huggingface/notebooks/blob/main/examples/tpu_training-tf.ipynb))\n- Don\u2019t forget to take `jit_compile=True` out again when you move to TPU!\n- \ud83d\ude4f\ud83d\ude4f\ud83d\ude4f\ud83e\udd7a\ud83e\udd7a\ud83e\udd7a\n- Call model.fit()\n- You did it!",
      "Gradio Demo: blocks_random_slider\n\n\n```\n!pip install -q gradio \n```\n\n\n```\n\nimport gradio as gr\n\n\ndef func(slider_1, slider_2):\n    return slider_1 * 5 + slider_2\n\n\nwith gr.Blocks() as demo:\n    slider = gr.Slider(minimum=-10.2, maximum=15, label=\"Random Slider (Static)\", randomize=True)\n    slider_1 = gr.Slider(minimum=100, maximum=200, label=\"Random Slider (Input 1)\", randomize=True)\n    slider_2 = gr.Slider(minimum=10, maximum=23.2, label=\"Random Slider (Input 2)\", randomize=True)\n    slider_3 = gr.Slider(value=3, label=\"Non random slider\")\n    btn = gr.Button(\"Run\")\n    btn.click(func, inputs=[slider_1, slider_2], outputs=gr.Number())\n\nif __name__ == \"__main__\":\n    demo.launch()\n\n```",
      "Git over SSH\n\nYou can access and write data in repositories on huggingface.co using SSH (Secure Shell Protocol). When you connect via SSH, you authenticate using a private key file on your local machine.\n\nSome actions, such as pushing changes, or cloning private repositories, will require you to upload your SSH public key to your account on huggingface.co.\n\nYou can use a pre-existing SSH key, or generate a new one specifically for huggingface.co.\n\n## Checking for existing SSH keys\n\nIf you have an existing SSH key, you can use that key to authenticate Git operations over SSH.\n\nSSH keys are usually located under `~/.ssh` on Mac & Linux, and under `C:\\\\Users\\\\<username>\\\\.ssh` on Windows. List files under that directory and look for files of the form:\n\n- id_rsa.pub\n- id_ecdsa.pub\n- id_ed25519.pub\n\nThose files contain your SSH public key.\n\nIf you don't have such file under `~/.ssh`, you will have to [generate a new key](#generating-a-new-ssh-keypair). Otherwise, you can [add your existing SSH public key(s) to your huggingface.co account](#add-a-ssh-key-to-your-account).\n\n## Generating a new SSH keypair\n\nIf you don't have any SSH keys on your machine, you can use `ssh-keygen` to generate a new SSH key pair (public + private keys):\n\n```\n$ ssh-keygen -t ed25519 -C \"your.email@example.co\"\n```\n\nWe recommend entering a passphrase when you are prompted to. A passphrase is an extra layer of security: it is a password that will be prompted whenever you use your SSH key.\n\nOnce your new key is generated, add it to your SSH agent with `ssh-add`:\n\n```\n$ ssh-add ~/.ssh/id_ed25519\n```",
      "```\n$ ssh-add ~/.ssh/id_ed25519\n```\n\nIf you chose a different location than the default to store your SSH key, you would have to replace `~/.ssh/id_ed25519` with the file location you used.\n\n## Add a SSH key to your account\n\nTo access private repositories with SSH, or to push changes via SSH, you will need to add your SSH public key to your huggingface.co account. You can manage your SSH keys [in your user settings](https://huggingface.co/settings/keys).\n\nTo add a SSH key to your account, click on the \"Add SSH key\" button.\n\nThen, enter a name for this key (for example, \"Personal computer\"), and copy and paste the content of your **public** SSH key in the area below. The public key is located in the `~/.ssh/id_XXXX.pub` file you found or generated in the previous steps.\n\nClick on \"Add key\", and voil\u00e0! You have added a SSH key to your huggingface.co account.\n\n\n## Testing your SSH authentication\n\nOnce you have added your SSH key to your huggingface.co account, you can test that the connection works as expected.\n\nIn a terminal, run:\n```\n$ ssh -T git@hf.co\n```\n\nIf you see a message with your username, congrats! Everything went well, you are ready to use git over SSH.\n\nOtherwise, if the message states something like the following, make sure your SSH key is actually used by your SSH agent.\n```\nHi anonymous, welcome to Hugging Face.\n```",
      "!---\nCopyright 2022 The HuggingFace Team. All rights reserved.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n-->\n\n# Token classification with LayoutLMv3 (PyTorch version)\n\nThis directory contains a script, `run_funsd_cord.py`, that can be used to fine-tune (or evaluate) LayoutLMv3 on form understanding datasets, such as [FUNSD](https://guillaumejaume.github.io/FUNSD/) and [CORD](https://github.com/clovaai/cord).\n\nThe script `run_funsd_cord.py` leverages the \ud83e\udd17 Datasets library and the Trainer API. You can easily customize it to your needs.\n\n## Fine-tuning on FUNSD\n\nFine-tuning LayoutLMv3 for token classification on [FUNSD](https://guillaumejaume.github.io/FUNSD/) can be done as follows:",
      "```bash\npython run_funsd_cord.py \\\n  --model_name_or_path microsoft/layoutlmv3-base \\\n  --dataset_name funsd \\\n  --output_dir layoutlmv3-test \\\n  --do_train \\\n  --do_eval \\\n  --max_steps 1000 \\\n  --evaluation_strategy steps \\\n  --eval_steps 100 \\\n  --learning_rate 1e-5 \\\n  --load_best_model_at_end \\\n  --metric_for_best_model \"eval_f1\" \\\n  --push_to_hub \\\n  --push_to_hub\u00b0model_id layoutlmv3-finetuned-funsd\n```\n\n\ud83d\udc40 The resulting model can be found here: https://huggingface.co/nielsr/layoutlmv3-finetuned-funsd. By specifying the `push_to_hub` flag, the model gets uploaded automatically to the hub (regularly), together with a model card, which includes metrics such as precision, recall and F1. Note that you can easily update the model card, as it's just a README file of the respective repo on the hub.\n\nThere's also the \"Training metrics\" [tab](https://huggingface.co/nielsr/layoutlmv3-finetuned-funsd/tensorboard), which shows Tensorboard logs over the course of training. Pretty neat, huh?\n\n## Fine-tuning on CORD\n\nFine-tuning LayoutLMv3 for token classification on [CORD](https://github.com/clovaai/cord) can be done as follows:",
      "```bash\npython run_funsd_cord.py \\\n  --model_name_or_path microsoft/layoutlmv3-base \\\n  --dataset_name cord \\\n  --output_dir layoutlmv3-test \\\n  --do_train \\\n  --do_eval \\\n  --max_steps 1000 \\\n  --evaluation_strategy steps \\\n  --eval_steps 100 \\\n  --learning_rate 5e-5 \\\n  --load_best_model_at_end \\\n  --metric_for_best_model \"eval_f1\" \\\n  --push_to_hub \\\n  --push_to_hub\u00b0model_id layoutlmv3-finetuned-cord\n```\n\n\ud83d\udc40 The resulting model can be found here: https://huggingface.co/nielsr/layoutlmv3-finetuned-cord. Note that a model card gets generated automatically in case you specify the `push_to_hub` flag.",
      "State in Blocks\n\nWe covered [State in Interfaces](https://gradio.app/interface-state), this guide takes a look at state in Blocks, which works mostly the same.\n\n## Global State\n\nGlobal state in Blocks works the same as in Interface. Any variable created outside a function call is a reference shared between all users.\n\n## Session State\n\nGradio supports session **state**, where data persists across multiple submits within a page session, in Blocks apps as well. To reiterate, session data is _not_ shared between different users of your model. To store data in a session state, you need to do three things:\n\n1. Create a `gr.State()` object. If there is a default value to this stateful object, pass that into the constructor.\n2. In the event listener, put the `State` object as an input and output.\n3. In the event listener function, add the variable to the input parameters and the return value.\n\nLet's take a look at a game of hangman.\n\n$code_hangman\n$demo_hangman\n\nLet's see how we do each of the 3 steps listed above in this game:\n\n1. We store the used letters in `used_letters_var`. In the constructor of `State`, we set the initial value of this to `[]`, an empty list.\n2. In `btn.click()`, we have a reference to `used_letters_var` in both the inputs and outputs.\n3. In `guess_letter`, we pass the value of this `State` to `used_letters`, and then return an updated value of this `State` in the return statement.\n\nWith more complex apps, you will likely have many State variables storing session state in a single Blocks app.\n\nLearn more about `State` in the [docs](https://gradio.app/docs#state).",
      "\u5982\u4f55\u4f7f\u7528\u5730\u56fe\u7ec4\u4ef6\u7ed8\u5236\u56fe\u8868\n\nRelated spaces:\nTags: PLOTS, MAPS\n\n## \u7b80\u4ecb\n\n\u672c\u6307\u5357\u4ecb\u7ecd\u5982\u4f55\u4f7f\u7528 Gradio \u7684 `Plot` \u7ec4\u4ef6\u5728\u5730\u56fe\u4e0a\u7ed8\u5236\u5730\u7406\u6570\u636e\u3002Gradio \u7684 `Plot` \u7ec4\u4ef6\u53ef\u4ee5\u4e0e Matplotlib\u3001Bokeh \u548c Plotly \u4e00\u8d77\u4f7f\u7528\u3002\u5728\u672c\u6307\u5357\u4e2d\uff0c\u6211\u4eec\u5c06\u4f7f\u7528 Plotly \u8fdb\u884c\u64cd\u4f5c\u3002Plotly \u53ef\u4ee5\u8ba9\u5f00\u53d1\u4eba\u5458\u8f7b\u677e\u521b\u5efa\u5404\u79cd\u5730\u56fe\u6765\u5c55\u793a\u4ed6\u4eec\u7684\u5730\u7406\u6570\u636e\u3002\u70b9\u51fb[\u8fd9\u91cc](https://plotly.com/python/maps/)\u67e5\u770b\u4e00\u4e9b\u793a\u4f8b\u3002\n\n## \u6982\u8ff0\n\n\u6211\u4eec\u5c06\u4f7f\u7528\u7ebd\u7ea6\u5e02\u7684 Airbnb \u6570\u636e\u96c6\uff0c\u8be5\u6570\u636e\u96c6\u6258\u7ba1\u5728 kaggle \u4e0a\uff0c\u70b9\u51fb[\u8fd9\u91cc](https://www.kaggle.com/datasets/dgomonov/new-york-city-airbnb-open-data)\u3002\u6211\u5df2\u7ecf\u5c06\u5176\u4e0a\u4f20\u5230 Hugging Face Hub \u4f5c\u4e3a\u4e00\u4e2a\u6570\u636e\u96c6\uff0c\u65b9\u4fbf\u4f7f\u7528\u548c\u4e0b\u8f7d\uff0c\u70b9\u51fb[\u8fd9\u91cc](https://huggingface.co/datasets/gradio/NYC-Airbnb-Open-Data)\u3002\u4f7f\u7528\u8fd9\u4e9b\u6570\u636e\uff0c\u6211\u4eec\u5c06\u5728\u5730\u56fe\u4e0a\u7ed8\u5236 Airbnb \u7684\u4f4d\u7f6e\uff0c\u5e76\u5141\u8bb8\u57fa\u4e8e\u4ef7\u683c\u548c\u4f4d\u7f6e\u8fdb\u884c\u7b5b\u9009\u3002\u4e0b\u9762\u662f\u6211\u4eec\u5c06\u8981\u6784\u5efa\u7684\u6f14\u793a\u3002 \u26a1\ufe0f\n\n$demo_map_airbnb\n\n## \u6b65\u9aa4 1-\u52a0\u8f7d CSV \u6570\u636e \ud83d\udcbe\n\n\u8ba9\u6211\u4eec\u9996\u5148\u4ece Hugging Face Hub \u52a0\u8f7d\u7ebd\u7ea6\u5e02\u7684 Airbnb \u6570\u636e\u3002\n\n```python\nfrom datasets import load_dataset\n\ndataset = load_dataset(\"gradio/NYC-Airbnb-Open-Data\", split=\"train\")\ndf = dataset.to_pandas()",
      "def filter_map(min_price, max_price, boroughs):\n    new_df = df[(df['neighbourhood_group'].isin(boroughs)) &\n            (df['price'] > min_price) & (df['price'] < max_price)]\n    names = new_df[\"name\"].tolist()\n    prices = new_df[\"price\"].tolist()\n    text_list = [(names[i], prices[i]) for i in range(0, len(names))]\n```\n\n\u5728\u4e0a\u9762\u7684\u4ee3\u7801\u4e2d\uff0c\u6211\u4eec\u5148\u5c06 CSV \u6570\u636e\u52a0\u8f7d\u5230\u4e00\u4e2a pandas dataframe \u4e2d\u3002\u8ba9\u6211\u4eec\u9996\u5148\u5b9a\u4e49\u4e00\u4e2a\u51fd\u6570\uff0c\u8fd9\u5c06\u4f5c\u4e3a gradio \u5e94\u7528\u7a0b\u5e8f\u7684\u9884\u6d4b\u51fd\u6570\u3002\u8be5\u51fd\u6570\u5c06\u63a5\u53d7\u6700\u4f4e\u4ef7\u683c\u3001\u6700\u9ad8\u4ef7\u683c\u8303\u56f4\u548c\u7b5b\u9009\u7ed3\u679c\u5730\u533a\u7684\u5217\u8868\u4f5c\u4e3a\u53c2\u6570\u3002\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u4f20\u5165\u7684\u503c (`min_price`\u3001`max_price` \u548c\u5730\u533a\u5217\u8868) \u6765\u7b5b\u9009\u6570\u636e\u6846\u5e76\u521b\u5efa `new_df`\u3002\u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u5c06\u521b\u5efa\u5305\u542b\u6bcf\u4e2a Airbnb \u7684\u540d\u79f0\u548c\u4ef7\u683c\u7684 `text_list`\uff0c\u4ee5\u4fbf\u5728\u5730\u56fe\u4e0a\u4f7f\u7528\u4f5c\u4e3a\u6807\u7b7e\u3002\n\n## \u6b65\u9aa4 2-\u5730\u56fe\u56fe\u8868 \ud83c\udf10\n\nPlotly \u4f7f\u5f97\u5904\u7406\u5730\u56fe\u53d8\u5f97\u5f88\u5bb9\u6613\u3002\u8ba9\u6211\u4eec\u770b\u4e00\u4e0b\u4e0b\u9762\u7684\u4ee3\u7801\uff0c\u4e86\u89e3\u5982\u4f55\u521b\u5efa\u5730\u56fe\u56fe\u8868\u3002\n\n```python\nimport plotly.graph_objects as go",
      "```python\nimport plotly.graph_objects as go\n\nfig = go.Figure(go.Scattermapbox(\n            customdata=text_list,\n            lat=new_df['latitude'].tolist(),\n            lon=new_df['longitude'].tolist(),\n            mode='markers',\n            marker=go.scattermapbox.Marker(\n                size=6\n            ),\n            hoverinfo=\"text\",\n            hovertemplate='<b>Name</b>: %{customdata[0]}<br><b>Price</b>: $%{customdata[1]}'\n        ))\n\nfig.update_layout(\n    mapbox_style=\"open-street-map\",\n    hovermode='closest',\n    mapbox=dict(\n        bearing=0,\n        center=go.layout.mapbox.Center(\n            lat=40.67,\n            lon=-73.90\n        ),\n        pitch=0,\n        zoom=9\n    ),\n)\n```\n\n\u4e0a\u9762\u7684\u4ee3\u7801\u4e2d\uff0c\u6211\u4eec\u901a\u8fc7\u4f20\u5165\u7ecf\u7eac\u5ea6\u5217\u8868\u6765\u521b\u5efa\u4e00\u4e2a\u6563\u70b9\u56fe\u3002\u6211\u4eec\u8fd8\u4f20\u5165\u4e86\u540d\u79f0\u548c\u4ef7\u683c\u7684\u81ea\u5b9a\u4e49\u6570\u636e\uff0c\u4ee5\u4fbf\u5728\u9f20\u6807\u60ac\u505c\u5728\u6bcf\u4e2a\u6807\u8bb0\u4e0a\u65f6\u663e\u793a\u989d\u5916\u7684\u4fe1\u606f\u3002\u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u4f7f\u7528 `update_layout` \u6765\u6307\u5b9a\u5176\u4ed6\u5730\u56fe\u8bbe\u7f6e\uff0c\u4f8b\u5982\u7f29\u653e\u548c\u5c45\u4e2d\u3002\n\n\u6709\u5173\u4f7f\u7528 Mapbox \u548c Plotly \u521b\u5efa\u6563\u70b9\u56fe\u7684\u66f4\u591a\u4fe1\u606f\uff0c\u8bf7\u70b9\u51fb[\u8fd9\u91cc](https://plotly.com/python/scattermapbox/)\u3002\n\n## \u6b65\u9aa4 3-Gradio \u5e94\u7528\u7a0b\u5e8f \u26a1\ufe0f\n\n\u6211\u4eec\u5c06\u4f7f\u7528\u4e24\u4e2a `gr.Number` \u7ec4\u4ef6\u548c\u4e00\u4e2a `gr.CheckboxGroup` \u7ec4\u4ef6\uff0c\u5141\u8bb8\u7528\u6237\u6307\u5b9a\u4ef7\u683c\u8303\u56f4\u548c\u5730\u533a\u4f4d\u7f6e\u3002\u7136\u540e\uff0c\u6211\u4eec\u5c06\u4f7f\u7528 `gr.Plot` \u7ec4\u4ef6\u4f5c\u4e3a\u6211\u4eec\u4e4b\u524d\u521b\u5efa\u7684 Plotly + Mapbox \u5730\u56fe\u7684\u8f93\u51fa\u3002",
      "```python\nwith gr.Blocks() as demo:\n    with gr.Column():\n        with gr.Row():\n            min_price = gr.Number(value=250, label=\"Minimum Price\")\n            max_price = gr.Number(value=1000, label=\"Maximum Price\")\n        boroughs = gr.CheckboxGroup(choices=[\"Queens\", \"Brooklyn\", \"Manhattan\", \"Bronx\", \"Staten Island\"], value=[\"Queens\", \"Brooklyn\"], label=\"Select Boroughs:\")\n        btn = gr.Button(value=\"Update Filter\")\n        map = gr.Plot()\n    demo.load(filter_map, [min_price, max_price, boroughs], map)\n    btn.click(filter_map, [min_price, max_price, boroughs], map)\n```\n\n\u6211\u4eec\u4f7f\u7528 `gr.Column` \u548c `gr.Row` \u5e03\u5c40\u8fd9\u4e9b\u7ec4\u4ef6\uff0c\u5e76\u4e3a\u6f14\u793a\u52a0\u8f7d\u65f6\u548c\u70b9\u51fb \" \u66f4\u65b0\u7b5b\u9009 \" \u6309\u94ae\u65f6\u6dfb\u52a0\u4e86\u4e8b\u4ef6\u89e6\u53d1\u5668\uff0c\u4ee5\u89e6\u53d1\u5730\u56fe\u66f4\u65b0\u65b0\u7684\u7b5b\u9009\u6761\u4ef6\u3002\n\n\u4ee5\u4e0b\u662f\u5b8c\u6574\u6f14\u793a\u4ee3\u7801\uff1a\n\n$code_map_airbnb\n\n## \u6b65\u9aa4 4-\u90e8\u7f72 Deployment \ud83e\udd17\n\n\u5982\u679c\u4f60\u8fd0\u884c\u4e0a\u9762\u7684\u4ee3\u7801\uff0c\u4f60\u7684\u5e94\u7528\u7a0b\u5e8f\u5c06\u5728\u672c\u5730\u8fd0\u884c\u3002\n\u5982\u679c\u8981\u83b7\u53d6\u4e34\u65f6\u5171\u4eab\u94fe\u63a5\uff0c\u53ef\u4ee5\u5c06 `share=True` \u53c2\u6570\u4f20\u9012\u7ed9 `launch`\u3002\n\n\u4f46\u5982\u679c\u4f60\u60f3\u8981\u4e00\u4e2a\u6c38\u4e45\u7684\u90e8\u7f72\u89e3\u51b3\u65b9\u6848\u5462\uff1f\n\u8ba9\u6211\u4eec\u5c06\u6211\u4eec\u7684 Gradio \u5e94\u7528\u7a0b\u5e8f\u90e8\u7f72\u5230\u514d\u8d39\u7684 HuggingFace Spaces \u5e73\u53f0\u3002\n\n\u5982\u679c\u4f60\u4ee5\u524d\u6ca1\u6709\u4f7f\u7528\u8fc7 Spaces\uff0c\u8bf7\u6309\u7167\u4e4b\u524d\u7684\u6307\u5357[\u8fd9\u91cc](/using_hugging_face_integrations)\u3002\n\n## \u7ed3\u8bba \ud83c\udf89",
      "## \u7ed3\u8bba \ud83c\udf89\n\n\u4f60\u5df2\u7ecf\u5b8c\u6210\u4e86\uff01\u8fd9\u662f\u6784\u5efa\u5730\u56fe\u6f14\u793a\u6240\u9700\u7684\u6240\u6709\u4ee3\u7801\u3002\n\n\u94fe\u63a5\u5230\u6f14\u793a\uff1a[\u5730\u56fe\u6f14\u793a](https://huggingface.co/spaces/gradio/map_airbnb)\u548c[\u5b8c\u6574\u4ee3\u7801](https://huggingface.co/spaces/gradio/map_airbnb/blob/main/run.py)\uff08\u5728 Hugging Face Spaces\uff09",
      "SE-ResNet\n\n**SE ResNet** is a variant of a [ResNet](https://www.paperswithcode.com/method/resnet) that employs [squeeze-and-excitation blocks](https://paperswithcode.com/method/squeeze-and-excitation-block) to enable the network to perform dynamic channel-wise feature recalibration.\n\n## How do I use this model on an image?\n\nTo load a pretrained model:\n\n```py\n>>> import timm\n>>> model = timm.create_model('seresnet152d', pretrained=True)\n>>> model.eval()\n```\n\nTo load and preprocess the image:\n\n```py \n>>> import urllib\n>>> from PIL import Image\n>>> from timm.data import resolve_data_config\n>>> from timm.data.transforms_factory import create_transform\n\n>>> config = resolve_data_config({}, model=model)\n>>> transform = create_transform(**config)\n\n>>> url, filename = (\"https://github.com/pytorch/hub/raw/master/images/dog.jpg\", \"dog.jpg\")\n>>> urllib.request.urlretrieve(url, filename)\n>>> img = Image.open(filename).convert('RGB')\n>>> tensor = transform(img).unsqueeze(0) # transform and add batch dimension\n```\n\nTo get the model predictions:\n\n```py\n>>> import torch\n>>> with torch.no_grad():\n...     out = model(tensor)\n>>> probabilities = torch.nn.functional.softmax(out[0], dim=0)\n>>> print(probabilities.shape)\n>>> # prints: torch.Size([1000])\n```\n\nTo get the top-5 predictions class names:\n\n```py\n>>> # Get imagenet class mappings\n>>> url, filename = (\"https://raw.githubusercontent.com/pytorch/hub/master/imagenet_classes.txt\", \"imagenet_classes.txt\")\n>>> urllib.request.urlretrieve(url, filename) \n>>> with open(\"imagenet_classes.txt\", \"r\") as f:\n...     categories = [s.strip() for s in f.readlines()]",
      ">>> # Print top categories per image\n>>> top5_prob, top5_catid = torch.topk(probabilities, 5)\n>>> for i in range(top5_prob.size(0)):\n...     print(categories[top5_catid[i]], top5_prob[i].item())\n>>> # prints class names and probabilities like:\n>>> # [('Samoyed', 0.6425196528434753), ('Pomeranian', 0.04062102362513542), ('keeshond', 0.03186424449086189), ('white wolf', 0.01739676296710968), ('Eskimo dog', 0.011717947199940681)]\n```\n\nReplace the model name with the variant you want to use, e.g. `seresnet152d`. You can find the IDs in the model summaries at the top of this page.\n\nTo extract image features with this model, follow the [timm feature extraction examples](../feature_extraction), just change the name of the model you want to use.\n\n## How do I finetune this model?\n\nYou can finetune any of the pre-trained models just by changing the classifier (the last layer).\n\n```py\n>>> model = timm.create_model('seresnet152d', pretrained=True, num_classes=NUM_FINETUNE_CLASSES)\n```\nTo finetune on your own dataset, you have to write a training loop or adapt [timm's training\nscript](https://github.com/rwightman/pytorch-image-models/blob/master/train.py) to use your dataset.\n\n## How do I train this model?\n\nYou can follow the [timm recipe scripts](../scripts) for training a new model afresh.\n\n## Citation",
      "## Citation\n\n```BibTeX\n@misc{hu2019squeezeandexcitation,\n      title={Squeeze-and-Excitation Networks}, \n      author={Jie Hu and Li Shen and Samuel Albanie and Gang Sun and Enhua Wu},\n      year={2019},\n      eprint={1709.01507},\n      archivePrefix={arXiv},\n      primaryClass={cs.CV}\n}\n```",
      "<!--\nType: model-index\nCollections:\n- Name: SE ResNet\n  Paper:\n    Title: Squeeze-and-Excitation Networks\n    URL: https://paperswithcode.com/paper/squeeze-and-excitation-networks\nModels:\n- Name: seresnet152d\n  In Collection: SE ResNet\n  Metadata:\n    FLOPs: 20161904304\n    Parameters: 66840000\n    File Size: 268144497\n    Architecture:\n    - 1x1 Convolution\n    - Batch Normalization\n    - Bottleneck Residual Block\n    - Convolution\n    - Global Average Pooling\n    - Max Pooling\n    - ReLU\n    - Residual Block\n    - Residual Connection\n    - Softmax\n    - Squeeze-and-Excitation Block\n    Tasks:\n    - Image Classification\n    Training Techniques:\n    - Label Smoothing\n    - SGD with Momentum\n    - Weight Decay\n    Training Data:\n    - ImageNet\n    Training Resources: 8x NVIDIA Titan X GPUs\n    ID: seresnet152d\n    LR: 0.6\n    Epochs: 100\n    Layers: 152\n    Dropout: 0.2\n    Crop Pct: '0.94'\n    Momentum: 0.9\n    Batch Size: 1024\n    Image Size: '256'\n    Interpolation: bicubic\n  Code: https://github.com/rwightman/pytorch-image-models/blob/a7f95818e44b281137503bcf4b3e3e94d8ffa52f/timm/models/resnet.py#L1206",
      "Weights: https://github.com/rwightman/pytorch-image-models/releases/download/v0.1-weights/seresnet152d_ra2-04464dd2.pth\n  Results:\n  - Task: Image Classification\n    Dataset: ImageNet\n    Metrics:\n      Top 1 Accuracy: 83.74%\n      Top 5 Accuracy: 96.77%\n- Name: seresnet50\n  In Collection: SE ResNet\n  Metadata:\n    FLOPs: 5285062320\n    Parameters: 28090000\n    File Size: 112621903\n    Architecture:\n    - 1x1 Convolution\n    - Batch Normalization\n    - Bottleneck Residual Block\n    - Convolution\n    - Global Average Pooling\n    - Max Pooling\n    - ReLU\n    - Residual Block\n    - Residual Connection\n    - Softmax\n    - Squeeze-and-Excitation Block\n    Tasks:\n    - Image Classification\n    Training Techniques:\n    - Label Smoothing\n    - SGD with Momentum\n    - Weight Decay\n    Training Data:\n    - ImageNet\n    Training Resources: 8x NVIDIA Titan X GPUs\n    ID: seresnet50\n    LR: 0.6\n    Epochs: 100\n    Layers: 50\n    Dropout: 0.2\n    Crop Pct: '0.875'\n    Momentum: 0.9\n    Batch Size: 1024\n    Image Size: '224'\n    Interpolation: bicubic\n  Code: https://github.com/rwightman/pytorch-image-models/blob/a7f95818e44b281137503bcf4b3e3e94d8ffa52f/timm/models/resnet.py#L1180",
      "Weights: https://github.com/rwightman/pytorch-image-models/releases/download/v0.1-weights/seresnet50_ra_224-8efdb4bb.pth\n  Results:\n  - Task: Image Classification\n    Dataset: ImageNet\n    Metrics:\n      Top 1 Accuracy: 80.26%\n      Top 5 Accuracy: 95.07%\n-->"
    ]
  },
  {
    "chunk_size": 600,
    "chunk_overlap": 0,
    "limit": 10,
    "texts": [
      "Create an Endpoint\n\nAfter your first login, you will be directed to the [Endpoint creation page](https://ui.endpoints.huggingface.co/new). As an example, this guide will go through the steps to deploy [distilbert-base-uncased-finetuned-sst-2-english](https://huggingface.co/distilbert-base-uncased-finetuned-sst-2-english) for text classification. \n\n## 1. Enter the Hugging Face Repository ID and your desired endpoint name:\n\n<img src=\"https://raw.githubusercontent.com/huggingface/hf-endpoints-documentation/main/assets/1_repository.png\" alt=\"select repository\" />\n\n## 2. Select your Cloud Provider and region. Initially, only AWS will be available as a Cloud Provider with the `us-east-1` and `eu-west-1` regions. We will add Azure soon, and if you need to test Endpoints with other Cloud Providers or regions, please let us know.\n\n<img src=\"https://raw.githubusercontent.com/huggingface/hf-endpoints-documentation/main/assets/1_region.png\" alt=\"select region\" />\n\n## 3. Define the [Security Level](security) for the Endpoint:\n\n<img src=\"https://raw.githubusercontent.com/huggingface/hf-endpoints-documentation/main/assets/1_security.png\" alt=\"define security\" />\n\n## 4. Create your Endpoint by clicking **Create Endpoint**. By default, your Endpoint is created with a medium CPU (2 x 4GB vCPUs with Intel Xeon Ice Lake) The cost estimate assumes the Endpoint will be up for an entire month, and does not take autoscaling into account.\n\n<img src=\"https://raw.githubusercontent.com/huggingface/hf-endpoints-documentation/main/assets/1_create_cost.png\" alt=\"create endpoint\" />\n\n## 5. Wait for the Endpoint to build, initialize and run which can take between 1 to 5 minutes.\n\n<img src=\"https://raw.githubusercontent.com/huggingface/hf-endpoints-documentation/main/assets/overview.png\" alt=\"overview\" />\n\n## 6. Test your Endpoint in the overview with the Inference widget \ud83c\udfc1 \ud83c\udf89!\n\n<img src=\"https://raw.githubusercontent.com/huggingface/hf-endpoints-documentation/main/assets/1_inference.png\" alt=\"run inference\" />",
      "Choosing a metric for your task\n\n**So you've trained your model and want to see how well it\u2019s doing on a dataset of your choice. Where do you start?**\n\nThere is no \u201cone size fits all\u201d approach to choosing an evaluation metric, but some good guidelines to keep in mind are:\n\n## Categories of metrics\n\nThere are 3 high-level categories of metrics:\n\n1. *Generic metrics*, which can be applied to a variety of situations and datasets, such as precision and accuracy.\n2. *Task-specific metrics*, which are limited to a given task, such as Machine Translation (often evaluated using metrics [BLEU](https://huggingface.co/metrics/bleu) or [ROUGE](https://huggingface.co/metrics/rouge)) or Named Entity Recognition (often evaluated with [seqeval](https://huggingface.co/metrics/seqeval)).\n3. *Dataset-specific metrics*, which aim to measure model performance on specific benchmarks: for instance, the [GLUE benchmark](https://huggingface.co/datasets/glue) has a dedicated [evaluation metric](https://huggingface.co/metrics/glue).\n\nLet's look at each of these three cases:\n\n### Generic metrics\n\nMany of the metrics used in the Machine Learning community are quite generic and can be applied in a variety of tasks and datasets.\n\nThis is the case for metrics like [accuracy](https://huggingface.co/metrics/accuracy) and [precision](https://huggingface.co/metrics/precision), which can be used for evaluating labeled (supervised) datasets, as well as [perplexity](https://huggingface.co/metrics/perplexity), which can be used for evaluating different kinds of (unsupervised) generative tasks.\n\nTo see the input structure of a given metric, you can look at its metric card. For example, in the case of [precision](https://huggingface.co/metrics/precision), the format is:\n```\n>>> precision_metric = evaluate.load(\"precision\")\n>>> results = precision_metric.compute(references=[0, 1], predictions=[0, 1])\n>>> print(results)\n{'precision': 1.0}\n```\n\n### Task-specific metrics\n\nPopular ML tasks like Machine Translation and Named Entity Recognition have specific metrics that can be used to compare models. For example, a series of different metrics have been proposed for text generation, ranging from [BLEU](https://huggingface.co/metrics/bleu) and its derivatives such as [GoogleBLEU](https://huggingface.co/metrics/google_bleu) and [GLEU](https://huggingface.co/metrics/gleu), but also [ROUGE](https://huggingface.co/metrics/rouge), [MAUVE](https://huggingface.co/metrics/mauve), etc.",
      "You can find the right metric for your task by:\n\n- **Looking at the [Task pages](https://huggingface.co/tasks)** to see what metrics can be used for evaluating models for a given task.\n- **Checking out leaderboards** on sites like [Papers With Code](https://paperswithcode.com/) (you can search by task and by dataset).\n-  **Reading the metric cards** for the relevant metrics and see which ones are a good fit for your use case. For example, see the [BLEU metric card](https://github.com/huggingface/evaluate/tree/main/metrics/bleu) or [SQuaD metric card](https://github.com/huggingface/evaluate/tree/main/metrics/squad).\n- **Looking at papers and blog posts** published on the topic and see what metrics they report. This can change over time, so try to pick papers from the last couple of years!\n\n### Dataset-specific metrics\n\nSome datasets have specific metrics associated with them -- this is especially in the case of popular benchmarks like [GLUE](https://huggingface.co/metrics/glue) and [SQuAD](https://huggingface.co/metrics/squad).\n\n<Tip warning={true}>\n\ud83d\udca1\nGLUE is actually a collection of different subsets on different tasks, so first you need to choose the one that corresponds to the NLI task, such as mnli, which is described as \u201ccrowdsourced collection of sentence pairs with textual entailment annotations\u201d\n</Tip>\n\n\nIf you are evaluating your model on a benchmark dataset like the ones mentioned above, you can use its dedicated evaluation metric. Make sure you respect the format that they require. For example, to evaluate your model on the [SQuAD](https://huggingface.co/datasets/squad) dataset, you need to feed the `question` and `context` into your model and return the `prediction_text`, which should be compared with the `references` (based on matching the `id` of the question) :\n\n```\n>>> from evaluate import load\n>>> squad_metric = load(\"squad\")\n>>> predictions = [{'prediction_text': '1976', 'id': '56e10a3be3433e1400422b22'}]\n>>> references = [{'answers': {'answer_start': [97], 'text': ['1976']}, 'id': '56e10a3be3433e1400422b22'}]\n>>> results = squad_metric.compute(predictions=predictions, references=references)\n>>> results\n{'exact_match': 100.0, 'f1': 100.0}\n```\n\nYou can find examples of dataset structures by consulting the \"Dataset Preview\" function or the dataset card for a given dataset, and you can see how to use its dedicated evaluation function based on the metric card.",
      "\u4e3b\u8981\u7279\u70b9\n\n\u8ba9\u6211\u4eec\u6765\u4ecb\u7ecd\u4e00\u4e0b Gradio \u6700\u53d7\u6b22\u8fce\u7684\u4e00\u4e9b\u529f\u80fd\uff01\u8fd9\u91cc\u662f Gradio \u7684\u4e3b\u8981\u7279\u70b9\uff1a\n\n1. [\u6dfb\u52a0\u793a\u4f8b\u8f93\u5165](#example-inputs)\n2. [\u4f20\u9012\u81ea\u5b9a\u4e49\u9519\u8bef\u6d88\u606f](#errors)\n3. [\u6dfb\u52a0\u63cf\u8ff0\u5185\u5bb9](#descriptive-content)\n4. [\u8bbe\u7f6e\u65d7\u6807](#flagging)\n5. [\u9884\u5904\u7406\u548c\u540e\u5904\u7406](#preprocessing-and-postprocessing)\n6. [\u6837\u5f0f\u5316\u6f14\u793a](#styling)\n7. [\u6392\u961f\u7528\u6237](#queuing)\n8. [\u8fed\u4ee3\u8f93\u51fa](#iterative-outputs)\n9. [\u8fdb\u5ea6\u6761](#progress-bars)\n10. [\u6279\u5904\u7406\u51fd\u6570](#batch-functions)\n11. [\u5728\u534f\u4f5c\u7b14\u8bb0\u672c\u4e0a\u8fd0\u884c](#colab-notebooks)\n\n## \u793a\u4f8b\u8f93\u5165\n\n\u60a8\u53ef\u4ee5\u63d0\u4f9b\u7528\u6237\u53ef\u4ee5\u8f7b\u677e\u52a0\u8f7d\u5230 \"Interface\" \u4e2d\u7684\u793a\u4f8b\u6570\u636e\u3002\u8fd9\u5bf9\u4e8e\u6f14\u793a\u6a21\u578b\u671f\u671b\u7684\u8f93\u5165\u7c7b\u578b\u4ee5\u53ca\u6f14\u793a\u6570\u636e\u96c6\u548c\u6a21\u578b\u4e00\u8d77\u63a2\u7d22\u7684\u65b9\u5f0f\u975e\u5e38\u6709\u5e2e\u52a9\u3002\u8981\u52a0\u8f7d\u793a\u4f8b\u6570\u636e\uff0c\u60a8\u53ef\u4ee5\u5c06\u5d4c\u5957\u5217\u8868\u63d0\u4f9b\u7ed9 Interface \u6784\u9020\u51fd\u6570\u7684 `examples=` \u5173\u952e\u5b57\u53c2\u6570\u3002\u5916\u90e8\u5217\u8868\u4e2d\u7684\u6bcf\u4e2a\u5b50\u5217\u8868\u8868\u793a\u4e00\u4e2a\u6570\u636e\u6837\u672c\uff0c\u5b50\u5217\u8868\u4e2d\u7684\u6bcf\u4e2a\u5143\u7d20\u8868\u793a\u6bcf\u4e2a\u8f93\u5165\u7ec4\u4ef6\u7684\u8f93\u5165\u3002\u6709\u5173\u6bcf\u4e2a\u7ec4\u4ef6\u7684\u793a\u4f8b\u6570\u636e\u683c\u5f0f\u5728[Docs](https://gradio.app/docs#components)\u4e2d\u6709\u8bf4\u660e\u3002\n\n$code_calculator\n$demo_calculator\n\n\u60a8\u53ef\u4ee5\u5c06\u5927\u578b\u6570\u636e\u96c6\u52a0\u8f7d\u5230\u793a\u4f8b\u4e2d\uff0c\u901a\u8fc7 Gradio \u6d4f\u89c8\u548c\u4e0e\u6570\u636e\u96c6\u8fdb\u884c\u4ea4\u4e92\u3002\u793a\u4f8b\u5c06\u81ea\u52a8\u5206\u9875\uff08\u53ef\u4ee5\u901a\u8fc7 Interface \u7684 `examples_per_page` \u53c2\u6570\u8fdb\u884c\u914d\u7f6e\uff09\u3002\n\n\u7ee7\u7eed\u4e86\u89e3\u793a\u4f8b\uff0c\u8bf7\u53c2\u9605[\u66f4\u591a\u793a\u4f8b](https://gradio.app/more-on-examples)\u6307\u5357\u3002\n\n## \u9519\u8bef\n\n\u60a8\u5e0c\u671b\u5411\u7528\u6237\u4f20\u9012\u81ea\u5b9a\u4e49\u9519\u8bef\u6d88\u606f\u3002\u4e3a\u6b64\uff0cwith `gr.Error(\"custom message\")` \u6765\u663e\u793a\u9519\u8bef\u6d88\u606f\u3002\u5982\u679c\u5728\u4e0a\u9762\u7684\u8ba1\u7b97\u5668\u793a\u4f8b\u4e2d\u5c1d\u8bd5\u9664\u4ee5\u96f6\uff0c\u5c06\u663e\u793a\u81ea\u5b9a\u4e49\u9519\u8bef\u6d88\u606f\u7684\u5f39\u51fa\u6a21\u6001\u7a97\u53e3\u3002\u4e86\u89e3\u6709\u5173\u9519\u8bef\u7684\u66f4\u591a\u4fe1\u606f\uff0c\u8bf7\u53c2\u9605[\u6587\u6863](https://gradio.app/docs#error)\u3002\n\n## \u63cf\u8ff0\u6027\u5185\u5bb9\n\n\u5728\u524d\u9762\u7684\u793a\u4f8b\u4e2d\uff0c\u60a8\u53ef\u80fd\u5df2\u7ecf\u6ce8\u610f\u5230 Interface \u6784\u9020\u51fd\u6570\u4e2d\u7684 `title=` \u548c `description=` \u5173\u952e\u5b57\u53c2\u6570\uff0c\u5e2e\u52a9\u7528\u6237\u4e86\u89e3\u60a8\u7684\u5e94\u7528\u7a0b\u5e8f\u3002",
      "Interface \u6784\u9020\u51fd\u6570\u4e2d\u6709\u4e09\u4e2a\u53c2\u6570\u7528\u4e8e\u6307\u5b9a\u6b64\u5185\u5bb9\u5e94\u653e\u7f6e\u5728\u54ea\u91cc\uff1a\n\n- `title`\uff1a\u63a5\u53d7\u6587\u672c\uff0c\u5e76\u53ef\u4ee5\u5c06\u5176\u663e\u793a\u5728\u754c\u9762\u7684\u9876\u90e8\uff0c\u4e5f\u5c06\u6210\u4e3a\u9875\u9762\u6807\u9898\u3002\n- `description`\uff1a\u63a5\u53d7\u6587\u672c\u3001Markdown \u6216 HTML\uff0c\u5e76\u5c06\u5176\u653e\u7f6e\u5728\u6807\u9898\u6b63\u4e0b\u65b9\u3002\n- `article`\uff1a\u4e5f\u63a5\u53d7\u6587\u672c\u3001Markdown \u6216 HTML\uff0c\u5e76\u5c06\u5176\u653e\u7f6e\u5728\u754c\u9762\u4e0b\u65b9\u3002\n\n![annotated](/assets/guides/annotated.png)\n\n\u5982\u679c\u60a8\u4f7f\u7528\u7684\u662f `Blocks` API\uff0c\u5219\u53ef\u4ee5 with `gr.Markdown(...)` \u6216 `gr.HTML(...)` \u7ec4\u4ef6\u5728\u4efb\u4f55\u4f4d\u7f6e\u63d2\u5165\u6587\u672c\u3001Markdown \u6216 HTML\uff0c\u5176\u4e2d\u63cf\u8ff0\u6027\u5185\u5bb9\u4f4d\u4e8e `Component` \u6784\u9020\u51fd\u6570\u5185\u90e8\u3002\n\n\u53e6\u4e00\u4e2a\u6709\u7528\u7684\u5173\u952e\u5b57\u53c2\u6570\u662f `label=`\uff0c\u5b83\u5b58\u5728\u4e8e\u6bcf\u4e2a `Component` \u4e2d\u3002\u8fd9\u4fee\u6539\u4e86\u6bcf\u4e2a `Component` \u9876\u90e8\u7684\u6807\u7b7e\u6587\u672c\u3002\u8fd8\u53ef\u4ee5\u4e3a\u8bf8\u5982 `Textbox` \u6216 `Radio` \u4e4b\u7c7b\u7684\u8868\u5355\u5143\u7d20\u6dfb\u52a0 `info=` \u5173\u952e\u5b57\u53c2\u6570\uff0c\u4ee5\u63d0\u4f9b\u6709\u5173\u5176\u7528\u6cd5\u7684\u8fdb\u4e00\u6b65\u4fe1\u606f\u3002\n\n```python\ngr.Number(label='\u5e74\u9f84', info='\u4ee5\u5e74\u4e3a\u5355\u4f4d\uff0c\u5fc5\u987b\u5927\u4e8e0')\n```\n\n## \u65d7\u6807\n\n\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\"Interface\" \u5c06\u6709\u4e00\u4e2a \"Flag\" \u6309\u94ae\u3002\u5f53\u7528\u6237\u6d4b\u8bd5\u60a8\u7684 `Interface` \u65f6\uff0c\u5982\u679c\u770b\u5230\u6709\u8da3\u7684\u8f93\u51fa\uff0c\u4f8b\u5982\u9519\u8bef\u6216\u610f\u5916\u7684\u6a21\u578b\u884c\u4e3a\uff0c\u4ed6\u4eec\u53ef\u4ee5\u5c06\u8f93\u5165\u6807\u8bb0\u4e3a\u60a8\u8fdb\u884c\u67e5\u770b\u3002\u5728\u7531 `Interface` \u6784\u9020\u51fd\u6570\u7684 `flagging_dir=` \u53c2\u6570\u63d0\u4f9b\u7684\u76ee\u5f55\u4e2d\uff0c\u5c06\u8bb0\u5f55\u6807\u8bb0\u7684\u8f93\u5165\u5230\u4e00\u4e2a CSV \u6587\u4ef6\u4e2d\u3002\u5982\u679c\u754c\u9762\u6d89\u53ca\u6587\u4ef6\u6570\u636e\uff0c\u4f8b\u5982\u56fe\u50cf\u548c\u97f3\u9891\u7ec4\u4ef6\uff0c\u5c06\u521b\u5efa\u6587\u4ef6\u5939\u6765\u5b58\u50a8\u8fd9\u4e9b\u6807\u8bb0\u7684\u6570\u636e\u3002\n\n\u4f8b\u5982\uff0c\u5bf9\u4e8e\u4e0a\u9762\u663e\u793a\u7684\u8ba1\u7b97\u5668\u754c\u9762\uff0c\u6211\u4eec\u5c06\u5728\u4e0b\u9762\u7684\u65d7\u6807\u76ee\u5f55\u4e2d\u5b58\u50a8\u6807\u8bb0\u7684\u6570\u636e\uff1a\n\n```directory\n+-- calculator.py\n+-- flagged/\n|   +-- logs.csv\n```\n\n_flagged/logs.csv_\n\n```csv\nnum1,operation,num2,Output\n5,add,7,12\n6,subtract,1.5,4.5\n```\n\n\u4e0e\u65e9\u671f\u663e\u793a\u7684\u51b7\u8272\u754c\u9762\u76f8\u5bf9\u5e94\uff0c\u6211\u4eec\u5c06\u5728\u4e0b\u9762\u7684\u65d7\u6807\u76ee\u5f55\u4e2d\u5b58\u50a8\u6807\u8bb0\u7684\u6570\u636e\uff1a",
      "```directory\n+-- sepia.py\n+-- flagged/\n|   +-- logs.csv\n|   +-- im/\n|   |   +-- 0.png\n|   |   +-- 1.png\n|   +-- Output/\n|   |   +-- 0.png\n|   |   +-- 1.png\n```\n\n_flagged/logs.csv_\n\n```csv\nim,Output\nim/0.png,Output/0.png\nim/1.png,Output/1.png\n```\n\n\u5982\u679c\u60a8\u5e0c\u671b\u7528\u6237\u63d0\u4f9b\u65d7\u6807\u539f\u56e0\uff0c\u53ef\u4ee5\u5c06\u5b57\u7b26\u4e32\u5217\u8868\u4f20\u9012\u7ed9 Interface \u7684 `flagging_options` \u53c2\u6570\u3002\u7528\u6237\u5728\u8fdb\u884c\u65d7\u6807\u65f6\u5fc5\u987b\u9009\u62e9\u5176\u4e2d\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u8fd9\u5c06\u4f5c\u4e3a\u9644\u52a0\u5217\u4fdd\u5b58\u5230 CSV \u4e2d\u3002\n\n## \u9884\u5904\u7406\u548c\u540e\u5904\u7406 (Preprocessing and Postprocessing)\n\n![annotated](/assets/img/dataflow.svg)\n\n\u5982\u60a8\u6240\u89c1\uff0cGradio \u5305\u62ec\u53ef\u4ee5\u5904\u7406\u5404\u79cd\u4e0d\u540c\u6570\u636e\u7c7b\u578b\u7684\u7ec4\u4ef6\uff0c\u4f8b\u5982\u56fe\u50cf\u3001\u97f3\u9891\u548c\u89c6\u9891\u3002\u5927\u591a\u6570\u7ec4\u4ef6\u90fd\u53ef\u4ee5\u7528\u4f5c\u8f93\u5165\u6216\u8f93\u51fa\u3002\n\n\u5f53\u7ec4\u4ef6\u7528\u4f5c\u8f93\u5165\u65f6\uff0cGradio \u81ea\u52a8\u5904\u7406*\u9884\u5904\u7406*\uff0c\u5c06\u6570\u636e\u4ece\u7528\u6237\u6d4f\u89c8\u5668\u53d1\u9001\u7684\u7c7b\u578b\uff08\u4f8b\u5982\u7f51\u7edc\u6444\u50cf\u5934\u5feb\u7167\u7684 base64 \u8868\u793a\uff09\u8f6c\u6362\u4e3a\u60a8\u7684\u51fd\u6570\u53ef\u4ee5\u63a5\u53d7\u7684\u5f62\u5f0f\uff08\u4f8b\u5982 `numpy` \u6570\u7ec4\uff09\u3002\n\n\u540c\u6837\uff0c\u5f53\u7ec4\u4ef6\u7528\u4f5c\u8f93\u51fa\u65f6\uff0cGradio \u81ea\u52a8\u5904\u7406*\u540e\u5904\u7406*\uff0c\u5c06\u6570\u636e\u4ece\u51fd\u6570\u8fd4\u56de\u7684\u5f62\u5f0f\uff08\u4f8b\u5982\u56fe\u50cf\u8def\u5f84\u5217\u8868\uff09\u8f6c\u6362\u4e3a\u53ef\u4ee5\u5728\u7528\u6237\u6d4f\u89c8\u5668\u4e2d\u663e\u793a\u7684\u5f62\u5f0f\uff08\u4f8b\u5982\u4ee5 base64 \u683c\u5f0f\u663e\u793a\u56fe\u50cf\u7684 `Gallery`\uff09\u3002\n\n\u60a8\u53ef\u4ee5\u4f7f\u7528\u6784\u5efa\u56fe\u50cf\u7ec4\u4ef6\u65f6\u7684\u53c2\u6570\u63a7\u5236*\u9884\u5904\u7406*\u3002\u4f8b\u5982\uff0c\u5982\u679c\u60a8\u4f7f\u7528\u4ee5\u4e0b\u53c2\u6570\u5b9e\u4f8b\u5316 `Image` \u7ec4\u4ef6\uff0c\u5b83\u5c06\u5c06\u56fe\u50cf\u8f6c\u6362\u4e3a `PIL` \u7c7b\u578b\uff0c\u5e76\u5c06\u5176\u91cd\u5851\u4e3a`(100, 100)`\uff0c\u800c\u4e0d\u7ba1\u63d0\u4ea4\u65f6\u7684\u539f\u59cb\u5927\u5c0f\u5982\u4f55\uff1a\n\n```py\nimg = gr.Image(shape=(100, 100), type=\"pil\")\n```\n\n\u76f8\u53cd\uff0c\u8fd9\u91cc\u6211\u4eec\u4fdd\u7559\u56fe\u50cf\u7684\u539f\u59cb\u5927\u5c0f\uff0c\u4f46\u5728\u5c06\u5176\u8f6c\u6362\u4e3a numpy \u6570\u7ec4\u4e4b\u524d\u53cd\u8f6c\u989c\u8272\uff1a\n\n```py\nimg = gr.Image(invert_colors=True, type=\"numpy\")\n```\n\n\u540e\u5904\u7406\u8981\u5bb9\u6613\u5f97\u591a\uff01Gradio \u81ea\u52a8\u8bc6\u522b\u8fd4\u56de\u6570\u636e\u7684\u683c\u5f0f\uff08\u4f8b\u5982 `Image` \u662f `numpy` \u6570\u7ec4\u8fd8\u662f `str` \u6587\u4ef6\u8def\u5f84\uff1f\uff09\uff0c\u5e76\u5c06\u5176\u540e\u5904\u7406\u4e3a\u53ef\u4ee5\u7531\u6d4f\u89c8\u5668\u663e\u793a\u7684\u683c\u5f0f\u3002",
      "\u8bf7\u67e5\u770b[\u6587\u6863](https://gradio.app/docs)\uff0c\u4e86\u89e3\u6bcf\u4e2a\u7ec4\u4ef6\u7684\u6240\u6709\u4e0e\u9884\u5904\u7406\u76f8\u5173\u7684\u53c2\u6570\u3002\n\n## \u6837\u5f0f (Styling)\n\nGradio \u4e3b\u9898\u662f\u81ea\u5b9a\u4e49\u5e94\u7528\u7a0b\u5e8f\u5916\u89c2\u548c\u611f\u89c9\u7684\u6700\u7b80\u5355\u65b9\u6cd5\u3002\u60a8\u53ef\u4ee5\u9009\u62e9\u591a\u79cd\u4e3b\u9898\u6216\u521b\u5efa\u81ea\u5df1\u7684\u4e3b\u9898\u3002\u8981\u8fd9\u6837\u505a\uff0c\u8bf7\u5c06 `theme=` \u53c2\u6570\u4f20\u9012\u7ed9 `Interface` \u6784\u9020\u51fd\u6570\u3002\u4f8b\u5982\uff1a\n\n```python\ndemo = gr.Interface(..., theme=gr.themes.Monochrome())\n```\n\nGradio \u5e26\u6709\u4e00\u7ec4\u9884\u5148\u6784\u5efa\u7684\u4e3b\u9898\uff0c\u60a8\u53ef\u4ee5\u4ece `gr.themes.*` \u52a0\u8f7d\u3002\u60a8\u53ef\u4ee5\u6269\u5c55\u8fd9\u4e9b\u4e3b\u9898\u6216\u4ece\u5934\u5f00\u59cb\u521b\u5efa\u81ea\u5df1\u7684\u4e3b\u9898 - \u6709\u5173\u66f4\u591a\u8be6\u7ec6\u4fe1\u606f\uff0c\u8bf7\u53c2\u9605[\u4e3b\u9898\u6307\u5357](https://gradio.app/theming-guide)\u3002\n\n\u8981\u589e\u52a0\u989d\u5916\u7684\u6837\u5f0f\u80fd\u529b\uff0c\u60a8\u53ef\u4ee5 with `css=` \u5173\u952e\u5b57\u5c06\u4efb\u4f55 CSS \u4f20\u9012\u7ed9\u60a8\u7684\u5e94\u7528\u7a0b\u5e8f\u3002\nGradio \u5e94\u7528\u7a0b\u5e8f\u7684\u57fa\u7c7b\u662f `gradio-container`\uff0c\u56e0\u6b64\u4ee5\u4e0b\u662f\u4e00\u4e2a\u66f4\u6539 Gradio \u5e94\u7528\u7a0b\u5e8f\u80cc\u666f\u989c\u8272\u7684\u793a\u4f8b\uff1a\n\n```python\nwith `gr.Interface(css=\".gradio-container {background-color: red}\") as demo:\n    ...\n```\n\n## \u961f\u5217 (Queuing)\n\n\u5982\u679c\u60a8\u7684\u5e94\u7528\u7a0b\u5e8f\u9884\u8ba1\u4f1a\u6709\u5927\u91cf\u6d41\u91cf\uff0c\u8bf7 with `queue()` \u65b9\u6cd5\u6765\u63a7\u5236\u5904\u7406\u901f\u7387\u3002\u8fd9\u5c06\u6392\u961f\u5904\u7406\u8c03\u7528\uff0c\u56e0\u6b64\u4e00\u6b21\u53ea\u5904\u7406\u4e00\u5b9a\u6570\u91cf\u7684\u8bf7\u6c42\u3002\u961f\u5217\u4f7f\u7528 Websockets\uff0c\u8fd8\u53ef\u4ee5\u9632\u6b62\u7f51\u7edc\u8d85\u65f6\uff0c\u56e0\u6b64\u5982\u679c\u60a8\u7684\u51fd\u6570\u7684\u63a8\u7406\u65f6\u95f4\u5f88\u957f\uff08> 1 \u5206\u949f\uff09\uff0c\u5e94\u4f7f\u7528\u961f\u5217\u3002\n\nwith `Interface`\uff1a\n\n```python\ndemo = gr.Interface(...).queue()\ndemo.launch()\n```\n\nwith `Blocks`\uff1a\n\n```python\nwith gr.Blocks() as demo\uff1a\n    #...\ndemo.queue()\ndemo.launch()\n```\n\n\u60a8\u53ef\u4ee5\u901a\u8fc7\u4ee5\u4e0b\u65b9\u5f0f\u63a7\u5236\u4e00\u6b21\u5904\u7406\u7684\u8bf7\u6c42\u6570\u91cf\uff1a\n\n```python\ndemo.queue(concurrency_count=3)\n```\n\n\u67e5\u770b\u6709\u5173\u914d\u7f6e\u5176\u4ed6\u961f\u5217\u53c2\u6570\u7684[\u961f\u5217\u6587\u6863](/docs/#queue)\u3002\n\n\u5728 Blocks \u4e2d\u6307\u5b9a\u4ec5\u5bf9\u67d0\u4e9b\u51fd\u6570\u8fdb\u884c\u6392\u961f\uff1a",
      "```python\nwith gr.Blocks() as demo2\uff1a\n    num1 = gr.Number()\n    num2 = gr.Number()\n    output = gr.Number()\n    gr.Button(\"Add\").click(\n        lambda a, b: a + b, [num1, num2], output)\n    gr.Button(\"Multiply\").click(\n        lambda a, b: a * b, [num1, num2], output, queue=True)\ndemo2.launch()\n```\n\n## \u8fed\u4ee3\u8f93\u51fa (Iterative Outputs)\n\n\u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\uff0c\u60a8\u53ef\u80fd\u9700\u8981\u4f20\u8f93\u4e00\u7cfb\u5217\u8f93\u51fa\u800c\u4e0d\u662f\u4e00\u6b21\u663e\u793a\u5355\u4e2a\u8f93\u51fa\u3002\u4f8b\u5982\uff0c\u60a8\u53ef\u80fd\u6709\u4e00\u4e2a\u56fe\u50cf\u751f\u6210\u6a21\u578b\uff0c\u5e0c\u671b\u663e\u793a\u751f\u6210\u7684\u6bcf\u4e2a\u6b65\u9aa4\u7684\u56fe\u50cf\uff0c\u76f4\u5230\u6700\u7ec8\u56fe\u50cf\u3002\u6216\u8005\u60a8\u53ef\u80fd\u6709\u4e00\u4e2a\u804a\u5929\u673a\u5668\u4eba\uff0c\u5b83\u9010\u5b57\u9010\u53e5\u5730\u6d41\u5f0f\u4f20\u8f93\u54cd\u5e94\uff0c\u800c\u4e0d\u662f\u4e00\u6b21\u8fd4\u56de\u5168\u90e8\u54cd\u5e94\u3002\n\n\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u60a8\u53ef\u4ee5\u5c06**\u751f\u6210\u5668**\u51fd\u6570\u63d0\u4f9b\u7ed9 Gradio\uff0c\u800c\u4e0d\u662f\u5e38\u89c4\u51fd\u6570\u3002\u5728 Python \u4e2d\u521b\u5efa\u751f\u6210\u5668\u975e\u5e38\u7b80\u5355\uff1a\u51fd\u6570\u4e0d\u5e94\u8be5\u6709\u4e00\u4e2a\u5355\u72ec\u7684 `return` \u503c\uff0c\u800c\u662f\u5e94\u8be5 with `yield` \u8fde\u7eed\u8fd4\u56de\u4e00\u7cfb\u5217\u503c\u3002\u901a\u5e38\uff0c`yield` \u8bed\u53e5\u653e\u7f6e\u5728\u67d0\u79cd\u5faa\u73af\u4e2d\u3002\u4e0b\u9762\u662f\u4e00\u4e2a\u7b80\u5355\u793a\u4f8b\uff0c\u751f\u6210\u5668\u53ea\u662f\u7b80\u5355\u8ba1\u6570\u5230\u7ed9\u5b9a\u6570\u5b57\uff1a\n\n```python\ndef my_generator(x):\n    for i in range(x):\n        yield i\n```\n\n\u60a8\u4ee5\u4e0e\u5e38\u89c4\u51fd\u6570\u76f8\u540c\u7684\u65b9\u5f0f\u5c06\u751f\u6210\u5668\u63d0\u4f9b\u7ed9 Gradio\u3002\u4f8b\u5982\uff0c\u8fd9\u662f\u4e00\u4e2a\uff08\u865a\u62df\u7684\uff09\u56fe\u50cf\u751f\u6210\u6a21\u578b\uff0c\u5b83\u5728\u8f93\u51fa\u56fe\u50cf\u4e4b\u524d\u751f\u6210\u6570\u4e2a\u6b65\u9aa4\u7684\u566a\u97f3\uff1a\n\n$code_fake_diffusion\n$demo_fake_diffusion\n\n\u8bf7\u6ce8\u610f\uff0c\u6211\u4eec\u5728\u8fed\u4ee3\u5668\u4e2d\u6dfb\u52a0\u4e86 `time.sleep(1)`\uff0c\u4ee5\u521b\u5efa\u6b65\u9aa4\u4e4b\u95f4\u7684\u4eba\u5de5\u6682\u505c\uff0c\u4ee5\u4fbf\u60a8\u53ef\u4ee5\u89c2\u5bdf\u8fed\u4ee3\u5668\u7684\u6b65\u9aa4\uff08\u5728\u771f\u5b9e\u7684\u56fe\u50cf\u751f\u6210\u6a21\u578b\u4e2d\uff0c\u8fd9\u53ef\u80fd\u662f\u4e0d\u5fc5\u8981\u7684\uff09\u3002\n\n\u5c06\u751f\u6210\u5668\u63d0\u4f9b\u7ed9 Gradio **\u9700\u8981**\u5728\u5e95\u5c42 Interface \u6216 Blocks \u4e2d\u542f\u7528\u961f\u5217\uff08\u8bf7\u53c2\u9605\u4e0a\u9762\u7684\u961f\u5217\u90e8\u5206\uff09\u3002\n\n## \u8fdb\u5ea6\u6761",
      "Gradio \u652f\u6301\u521b\u5efa\u81ea\u5b9a\u4e49\u8fdb\u5ea6\u6761\uff0c\u4ee5\u4fbf\u60a8\u53ef\u4ee5\u81ea\u5b9a\u4e49\u548c\u63a7\u5236\u5411\u7528\u6237\u663e\u793a\u7684\u8fdb\u5ea6\u66f4\u65b0\u3002\u8981\u542f\u7528\u6b64\u529f\u80fd\uff0c\u53ea\u9700\u4e3a\u65b9\u6cd5\u6dfb\u52a0\u4e00\u4e2a\u9ed8\u8ba4\u503c\u4e3a `gr.Progress` \u5b9e\u4f8b\u7684\u53c2\u6570\u5373\u53ef\u3002\u7136\u540e\uff0c\u60a8\u53ef\u4ee5\u76f4\u63a5\u8c03\u7528\u6b64\u5b9e\u4f8b\u5e76\u4f20\u5165 0 \u5230 1 \u4e4b\u95f4\u7684\u6d6e\u70b9\u6570\u6765\u66f4\u65b0\u8fdb\u5ea6\u7ea7\u522b\uff0c\u6216\u8005 with `Progress` \u5b9e\u4f8b\u7684 `tqdm()` \u65b9\u6cd5\u6765\u8ddf\u8e2a\u53ef\u8fed\u4ee3\u5bf9\u8c61\u4e0a\u7684\u8fdb\u5ea6\uff0c\u5982\u4e0b\u6240\u793a\u3002\u5fc5\u987b\u542f\u7528\u961f\u5217\u4ee5\u8fdb\u884c\u8fdb\u5ea6\u66f4\u65b0\u3002\n\n$code_progress_simple\n$demo_progress_simple\n\n\u5982\u679c\u60a8 with `tqdm` \u5e93\uff0c\u5e76\u4e14\u5e0c\u671b\u4ece\u51fd\u6570\u5185\u90e8\u7684\u4efb\u4f55 `tqdm.tqdm` \u81ea\u52a8\u62a5\u544a\u8fdb\u5ea6\u66f4\u65b0\uff0c\u8bf7\u5c06\u9ed8\u8ba4\u53c2\u6570\u8bbe\u7f6e\u4e3a `gr.Progress(track_tqdm=True)`\uff01\n\n## \u6279\u5904\u7406\u51fd\u6570 (Batch Functions)\n\nGradio \u652f\u6301\u4f20\u9012*\u6279\u5904\u7406*\u51fd\u6570\u3002\u6279\u5904\u7406\u51fd\u6570\u53ea\u662f\u63a5\u53d7\u8f93\u5165\u5217\u8868\u5e76\u8fd4\u56de\u9884\u6d4b\u5217\u8868\u7684\u51fd\u6570\u3002\n\n\u4f8b\u5982\uff0c\u8fd9\u662f\u4e00\u4e2a\u6279\u5904\u7406\u51fd\u6570\uff0c\u5b83\u63a5\u53d7\u4e24\u4e2a\u8f93\u5165\u5217\u8868\uff08\u4e00\u4e2a\u5355\u8bcd\u5217\u8868\u548c\u4e00\u4e2a\u6574\u6570\u5217\u8868\uff09\uff0c\u5e76\u8fd4\u56de\u4fee\u526a\u8fc7\u7684\u5355\u8bcd\u5217\u8868\u4f5c\u4e3a\u8f93\u51fa\uff1a\n\n```python\nimport time\n\ndef trim_words(words, lens):\n    trimmed_words = []\n    time.sleep(5)\n    for w, l in zip(words, lens):\n        trimmed_words.append(w[:int(l)])\n    return [trimmed_words]\n    for w, l in zip(words, lens):\n```\n\n\u4f7f\u7528\u6279\u5904\u7406\u51fd\u6570\u7684\u4f18\u70b9\u662f\uff0c\u5982\u679c\u542f\u7528\u4e86\u961f\u5217\uff0cGradio \u670d\u52a1\u5668\u53ef\u4ee5\u81ea\u52a8*\u6279\u5904\u7406*\u4f20\u5165\u7684\u8bf7\u6c42\u5e76\u5e76\u884c\u5904\u7406\u5b83\u4eec\uff0c\u4ece\u800c\u53ef\u80fd\u52a0\u5feb\u6f14\u793a\u901f\u5ea6\u3002\u4ee5\u4e0b\u662f Gradio \u4ee3\u7801\u7684\u793a\u4f8b\uff08\u8bf7\u6ce8\u610f `batch=True` \u548c `max_batch_size=16` - \u8fd9\u4e24\u4e2a\u53c2\u6570\u90fd\u53ef\u4ee5\u4f20\u9012\u7ed9\u4e8b\u4ef6\u89e6\u53d1\u5668\u6216 `Interface` \u7c7b\uff09\n\nwith `Interface`\uff1a\n\n```python\ndemo = gr.Interface(trim_words, [\"textbox\", \"number\"], [\"output\"],\n                    batch=True, max_batch_size=16)\ndemo.queue()\ndemo.launch()\n```\n\nwith `Blocks`\uff1a\n\n```python\nimport gradio as gr\n\nwith gr.Blocks() as demo:\n    with gr.Row():\n        word = gr.Textbox(label=\"word\")\n        leng = gr.Number(label=\"leng\")\n        output = gr.Textbox(label=\"Output\")\n    with gr.Row():\n        run = gr.Button()",
      "event = run.click(trim_words, [word, leng], output, batch=True, max_batch_size=16)\n\ndemo.queue()\ndemo.launch()\n```\n\n\u5728\u4e0a\u9762\u7684\u793a\u4f8b\u4e2d\uff0c\u53ef\u4ee5\u5e76\u884c\u5904\u7406 16 \u4e2a\u8bf7\u6c42\uff08\u603b\u63a8\u7406\u65f6\u95f4\u4e3a 5 \u79d2\uff09\uff0c\u800c\u4e0d\u662f\u5206\u522b\u5904\u7406\u6bcf\u4e2a\u8bf7\u6c42\uff08\u603b\u63a8\u7406\u65f6\u95f4\u4e3a 80 \u79d2\uff09\u3002\u8bb8\u591a Hugging Face \u7684 `transformers` \u548c `diffusers` \u6a21\u578b\u5728 Gradio \u7684\u6279\u5904\u7406\u6a21\u5f0f\u4e0b\u81ea\u7136\u5de5\u4f5c\uff1a\u8fd9\u662f[\u4f7f\u7528\u6279\u5904\u7406\u751f\u6210\u56fe\u50cf\u7684\u793a\u4f8b\u6f14\u793a](https://github.com/gradio-app/gradio/blob/main/demo/diffusers_with_batching/run.py)\n\n\u6ce8\u610f\uff1a\u4f7f\u7528 Gradio \u7684\u6279\u5904\u7406\u51fd\u6570 **requires** \u5728\u5e95\u5c42 Interface \u6216 Blocks \u4e2d\u542f\u7528\u961f\u5217\uff08\u8bf7\u53c2\u9605\u4e0a\u9762\u7684\u961f\u5217\u90e8\u5206\uff09\u3002\n\n## Gradio \u7b14\u8bb0\u672c (Colab Notebooks)\n\nGradio \u53ef\u4ee5\u5728\u4efb\u4f55\u8fd0\u884c Python \u7684\u5730\u65b9\u8fd0\u884c\uff0c\u5305\u62ec\u672c\u5730 Jupyter \u7b14\u8bb0\u672c\u548c\u534f\u4f5c\u7b14\u8bb0\u672c\uff0c\u5982[Google Colab](https://colab.research.google.com/)\u3002\u5bf9\u4e8e\u672c\u5730 Jupyter \u7b14\u8bb0\u672c\u548c Google Colab \u7b14\u8bb0\u672c\uff0cGradio \u5728\u672c\u5730\u670d\u52a1\u5668\u4e0a\u8fd0\u884c\uff0c\u60a8\u53ef\u4ee5\u5728\u6d4f\u89c8\u5668\u4e2d\u4e0e\u4e4b\u4ea4\u4e92\u3002\uff08\u6ce8\u610f\uff1a\u5bf9\u4e8e Google Colab\uff0c\u8fd9\u662f\u901a\u8fc7[\u670d\u52a1\u5de5\u4f5c\u5668\u96a7\u9053](https://github.com/tensorflow/tensorboard/blob/master/docs/design/colab_integration.md)\u5b9e\u73b0\u7684\uff0c\u60a8\u7684\u6d4f\u89c8\u5668\u9700\u8981\u542f\u7528 cookies\u3002\uff09\u5bf9\u4e8e\u5176\u4ed6\u8fdc\u7a0b\u7b14\u8bb0\u672c\uff0cGradio \u4e5f\u5c06\u5728\u670d\u52a1\u5668\u4e0a\u8fd0\u884c\uff0c\u4f46\u60a8\u9700\u8981\u4f7f\u7528[SSH \u96a7\u9053](https://coderwall.com/p/ohk6cg/remote-access-to-ipython-notebooks-via-ssh)\u5728\u672c\u5730\u6d4f\u89c8\u5668\u4e2d\u67e5\u770b\u5e94\u7528\u7a0b\u5e8f\u3002\u901a\u5e38\uff0c\u66f4\u7b80\u5355\u7684\u9009\u62e9\u662f\u4f7f\u7528 Gradio \u5185\u7f6e\u7684\u516c\u5171\u94fe\u63a5\uff0c[\u5728\u4e0b\u4e00\u7bc7\u6307\u5357\u4e2d\u8ba8\u8bba](/sharing-your-app/#sharing-demos)\u3002",
      "!--Copyright 2023 The HuggingFace Team. All rights reserved.\n\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\nthe License. You may obtain a copy of the License at\n\nhttp://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software distributed under the License is distributed on\nan \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n\n\u26a0\ufe0f Note that this file is in Markdown but contain specific syntax for our doc-builder (similar to MDX) that may not be\nrendered properly in your Markdown viewer.\n\n-->\n\n# Training on TPU with TensorFlow\n\n<Tip>\n\nIf you don't need long explanations and just want TPU code samples to get started with, check out [our TPU example notebook!](https://colab.research.google.com/github/huggingface/notebooks/blob/main/examples/tpu_training-tf.ipynb)\n\n</Tip>\n\n### What is a TPU?\n\nA TPU is a **Tensor Processing Unit.** They are hardware designed by Google, which are used to greatly speed up the tensor computations within neural networks, much like GPUs. They can be used for both network training and inference. They are generally accessed through Google\u2019s cloud services, but small TPUs can also be accessed directly for free through Google Colab and Kaggle Kernels.\n\nBecause [all TensorFlow models in \ud83e\udd17 Transformers are Keras models](https://huggingface.co/blog/tensorflow-philosophy), most of the methods in this document are generally applicable to TPU training for any Keras model! However, there are a few points that are specific to the HuggingFace ecosystem (hug-o-system?) of Transformers and Datasets, and we\u2019ll make sure to flag them up when we get to them.\n\n### What kinds of TPU are available?\n\nNew users are often very confused by the range of TPUs, and the different ways to access them. The first key distinction to understand is the difference between **TPU Nodes** and **TPU VMs.**\n\nWhen you use a **TPU Node**, you are effectively indirectly accessing a remote TPU. You will need a separate VM, which will initialize your network and data pipeline and then forward them to the remote node. When you use a TPU on Google Colab, you are accessing it in the **TPU Node** style.",
      "Using TPU Nodes can have some quite unexpected behaviour for people who aren\u2019t used to them! In particular, because the TPU is located on a physically different system to the machine you\u2019re running your Python code on, your data cannot be local to your machine - any data pipeline that loads from your machine\u2019s internal storage will totally fail! Instead, data must be stored in Google Cloud Storage where your data pipeline can still access it, even when the pipeline is running on the remote TPU node.\n\n<Tip>\n\nIf you can fit all your data in memory as `np.ndarray` or `tf.Tensor`, then you can `fit()` on that data even when using Colab or a TPU Node, without needing to upload it to Google Cloud Storage.\n\n</Tip>\n\n<Tip>\n\n**\ud83e\udd17Specific Hugging Face Tip\ud83e\udd17:** The methods `Dataset.to_tf_dataset()` and its higher-level wrapper `model.prepare_tf_dataset()` , which you will see throughout our TF code examples, will both fail on a TPU Node. The reason for this is that even though they create a `tf.data.Dataset` it is not a \u201cpure\u201d `tf.data` pipeline and uses `tf.numpy_function` or `Dataset.from_generator()` to stream data from the underlying HuggingFace `Dataset`. This HuggingFace `Dataset` is backed by data that is on a local disc and which the remote TPU Node will not be able to read.\n\n</Tip>\n\nThe second way to access a TPU is via a **TPU VM.** When using a TPU VM, you connect directly to the machine that the TPU is attached to, much like training on a GPU VM. TPU VMs are generally easier to work with, particularly when it comes to your data pipeline. All of the above warnings do not apply to TPU VMs!\n\nThis is an opinionated document, so here\u2019s our opinion: **Avoid using TPU Node if possible.** It is more confusing and more difficult to debug than TPU VMs. It is also likely to be unsupported in future - Google\u2019s latest TPU, TPUv4, can only be accessed as a TPU VM, which suggests that TPU Nodes are increasingly going to become a \u201clegacy\u201d access method. However, we understand that the only free TPU access is on Colab and Kaggle Kernels, which uses TPU Node - so we\u2019ll try to explain how to handle it if you have to! Check the [TPU example notebook](https://colab.research.google.com/github/huggingface/notebooks/blob/main/examples/tpu_training-tf.ipynb) for code samples that explain this in more detail.\n\n### What sizes of TPU are available?",
      "A single TPU (a v2-8/v3-8/v4-8) runs 8 replicas. TPUs exist in **pods** that can run hundreds or thousands of replicas simultaneously. When you use more than a single TPU but less than a whole pod (for example, a v3-32), your TPU fleet is referred to as a **pod slice.**\n\nWhen you access a free TPU via Colab, you generally get a single v2-8 TPU.\n\n### I keep hearing about this XLA thing. What\u2019s XLA, and how does it relate to TPUs?\n\nXLA is an optimizing compiler, used by both TensorFlow and JAX. In JAX it is the only compiler, whereas in TensorFlow it is optional (but mandatory on TPU!). The easiest way to enable it when training a Keras model is to pass the argument `jit_compile=True` to `model.compile()`. If you don\u2019t get any errors and performance is good, that\u2019s a great sign that you\u2019re ready to move to TPU!\n\nDebugging on TPU is generally a bit harder than on CPU/GPU, so we recommend getting your code running on CPU/GPU with XLA first before trying it on TPU. You don\u2019t have to train for long, of course - just for a few steps to make sure that your model and data pipeline are working like you expect them to.\n\n<Tip>\n\nXLA compiled code is usually faster - so even if you\u2019re not planning to run on TPU, adding `jit_compile=True` can improve your performance. Be sure to note the caveats below about XLA compatibility, though!\n\n</Tip>\n\n<Tip warning={true}>\n\n**Tip born of painful experience:** Although using `jit_compile=True` is a good way to get a speed boost and test if your CPU/GPU code is XLA-compatible, it can actually cause a lot of problems if you leave it in when actually training on TPU. XLA compilation will happen implicitly on TPU, so remember to remove that line before actually running your code on a TPU!\n\n</Tip>\n\n### How do I make my model XLA compatible?\n\nIn many cases, your code is probably XLA-compatible already! However, there are a few things that work in normal TensorFlow that don\u2019t work in XLA. We\u2019ve distilled them into three core rules below:\n\n<Tip>\n\n**\ud83e\udd17Specific HuggingFace Tip\ud83e\udd17:** We\u2019ve put a lot of effort into rewriting our TensorFlow models and loss functions to be XLA-compatible. Our models and loss functions generally obey rule #1 and #2 by default, so you can skip over them if you\u2019re using `transformers` models. Don\u2019t forget about these rules when writing your own models and loss functions, though!\n\n</Tip>",
      "#### XLA Rule #1: Your code cannot have \u201cdata-dependent conditionals\u201d\n\nWhat that means is that any `if` statement cannot depend on values inside a `tf.Tensor`. For example, this code block cannot be compiled with XLA!\n\n```python\nif tf.reduce_sum(tensor) > 10:\n    tensor = tensor / 2.0\n```\n\nThis might seem very restrictive at first, but most neural net code doesn\u2019t need to do this. You can often get around this restriction by using `tf.cond` (see the documentation [here](https://www.tensorflow.org/api_docs/python/tf/cond)) or by removing the conditional and finding a clever math trick with indicator variables instead, like so:\n\n```python\nsum_over_10 = tf.cast(tf.reduce_sum(tensor) > 10, tf.float32)\ntensor = tensor / (1.0 + sum_over_10)\n```\n\nThis code has exactly the same effect as the code above, but by avoiding a conditional, we ensure it will compile with XLA without problems!\n\n#### XLA Rule #2: Your code cannot have \u201cdata-dependent shapes\u201d\n\nWhat this means is that the shape of all of the `tf.Tensor` objects in your code cannot depend on their values. For example, the function `tf.unique` cannot be compiled with XLA, because it returns a `tensor` containing one instance of each unique value in the input. The shape of this output will obviously be different depending on how repetitive the input `Tensor` was, and so XLA refuses to handle it!\n\nIn general, most neural network code obeys rule #2 by default. However, there are a few common cases where it becomes a problem. One very common one is when you use **label masking**, setting your labels to a negative value to indicate that those positions should be ignored when computing the loss. If you look at NumPy or PyTorch loss functions that support label masking, you will often see code like this that uses [boolean indexing](https://numpy.org/doc/stable/user/basics.indexing.html#boolean-array-indexing):\n\n```python\nlabel_mask = labels >= 0\nmasked_outputs = outputs[label_mask]\nmasked_labels = labels[label_mask]\nloss = compute_loss(masked_outputs, masked_labels)\nmean_loss = torch.mean(loss)\n```\n\nThis code is totally fine in NumPy or PyTorch, but it breaks in XLA! Why? Because the shape of `masked_outputs` and `masked_labels` depends on how many positions are masked - that makes it a **data-dependent shape.** However, just like for rule #1, we can often rewrite this code to yield exactly the same output without any data-dependent shapes.",
      "```python\nlabel_mask = tf.cast(labels >= 0, tf.float32)\nloss = compute_loss(outputs, labels)\nloss = loss * label_mask  # Set negative label positions to 0\nmean_loss = tf.reduce_sum(loss) / tf.reduce_sum(label_mask)\n```\n\nHere, we avoid data-dependent shapes by computing the loss for every position, but zeroing out the masked positions in both the numerator and denominator when we calculate the mean, which yields exactly the same result as the first block while maintaining XLA compatibility. Note that we use the same trick as in rule #1 - converting a `tf.bool` to `tf.float32` and using it as an indicator variable. This is a really useful trick, so remember it if you need to convert your own code to XLA!\n\n#### XLA Rule #3: XLA will need to recompile your model for every different input shape it sees\n\nThis is the big one. What this means is that if your input shapes are very variable, XLA will have to recompile your model over and over, which will create huge performance problems. This commonly arises in NLP models, where input texts have variable lengths after tokenization. In other modalities, static shapes are more common and this rule is much less of a problem.\n\nHow can you get around rule #3? The key is **padding** - if you pad all your inputs to the same length, and then use an `attention_mask`, you can get the same results as you\u2019d get from variable shapes, but without any XLA issues. However, excessive padding can cause severe slowdown too - if you pad all your samples to the maximum length in the whole dataset, you might end up with batches consisting endless padding tokens, which will waste a lot of compute and memory!\n\nThere isn\u2019t a perfect solution to this problem. However, you can try some tricks. One very useful trick is to **pad batches of samples up to a multiple of a number like 32 or 64 tokens.** This often only increases the number of tokens by a small amount, but it hugely reduces the number of unique input shapes, because every input shape now has to be a multiple of 32 or 64. Fewer unique input shapes means fewer XLA compilations!\n\n<Tip>\n\n**\ud83e\udd17Specific HuggingFace Tip\ud83e\udd17:** Our tokenizers and data collators have methods that can help you here. You can use `padding=\"max_length\"` or `padding=\"longest\"` when calling tokenizers to get them to output padded data. Our tokenizers and data collators also have a `pad_to_multiple_of` argument that you can use to reduce the number of unique input shapes you see!\n\n</Tip>\n\n### How do I actually train my model on TPU?",
      "Once your training is XLA-compatible and (if you\u2019re using TPU Node / Colab) your dataset has been prepared appropriately, running on TPU is surprisingly easy! All you really need to change in your code is to add a few lines to initialize your TPU, and to ensure that your model and dataset are created inside a `TPUStrategy` scope. Take a look at [our TPU example notebook](https://colab.research.google.com/github/huggingface/notebooks/blob/main/examples/tpu_training-tf.ipynb) to see this in action!\n\n### Summary\n\nThere was a lot in here, so let\u2019s summarize with a quick checklist you can follow when you want to get your model ready for TPU training:\n\n- Make sure your code follows the three rules of XLA\n- Compile your model with `jit_compile=True` on CPU/GPU and confirm that you can train it with XLA\n- Either load your dataset into memory or use a TPU-compatible dataset loading approach (see [notebook](https://colab.research.google.com/github/huggingface/notebooks/blob/main/examples/tpu_training-tf.ipynb))\n- Migrate your code either to Colab (with accelerator set to \u201cTPU\u201d) or a TPU VM on Google Cloud\n- Add TPU initializer code (see [notebook](https://colab.research.google.com/github/huggingface/notebooks/blob/main/examples/tpu_training-tf.ipynb))\n- Create your `TPUStrategy` and make sure dataset loading and model creation are inside the `strategy.scope()` (see [notebook](https://colab.research.google.com/github/huggingface/notebooks/blob/main/examples/tpu_training-tf.ipynb))\n- Don\u2019t forget to take `jit_compile=True` out again when you move to TPU!\n- \ud83d\ude4f\ud83d\ude4f\ud83d\ude4f\ud83e\udd7a\ud83e\udd7a\ud83e\udd7a\n- Call model.fit()\n- You did it!",
      "Gradio Demo: blocks_random_slider\n\n\n```\n!pip install -q gradio \n```\n\n\n```\n\nimport gradio as gr\n\n\ndef func(slider_1, slider_2):\n    return slider_1 * 5 + slider_2\n\n\nwith gr.Blocks() as demo:\n    slider = gr.Slider(minimum=-10.2, maximum=15, label=\"Random Slider (Static)\", randomize=True)\n    slider_1 = gr.Slider(minimum=100, maximum=200, label=\"Random Slider (Input 1)\", randomize=True)\n    slider_2 = gr.Slider(minimum=10, maximum=23.2, label=\"Random Slider (Input 2)\", randomize=True)\n    slider_3 = gr.Slider(value=3, label=\"Non random slider\")\n    btn = gr.Button(\"Run\")\n    btn.click(func, inputs=[slider_1, slider_2], outputs=gr.Number())\n\nif __name__ == \"__main__\":\n    demo.launch()\n\n```",
      "Git over SSH\n\nYou can access and write data in repositories on huggingface.co using SSH (Secure Shell Protocol). When you connect via SSH, you authenticate using a private key file on your local machine.\n\nSome actions, such as pushing changes, or cloning private repositories, will require you to upload your SSH public key to your account on huggingface.co.\n\nYou can use a pre-existing SSH key, or generate a new one specifically for huggingface.co.\n\n## Checking for existing SSH keys\n\nIf you have an existing SSH key, you can use that key to authenticate Git operations over SSH.\n\nSSH keys are usually located under `~/.ssh` on Mac & Linux, and under `C:\\\\Users\\\\<username>\\\\.ssh` on Windows. List files under that directory and look for files of the form:\n\n- id_rsa.pub\n- id_ecdsa.pub\n- id_ed25519.pub\n\nThose files contain your SSH public key.\n\nIf you don't have such file under `~/.ssh`, you will have to [generate a new key](#generating-a-new-ssh-keypair). Otherwise, you can [add your existing SSH public key(s) to your huggingface.co account](#add-a-ssh-key-to-your-account).\n\n## Generating a new SSH keypair\n\nIf you don't have any SSH keys on your machine, you can use `ssh-keygen` to generate a new SSH key pair (public + private keys):\n\n```\n$ ssh-keygen -t ed25519 -C \"your.email@example.co\"\n```\n\nWe recommend entering a passphrase when you are prompted to. A passphrase is an extra layer of security: it is a password that will be prompted whenever you use your SSH key.\n\nOnce your new key is generated, add it to your SSH agent with `ssh-add`:\n\n```\n$ ssh-add ~/.ssh/id_ed25519\n```\n\nIf you chose a different location than the default to store your SSH key, you would have to replace `~/.ssh/id_ed25519` with the file location you used.\n\n## Add a SSH key to your account\n\nTo access private repositories with SSH, or to push changes via SSH, you will need to add your SSH public key to your huggingface.co account. You can manage your SSH keys [in your user settings](https://huggingface.co/settings/keys).\n\nTo add a SSH key to your account, click on the \"Add SSH key\" button.\n\nThen, enter a name for this key (for example, \"Personal computer\"), and copy and paste the content of your **public** SSH key in the area below. The public key is located in the `~/.ssh/id_XXXX.pub` file you found or generated in the previous steps.",
      "Click on \"Add key\", and voil\u00e0! You have added a SSH key to your huggingface.co account.\n\n\n## Testing your SSH authentication\n\nOnce you have added your SSH key to your huggingface.co account, you can test that the connection works as expected.\n\nIn a terminal, run:\n```\n$ ssh -T git@hf.co\n```\n\nIf you see a message with your username, congrats! Everything went well, you are ready to use git over SSH.\n\nOtherwise, if the message states something like the following, make sure your SSH key is actually used by your SSH agent.\n```\nHi anonymous, welcome to Hugging Face.\n```",
      "!---\nCopyright 2022 The HuggingFace Team. All rights reserved.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n-->\n\n# Token classification with LayoutLMv3 (PyTorch version)\n\nThis directory contains a script, `run_funsd_cord.py`, that can be used to fine-tune (or evaluate) LayoutLMv3 on form understanding datasets, such as [FUNSD](https://guillaumejaume.github.io/FUNSD/) and [CORD](https://github.com/clovaai/cord).\n\nThe script `run_funsd_cord.py` leverages the \ud83e\udd17 Datasets library and the Trainer API. You can easily customize it to your needs.\n\n## Fine-tuning on FUNSD\n\nFine-tuning LayoutLMv3 for token classification on [FUNSD](https://guillaumejaume.github.io/FUNSD/) can be done as follows:\n\n```bash\npython run_funsd_cord.py \\\n  --model_name_or_path microsoft/layoutlmv3-base \\\n  --dataset_name funsd \\\n  --output_dir layoutlmv3-test \\\n  --do_train \\\n  --do_eval \\\n  --max_steps 1000 \\\n  --evaluation_strategy steps \\\n  --eval_steps 100 \\\n  --learning_rate 1e-5 \\\n  --load_best_model_at_end \\\n  --metric_for_best_model \"eval_f1\" \\\n  --push_to_hub \\\n  --push_to_hub\u00b0model_id layoutlmv3-finetuned-funsd\n```\n\n\ud83d\udc40 The resulting model can be found here: https://huggingface.co/nielsr/layoutlmv3-finetuned-funsd. By specifying the `push_to_hub` flag, the model gets uploaded automatically to the hub (regularly), together with a model card, which includes metrics such as precision, recall and F1. Note that you can easily update the model card, as it's just a README file of the respective repo on the hub.\n\nThere's also the \"Training metrics\" [tab](https://huggingface.co/nielsr/layoutlmv3-finetuned-funsd/tensorboard), which shows Tensorboard logs over the course of training. Pretty neat, huh?\n\n## Fine-tuning on CORD",
      "Fine-tuning LayoutLMv3 for token classification on [CORD](https://github.com/clovaai/cord) can be done as follows:\n\n```bash\npython run_funsd_cord.py \\\n  --model_name_or_path microsoft/layoutlmv3-base \\\n  --dataset_name cord \\\n  --output_dir layoutlmv3-test \\\n  --do_train \\\n  --do_eval \\\n  --max_steps 1000 \\\n  --evaluation_strategy steps \\\n  --eval_steps 100 \\\n  --learning_rate 5e-5 \\\n  --load_best_model_at_end \\\n  --metric_for_best_model \"eval_f1\" \\\n  --push_to_hub \\\n  --push_to_hub\u00b0model_id layoutlmv3-finetuned-cord\n```\n\n\ud83d\udc40 The resulting model can be found here: https://huggingface.co/nielsr/layoutlmv3-finetuned-cord. Note that a model card gets generated automatically in case you specify the `push_to_hub` flag.",
      "State in Blocks\n\nWe covered [State in Interfaces](https://gradio.app/interface-state), this guide takes a look at state in Blocks, which works mostly the same.\n\n## Global State\n\nGlobal state in Blocks works the same as in Interface. Any variable created outside a function call is a reference shared between all users.\n\n## Session State\n\nGradio supports session **state**, where data persists across multiple submits within a page session, in Blocks apps as well. To reiterate, session data is _not_ shared between different users of your model. To store data in a session state, you need to do three things:\n\n1. Create a `gr.State()` object. If there is a default value to this stateful object, pass that into the constructor.\n2. In the event listener, put the `State` object as an input and output.\n3. In the event listener function, add the variable to the input parameters and the return value.\n\nLet's take a look at a game of hangman.\n\n$code_hangman\n$demo_hangman\n\nLet's see how we do each of the 3 steps listed above in this game:\n\n1. We store the used letters in `used_letters_var`. In the constructor of `State`, we set the initial value of this to `[]`, an empty list.\n2. In `btn.click()`, we have a reference to `used_letters_var` in both the inputs and outputs.\n3. In `guess_letter`, we pass the value of this `State` to `used_letters`, and then return an updated value of this `State` in the return statement.\n\nWith more complex apps, you will likely have many State variables storing session state in a single Blocks app.\n\nLearn more about `State` in the [docs](https://gradio.app/docs#state).",
      "\u5982\u4f55\u4f7f\u7528\u5730\u56fe\u7ec4\u4ef6\u7ed8\u5236\u56fe\u8868\n\nRelated spaces:\nTags: PLOTS, MAPS\n\n## \u7b80\u4ecb\n\n\u672c\u6307\u5357\u4ecb\u7ecd\u5982\u4f55\u4f7f\u7528 Gradio \u7684 `Plot` \u7ec4\u4ef6\u5728\u5730\u56fe\u4e0a\u7ed8\u5236\u5730\u7406\u6570\u636e\u3002Gradio \u7684 `Plot` \u7ec4\u4ef6\u53ef\u4ee5\u4e0e Matplotlib\u3001Bokeh \u548c Plotly \u4e00\u8d77\u4f7f\u7528\u3002\u5728\u672c\u6307\u5357\u4e2d\uff0c\u6211\u4eec\u5c06\u4f7f\u7528 Plotly \u8fdb\u884c\u64cd\u4f5c\u3002Plotly \u53ef\u4ee5\u8ba9\u5f00\u53d1\u4eba\u5458\u8f7b\u677e\u521b\u5efa\u5404\u79cd\u5730\u56fe\u6765\u5c55\u793a\u4ed6\u4eec\u7684\u5730\u7406\u6570\u636e\u3002\u70b9\u51fb[\u8fd9\u91cc](https://plotly.com/python/maps/)\u67e5\u770b\u4e00\u4e9b\u793a\u4f8b\u3002\n\n## \u6982\u8ff0\n\n\u6211\u4eec\u5c06\u4f7f\u7528\u7ebd\u7ea6\u5e02\u7684 Airbnb \u6570\u636e\u96c6\uff0c\u8be5\u6570\u636e\u96c6\u6258\u7ba1\u5728 kaggle \u4e0a\uff0c\u70b9\u51fb[\u8fd9\u91cc](https://www.kaggle.com/datasets/dgomonov/new-york-city-airbnb-open-data)\u3002\u6211\u5df2\u7ecf\u5c06\u5176\u4e0a\u4f20\u5230 Hugging Face Hub \u4f5c\u4e3a\u4e00\u4e2a\u6570\u636e\u96c6\uff0c\u65b9\u4fbf\u4f7f\u7528\u548c\u4e0b\u8f7d\uff0c\u70b9\u51fb[\u8fd9\u91cc](https://huggingface.co/datasets/gradio/NYC-Airbnb-Open-Data)\u3002\u4f7f\u7528\u8fd9\u4e9b\u6570\u636e\uff0c\u6211\u4eec\u5c06\u5728\u5730\u56fe\u4e0a\u7ed8\u5236 Airbnb \u7684\u4f4d\u7f6e\uff0c\u5e76\u5141\u8bb8\u57fa\u4e8e\u4ef7\u683c\u548c\u4f4d\u7f6e\u8fdb\u884c\u7b5b\u9009\u3002\u4e0b\u9762\u662f\u6211\u4eec\u5c06\u8981\u6784\u5efa\u7684\u6f14\u793a\u3002 \u26a1\ufe0f\n\n$demo_map_airbnb\n\n## \u6b65\u9aa4 1-\u52a0\u8f7d CSV \u6570\u636e \ud83d\udcbe\n\n\u8ba9\u6211\u4eec\u9996\u5148\u4ece Hugging Face Hub \u52a0\u8f7d\u7ebd\u7ea6\u5e02\u7684 Airbnb \u6570\u636e\u3002\n\n```python\nfrom datasets import load_dataset\n\ndataset = load_dataset(\"gradio/NYC-Airbnb-Open-Data\", split=\"train\")\ndf = dataset.to_pandas()\n\ndef filter_map(min_price, max_price, boroughs):\n    new_df = df[(df['neighbourhood_group'].isin(boroughs)) &\n            (df['price'] > min_price) & (df['price'] < max_price)]\n    names = new_df[\"name\"].tolist()\n    prices = new_df[\"price\"].tolist()\n    text_list = [(names[i], prices[i]) for i in range(0, len(names))]\n```",
      "\u5728\u4e0a\u9762\u7684\u4ee3\u7801\u4e2d\uff0c\u6211\u4eec\u5148\u5c06 CSV \u6570\u636e\u52a0\u8f7d\u5230\u4e00\u4e2a pandas dataframe \u4e2d\u3002\u8ba9\u6211\u4eec\u9996\u5148\u5b9a\u4e49\u4e00\u4e2a\u51fd\u6570\uff0c\u8fd9\u5c06\u4f5c\u4e3a gradio \u5e94\u7528\u7a0b\u5e8f\u7684\u9884\u6d4b\u51fd\u6570\u3002\u8be5\u51fd\u6570\u5c06\u63a5\u53d7\u6700\u4f4e\u4ef7\u683c\u3001\u6700\u9ad8\u4ef7\u683c\u8303\u56f4\u548c\u7b5b\u9009\u7ed3\u679c\u5730\u533a\u7684\u5217\u8868\u4f5c\u4e3a\u53c2\u6570\u3002\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u4f20\u5165\u7684\u503c (`min_price`\u3001`max_price` \u548c\u5730\u533a\u5217\u8868) \u6765\u7b5b\u9009\u6570\u636e\u6846\u5e76\u521b\u5efa `new_df`\u3002\u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u5c06\u521b\u5efa\u5305\u542b\u6bcf\u4e2a Airbnb \u7684\u540d\u79f0\u548c\u4ef7\u683c\u7684 `text_list`\uff0c\u4ee5\u4fbf\u5728\u5730\u56fe\u4e0a\u4f7f\u7528\u4f5c\u4e3a\u6807\u7b7e\u3002\n\n## \u6b65\u9aa4 2-\u5730\u56fe\u56fe\u8868 \ud83c\udf10\n\nPlotly \u4f7f\u5f97\u5904\u7406\u5730\u56fe\u53d8\u5f97\u5f88\u5bb9\u6613\u3002\u8ba9\u6211\u4eec\u770b\u4e00\u4e0b\u4e0b\u9762\u7684\u4ee3\u7801\uff0c\u4e86\u89e3\u5982\u4f55\u521b\u5efa\u5730\u56fe\u56fe\u8868\u3002\n\n```python\nimport plotly.graph_objects as go\n\nfig = go.Figure(go.Scattermapbox(\n            customdata=text_list,\n            lat=new_df['latitude'].tolist(),\n            lon=new_df['longitude'].tolist(),\n            mode='markers',\n            marker=go.scattermapbox.Marker(\n                size=6\n            ),\n            hoverinfo=\"text\",\n            hovertemplate='<b>Name</b>: %{customdata[0]}<br><b>Price</b>: $%{customdata[1]}'\n        ))\n\nfig.update_layout(\n    mapbox_style=\"open-street-map\",\n    hovermode='closest',\n    mapbox=dict(\n        bearing=0,\n        center=go.layout.mapbox.Center(\n            lat=40.67,\n            lon=-73.90\n        ),\n        pitch=0,\n        zoom=9\n    ),\n)\n```\n\n\u4e0a\u9762\u7684\u4ee3\u7801\u4e2d\uff0c\u6211\u4eec\u901a\u8fc7\u4f20\u5165\u7ecf\u7eac\u5ea6\u5217\u8868\u6765\u521b\u5efa\u4e00\u4e2a\u6563\u70b9\u56fe\u3002\u6211\u4eec\u8fd8\u4f20\u5165\u4e86\u540d\u79f0\u548c\u4ef7\u683c\u7684\u81ea\u5b9a\u4e49\u6570\u636e\uff0c\u4ee5\u4fbf\u5728\u9f20\u6807\u60ac\u505c\u5728\u6bcf\u4e2a\u6807\u8bb0\u4e0a\u65f6\u663e\u793a\u989d\u5916\u7684\u4fe1\u606f\u3002\u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u4f7f\u7528 `update_layout` \u6765\u6307\u5b9a\u5176\u4ed6\u5730\u56fe\u8bbe\u7f6e\uff0c\u4f8b\u5982\u7f29\u653e\u548c\u5c45\u4e2d\u3002\n\n\u6709\u5173\u4f7f\u7528 Mapbox \u548c Plotly \u521b\u5efa\u6563\u70b9\u56fe\u7684\u66f4\u591a\u4fe1\u606f\uff0c\u8bf7\u70b9\u51fb[\u8fd9\u91cc](https://plotly.com/python/scattermapbox/)\u3002\n\n## \u6b65\u9aa4 3-Gradio \u5e94\u7528\u7a0b\u5e8f \u26a1\ufe0f\n\n\u6211\u4eec\u5c06\u4f7f\u7528\u4e24\u4e2a `gr.Number` \u7ec4\u4ef6\u548c\u4e00\u4e2a `gr.CheckboxGroup` \u7ec4\u4ef6\uff0c\u5141\u8bb8\u7528\u6237\u6307\u5b9a\u4ef7\u683c\u8303\u56f4\u548c\u5730\u533a\u4f4d\u7f6e\u3002\u7136\u540e\uff0c\u6211\u4eec\u5c06\u4f7f\u7528 `gr.Plot` \u7ec4\u4ef6\u4f5c\u4e3a\u6211\u4eec\u4e4b\u524d\u521b\u5efa\u7684 Plotly + Mapbox \u5730\u56fe\u7684\u8f93\u51fa\u3002",
      "```python\nwith gr.Blocks() as demo:\n    with gr.Column():\n        with gr.Row():\n            min_price = gr.Number(value=250, label=\"Minimum Price\")\n            max_price = gr.Number(value=1000, label=\"Maximum Price\")\n        boroughs = gr.CheckboxGroup(choices=[\"Queens\", \"Brooklyn\", \"Manhattan\", \"Bronx\", \"Staten Island\"], value=[\"Queens\", \"Brooklyn\"], label=\"Select Boroughs:\")\n        btn = gr.Button(value=\"Update Filter\")\n        map = gr.Plot()\n    demo.load(filter_map, [min_price, max_price, boroughs], map)\n    btn.click(filter_map, [min_price, max_price, boroughs], map)\n```\n\n\u6211\u4eec\u4f7f\u7528 `gr.Column` \u548c `gr.Row` \u5e03\u5c40\u8fd9\u4e9b\u7ec4\u4ef6\uff0c\u5e76\u4e3a\u6f14\u793a\u52a0\u8f7d\u65f6\u548c\u70b9\u51fb \" \u66f4\u65b0\u7b5b\u9009 \" \u6309\u94ae\u65f6\u6dfb\u52a0\u4e86\u4e8b\u4ef6\u89e6\u53d1\u5668\uff0c\u4ee5\u89e6\u53d1\u5730\u56fe\u66f4\u65b0\u65b0\u7684\u7b5b\u9009\u6761\u4ef6\u3002\n\n\u4ee5\u4e0b\u662f\u5b8c\u6574\u6f14\u793a\u4ee3\u7801\uff1a\n\n$code_map_airbnb\n\n## \u6b65\u9aa4 4-\u90e8\u7f72 Deployment \ud83e\udd17\n\n\u5982\u679c\u4f60\u8fd0\u884c\u4e0a\u9762\u7684\u4ee3\u7801\uff0c\u4f60\u7684\u5e94\u7528\u7a0b\u5e8f\u5c06\u5728\u672c\u5730\u8fd0\u884c\u3002\n\u5982\u679c\u8981\u83b7\u53d6\u4e34\u65f6\u5171\u4eab\u94fe\u63a5\uff0c\u53ef\u4ee5\u5c06 `share=True` \u53c2\u6570\u4f20\u9012\u7ed9 `launch`\u3002\n\n\u4f46\u5982\u679c\u4f60\u60f3\u8981\u4e00\u4e2a\u6c38\u4e45\u7684\u90e8\u7f72\u89e3\u51b3\u65b9\u6848\u5462\uff1f\n\u8ba9\u6211\u4eec\u5c06\u6211\u4eec\u7684 Gradio \u5e94\u7528\u7a0b\u5e8f\u90e8\u7f72\u5230\u514d\u8d39\u7684 HuggingFace Spaces \u5e73\u53f0\u3002\n\n\u5982\u679c\u4f60\u4ee5\u524d\u6ca1\u6709\u4f7f\u7528\u8fc7 Spaces\uff0c\u8bf7\u6309\u7167\u4e4b\u524d\u7684\u6307\u5357[\u8fd9\u91cc](/using_hugging_face_integrations)\u3002\n\n## \u7ed3\u8bba \ud83c\udf89\n\n\u4f60\u5df2\u7ecf\u5b8c\u6210\u4e86\uff01\u8fd9\u662f\u6784\u5efa\u5730\u56fe\u6f14\u793a\u6240\u9700\u7684\u6240\u6709\u4ee3\u7801\u3002\n\n\u94fe\u63a5\u5230\u6f14\u793a\uff1a[\u5730\u56fe\u6f14\u793a](https://huggingface.co/spaces/gradio/map_airbnb)\u548c[\u5b8c\u6574\u4ee3\u7801](https://huggingface.co/spaces/gradio/map_airbnb/blob/main/run.py)\uff08\u5728 Hugging Face Spaces\uff09",
      "SE-ResNet\n\n**SE ResNet** is a variant of a [ResNet](https://www.paperswithcode.com/method/resnet) that employs [squeeze-and-excitation blocks](https://paperswithcode.com/method/squeeze-and-excitation-block) to enable the network to perform dynamic channel-wise feature recalibration.\n\n## How do I use this model on an image?\n\nTo load a pretrained model:\n\n```py\n>>> import timm\n>>> model = timm.create_model('seresnet152d', pretrained=True)\n>>> model.eval()\n```\n\nTo load and preprocess the image:\n\n```py \n>>> import urllib\n>>> from PIL import Image\n>>> from timm.data import resolve_data_config\n>>> from timm.data.transforms_factory import create_transform\n\n>>> config = resolve_data_config({}, model=model)\n>>> transform = create_transform(**config)\n\n>>> url, filename = (\"https://github.com/pytorch/hub/raw/master/images/dog.jpg\", \"dog.jpg\")\n>>> urllib.request.urlretrieve(url, filename)\n>>> img = Image.open(filename).convert('RGB')\n>>> tensor = transform(img).unsqueeze(0) # transform and add batch dimension\n```\n\nTo get the model predictions:\n\n```py\n>>> import torch\n>>> with torch.no_grad():\n...     out = model(tensor)\n>>> probabilities = torch.nn.functional.softmax(out[0], dim=0)\n>>> print(probabilities.shape)\n>>> # prints: torch.Size([1000])\n```\n\nTo get the top-5 predictions class names:\n\n```py\n>>> # Get imagenet class mappings\n>>> url, filename = (\"https://raw.githubusercontent.com/pytorch/hub/master/imagenet_classes.txt\", \"imagenet_classes.txt\")\n>>> urllib.request.urlretrieve(url, filename) \n>>> with open(\"imagenet_classes.txt\", \"r\") as f:\n...     categories = [s.strip() for s in f.readlines()]\n\n>>> # Print top categories per image\n>>> top5_prob, top5_catid = torch.topk(probabilities, 5)\n>>> for i in range(top5_prob.size(0)):\n...     print(categories[top5_catid[i]], top5_prob[i].item())\n>>> # prints class names and probabilities like:\n>>> # [('Samoyed', 0.6425196528434753), ('Pomeranian', 0.04062102362513542), ('keeshond', 0.03186424449086189), ('white wolf', 0.01739676296710968), ('Eskimo dog', 0.011717947199940681)]\n```\n\nReplace the model name with the variant you want to use, e.g. `seresnet152d`. You can find the IDs in the model summaries at the top of this page.",
      "To extract image features with this model, follow the [timm feature extraction examples](../feature_extraction), just change the name of the model you want to use.\n\n## How do I finetune this model?\n\nYou can finetune any of the pre-trained models just by changing the classifier (the last layer).\n\n```py\n>>> model = timm.create_model('seresnet152d', pretrained=True, num_classes=NUM_FINETUNE_CLASSES)\n```\nTo finetune on your own dataset, you have to write a training loop or adapt [timm's training\nscript](https://github.com/rwightman/pytorch-image-models/blob/master/train.py) to use your dataset.\n\n## How do I train this model?\n\nYou can follow the [timm recipe scripts](../scripts) for training a new model afresh.\n\n## Citation\n\n```BibTeX\n@misc{hu2019squeezeandexcitation,\n      title={Squeeze-and-Excitation Networks}, \n      author={Jie Hu and Li Shen and Samuel Albanie and Gang Sun and Enhua Wu},\n      year={2019},\n      eprint={1709.01507},\n      archivePrefix={arXiv},\n      primaryClass={cs.CV}\n}\n```",
      "<!--\nType: model-index\nCollections:\n- Name: SE ResNet\n  Paper:\n    Title: Squeeze-and-Excitation Networks\n    URL: https://paperswithcode.com/paper/squeeze-and-excitation-networks\nModels:\n- Name: seresnet152d\n  In Collection: SE ResNet\n  Metadata:\n    FLOPs: 20161904304\n    Parameters: 66840000\n    File Size: 268144497\n    Architecture:\n    - 1x1 Convolution\n    - Batch Normalization\n    - Bottleneck Residual Block\n    - Convolution\n    - Global Average Pooling\n    - Max Pooling\n    - ReLU\n    - Residual Block\n    - Residual Connection\n    - Softmax\n    - Squeeze-and-Excitation Block\n    Tasks:\n    - Image Classification\n    Training Techniques:\n    - Label Smoothing\n    - SGD with Momentum\n    - Weight Decay\n    Training Data:\n    - ImageNet\n    Training Resources: 8x NVIDIA Titan X GPUs\n    ID: seresnet152d\n    LR: 0.6\n    Epochs: 100\n    Layers: 152\n    Dropout: 0.2\n    Crop Pct: '0.94'\n    Momentum: 0.9\n    Batch Size: 1024\n    Image Size: '256'\n    Interpolation: bicubic\n  Code: https://github.com/rwightman/pytorch-image-models/blob/a7f95818e44b281137503bcf4b3e3e94d8ffa52f/timm/models/resnet.py#L1206\n  Weights: https://github.com/rwightman/pytorch-image-models/releases/download/v0.1-weights/seresnet152d_ra2-04464dd2.pth\n  Results:\n  - Task: Image Classification\n    Dataset: ImageNet\n    Metrics:\n      Top 1 Accuracy: 83.74%\n      Top 5 Accuracy: 96.77%\n- Name: seresnet50\n  In Collection: SE ResNet\n  Metadata:\n    FLOPs: 5285062320\n    Parameters: 28090000\n    File Size: 112621903\n    Architecture:\n    - 1x1 Convolution\n    - Batch Normalization\n    - Bottleneck Residual Block\n    - Convolution\n    - Global Average Pooling\n    - Max Pooling\n    - ReLU\n    - Residual Block\n    - Residual Connection\n    - Softmax\n    - Squeeze-and-Excitation Block\n    Tasks:\n    - Image Classification\n    Training Techniques:\n    - Label Smoothing",
      "- SGD with Momentum\n    - Weight Decay\n    Training Data:\n    - ImageNet\n    Training Resources: 8x NVIDIA Titan X GPUs\n    ID: seresnet50\n    LR: 0.6\n    Epochs: 100\n    Layers: 50\n    Dropout: 0.2\n    Crop Pct: '0.875'\n    Momentum: 0.9\n    Batch Size: 1024\n    Image Size: '224'\n    Interpolation: bicubic\n  Code: https://github.com/rwightman/pytorch-image-models/blob/a7f95818e44b281137503bcf4b3e3e94d8ffa52f/timm/models/resnet.py#L1180\n  Weights: https://github.com/rwightman/pytorch-image-models/releases/download/v0.1-weights/seresnet50_ra_224-8efdb4bb.pth\n  Results:\n  - Task: Image Classification\n    Dataset: ImageNet\n    Metrics:\n      Top 1 Accuracy: 80.26%\n      Top 5 Accuracy: 95.07%\n-->"
    ]
  },
  {
    "chunk_size": 600,
    "chunk_overlap": 60,
    "limit": 10,
    "texts": [
      "Create an Endpoint\n\nAfter your first login, you will be directed to the [Endpoint creation page](https://ui.endpoints.huggingface.co/new). As an example, this guide will go through the steps to deploy [distilbert-base-uncased-finetuned-sst-2-english](https://huggingface.co/distilbert-base-uncased-finetuned-sst-2-english) for text classification. \n\n## 1. Enter the Hugging Face Repository ID and your desired endpoint name:\n\n<img src=\"https://raw.githubusercontent.com/huggingface/hf-endpoints-documentation/main/assets/1_repository.png\" alt=\"select repository\" />\n\n## 2. Select your Cloud Provider and region. Initially, only AWS will be available as a Cloud Provider with the `us-east-1` and `eu-west-1` regions. We will add Azure soon, and if you need to test Endpoints with other Cloud Providers or regions, please let us know.\n\n<img src=\"https://raw.githubusercontent.com/huggingface/hf-endpoints-documentation/main/assets/1_region.png\" alt=\"select region\" />\n\n## 3. Define the [Security Level](security) for the Endpoint:\n\n<img src=\"https://raw.githubusercontent.com/huggingface/hf-endpoints-documentation/main/assets/1_security.png\" alt=\"define security\" />\n\n## 4. Create your Endpoint by clicking **Create Endpoint**. By default, your Endpoint is created with a medium CPU (2 x 4GB vCPUs with Intel Xeon Ice Lake) The cost estimate assumes the Endpoint will be up for an entire month, and does not take autoscaling into account.\n\n<img src=\"https://raw.githubusercontent.com/huggingface/hf-endpoints-documentation/main/assets/1_create_cost.png\" alt=\"create endpoint\" />\n\n## 5. Wait for the Endpoint to build, initialize and run which can take between 1 to 5 minutes.\n\n<img src=\"https://raw.githubusercontent.com/huggingface/hf-endpoints-documentation/main/assets/overview.png\" alt=\"overview\" />\n\n## 6. Test your Endpoint in the overview with the Inference widget \ud83c\udfc1 \ud83c\udf89!\n\n<img src=\"https://raw.githubusercontent.com/huggingface/hf-endpoints-documentation/main/assets/1_inference.png\" alt=\"run inference\" />",
      "Choosing a metric for your task\n\n**So you've trained your model and want to see how well it\u2019s doing on a dataset of your choice. Where do you start?**\n\nThere is no \u201cone size fits all\u201d approach to choosing an evaluation metric, but some good guidelines to keep in mind are:\n\n## Categories of metrics\n\nThere are 3 high-level categories of metrics:\n\n1. *Generic metrics*, which can be applied to a variety of situations and datasets, such as precision and accuracy.\n2. *Task-specific metrics*, which are limited to a given task, such as Machine Translation (often evaluated using metrics [BLEU](https://huggingface.co/metrics/bleu) or [ROUGE](https://huggingface.co/metrics/rouge)) or Named Entity Recognition (often evaluated with [seqeval](https://huggingface.co/metrics/seqeval)).\n3. *Dataset-specific metrics*, which aim to measure model performance on specific benchmarks: for instance, the [GLUE benchmark](https://huggingface.co/datasets/glue) has a dedicated [evaluation metric](https://huggingface.co/metrics/glue).\n\nLet's look at each of these three cases:\n\n### Generic metrics\n\nMany of the metrics used in the Machine Learning community are quite generic and can be applied in a variety of tasks and datasets.\n\nThis is the case for metrics like [accuracy](https://huggingface.co/metrics/accuracy) and [precision](https://huggingface.co/metrics/precision), which can be used for evaluating labeled (supervised) datasets, as well as [perplexity](https://huggingface.co/metrics/perplexity), which can be used for evaluating different kinds of (unsupervised) generative tasks.\n\nTo see the input structure of a given metric, you can look at its metric card. For example, in the case of [precision](https://huggingface.co/metrics/precision), the format is:\n```\n>>> precision_metric = evaluate.load(\"precision\")\n>>> results = precision_metric.compute(references=[0, 1], predictions=[0, 1])\n>>> print(results)\n{'precision': 1.0}\n```\n\n### Task-specific metrics\n\nPopular ML tasks like Machine Translation and Named Entity Recognition have specific metrics that can be used to compare models. For example, a series of different metrics have been proposed for text generation, ranging from [BLEU](https://huggingface.co/metrics/bleu) and its derivatives such as [GoogleBLEU](https://huggingface.co/metrics/google_bleu) and [GLEU](https://huggingface.co/metrics/gleu), but also [ROUGE](https://huggingface.co/metrics/rouge), [MAUVE](https://huggingface.co/metrics/mauve), etc.",
      "You can find the right metric for your task by:\n\n- **Looking at the [Task pages](https://huggingface.co/tasks)** to see what metrics can be used for evaluating models for a given task.\n- **Checking out leaderboards** on sites like [Papers With Code](https://paperswithcode.com/) (you can search by task and by dataset).\n-  **Reading the metric cards** for the relevant metrics and see which ones are a good fit for your use case. For example, see the [BLEU metric card](https://github.com/huggingface/evaluate/tree/main/metrics/bleu) or [SQuaD metric card](https://github.com/huggingface/evaluate/tree/main/metrics/squad).\n- **Looking at papers and blog posts** published on the topic and see what metrics they report. This can change over time, so try to pick papers from the last couple of years!\n\n### Dataset-specific metrics\n\nSome datasets have specific metrics associated with them -- this is especially in the case of popular benchmarks like [GLUE](https://huggingface.co/metrics/glue) and [SQuAD](https://huggingface.co/metrics/squad).\n\n<Tip warning={true}>\n\ud83d\udca1\nGLUE is actually a collection of different subsets on different tasks, so first you need to choose the one that corresponds to the NLI task, such as mnli, which is described as \u201ccrowdsourced collection of sentence pairs with textual entailment annotations\u201d\n</Tip>\n\n\nIf you are evaluating your model on a benchmark dataset like the ones mentioned above, you can use its dedicated evaluation metric. Make sure you respect the format that they require. For example, to evaluate your model on the [SQuAD](https://huggingface.co/datasets/squad) dataset, you need to feed the `question` and `context` into your model and return the `prediction_text`, which should be compared with the `references` (based on matching the `id` of the question) :\n\n```\n>>> from evaluate import load\n>>> squad_metric = load(\"squad\")\n>>> predictions = [{'prediction_text': '1976', 'id': '56e10a3be3433e1400422b22'}]\n>>> references = [{'answers': {'answer_start': [97], 'text': ['1976']}, 'id': '56e10a3be3433e1400422b22'}]\n>>> results = squad_metric.compute(predictions=predictions, references=references)\n>>> results\n{'exact_match': 100.0, 'f1': 100.0}\n```\n\nYou can find examples of dataset structures by consulting the \"Dataset Preview\" function or the dataset card for a given dataset, and you can see how to use its dedicated evaluation function based on the metric card.",
      "\u4e3b\u8981\u7279\u70b9\n\n\u8ba9\u6211\u4eec\u6765\u4ecb\u7ecd\u4e00\u4e0b Gradio \u6700\u53d7\u6b22\u8fce\u7684\u4e00\u4e9b\u529f\u80fd\uff01\u8fd9\u91cc\u662f Gradio \u7684\u4e3b\u8981\u7279\u70b9\uff1a\n\n1. [\u6dfb\u52a0\u793a\u4f8b\u8f93\u5165](#example-inputs)\n2. [\u4f20\u9012\u81ea\u5b9a\u4e49\u9519\u8bef\u6d88\u606f](#errors)\n3. [\u6dfb\u52a0\u63cf\u8ff0\u5185\u5bb9](#descriptive-content)\n4. [\u8bbe\u7f6e\u65d7\u6807](#flagging)\n5. [\u9884\u5904\u7406\u548c\u540e\u5904\u7406](#preprocessing-and-postprocessing)\n6. [\u6837\u5f0f\u5316\u6f14\u793a](#styling)\n7. [\u6392\u961f\u7528\u6237](#queuing)\n8. [\u8fed\u4ee3\u8f93\u51fa](#iterative-outputs)\n9. [\u8fdb\u5ea6\u6761](#progress-bars)\n10. [\u6279\u5904\u7406\u51fd\u6570](#batch-functions)\n11. [\u5728\u534f\u4f5c\u7b14\u8bb0\u672c\u4e0a\u8fd0\u884c](#colab-notebooks)\n\n## \u793a\u4f8b\u8f93\u5165\n\n\u60a8\u53ef\u4ee5\u63d0\u4f9b\u7528\u6237\u53ef\u4ee5\u8f7b\u677e\u52a0\u8f7d\u5230 \"Interface\" \u4e2d\u7684\u793a\u4f8b\u6570\u636e\u3002\u8fd9\u5bf9\u4e8e\u6f14\u793a\u6a21\u578b\u671f\u671b\u7684\u8f93\u5165\u7c7b\u578b\u4ee5\u53ca\u6f14\u793a\u6570\u636e\u96c6\u548c\u6a21\u578b\u4e00\u8d77\u63a2\u7d22\u7684\u65b9\u5f0f\u975e\u5e38\u6709\u5e2e\u52a9\u3002\u8981\u52a0\u8f7d\u793a\u4f8b\u6570\u636e\uff0c\u60a8\u53ef\u4ee5\u5c06\u5d4c\u5957\u5217\u8868\u63d0\u4f9b\u7ed9 Interface \u6784\u9020\u51fd\u6570\u7684 `examples=` \u5173\u952e\u5b57\u53c2\u6570\u3002\u5916\u90e8\u5217\u8868\u4e2d\u7684\u6bcf\u4e2a\u5b50\u5217\u8868\u8868\u793a\u4e00\u4e2a\u6570\u636e\u6837\u672c\uff0c\u5b50\u5217\u8868\u4e2d\u7684\u6bcf\u4e2a\u5143\u7d20\u8868\u793a\u6bcf\u4e2a\u8f93\u5165\u7ec4\u4ef6\u7684\u8f93\u5165\u3002\u6709\u5173\u6bcf\u4e2a\u7ec4\u4ef6\u7684\u793a\u4f8b\u6570\u636e\u683c\u5f0f\u5728[Docs](https://gradio.app/docs#components)\u4e2d\u6709\u8bf4\u660e\u3002\n\n$code_calculator\n$demo_calculator\n\n\u60a8\u53ef\u4ee5\u5c06\u5927\u578b\u6570\u636e\u96c6\u52a0\u8f7d\u5230\u793a\u4f8b\u4e2d\uff0c\u901a\u8fc7 Gradio \u6d4f\u89c8\u548c\u4e0e\u6570\u636e\u96c6\u8fdb\u884c\u4ea4\u4e92\u3002\u793a\u4f8b\u5c06\u81ea\u52a8\u5206\u9875\uff08\u53ef\u4ee5\u901a\u8fc7 Interface \u7684 `examples_per_page` \u53c2\u6570\u8fdb\u884c\u914d\u7f6e\uff09\u3002\n\n\u7ee7\u7eed\u4e86\u89e3\u793a\u4f8b\uff0c\u8bf7\u53c2\u9605[\u66f4\u591a\u793a\u4f8b](https://gradio.app/more-on-examples)\u6307\u5357\u3002\n\n## \u9519\u8bef\n\n\u60a8\u5e0c\u671b\u5411\u7528\u6237\u4f20\u9012\u81ea\u5b9a\u4e49\u9519\u8bef\u6d88\u606f\u3002\u4e3a\u6b64\uff0cwith `gr.Error(\"custom message\")` \u6765\u663e\u793a\u9519\u8bef\u6d88\u606f\u3002\u5982\u679c\u5728\u4e0a\u9762\u7684\u8ba1\u7b97\u5668\u793a\u4f8b\u4e2d\u5c1d\u8bd5\u9664\u4ee5\u96f6\uff0c\u5c06\u663e\u793a\u81ea\u5b9a\u4e49\u9519\u8bef\u6d88\u606f\u7684\u5f39\u51fa\u6a21\u6001\u7a97\u53e3\u3002\u4e86\u89e3\u6709\u5173\u9519\u8bef\u7684\u66f4\u591a\u4fe1\u606f\uff0c\u8bf7\u53c2\u9605[\u6587\u6863](https://gradio.app/docs#error)\u3002\n\n## \u63cf\u8ff0\u6027\u5185\u5bb9\n\n\u5728\u524d\u9762\u7684\u793a\u4f8b\u4e2d\uff0c\u60a8\u53ef\u80fd\u5df2\u7ecf\u6ce8\u610f\u5230 Interface \u6784\u9020\u51fd\u6570\u4e2d\u7684 `title=` \u548c `description=` \u5173\u952e\u5b57\u53c2\u6570\uff0c\u5e2e\u52a9\u7528\u6237\u4e86\u89e3\u60a8\u7684\u5e94\u7528\u7a0b\u5e8f\u3002",
      "## \u63cf\u8ff0\u6027\u5185\u5bb9\n\n\u5728\u524d\u9762\u7684\u793a\u4f8b\u4e2d\uff0c\u60a8\u53ef\u80fd\u5df2\u7ecf\u6ce8\u610f\u5230 Interface \u6784\u9020\u51fd\u6570\u4e2d\u7684 `title=` \u548c `description=` \u5173\u952e\u5b57\u53c2\u6570\uff0c\u5e2e\u52a9\u7528\u6237\u4e86\u89e3\u60a8\u7684\u5e94\u7528\u7a0b\u5e8f\u3002\n\nInterface \u6784\u9020\u51fd\u6570\u4e2d\u6709\u4e09\u4e2a\u53c2\u6570\u7528\u4e8e\u6307\u5b9a\u6b64\u5185\u5bb9\u5e94\u653e\u7f6e\u5728\u54ea\u91cc\uff1a\n\n- `title`\uff1a\u63a5\u53d7\u6587\u672c\uff0c\u5e76\u53ef\u4ee5\u5c06\u5176\u663e\u793a\u5728\u754c\u9762\u7684\u9876\u90e8\uff0c\u4e5f\u5c06\u6210\u4e3a\u9875\u9762\u6807\u9898\u3002\n- `description`\uff1a\u63a5\u53d7\u6587\u672c\u3001Markdown \u6216 HTML\uff0c\u5e76\u5c06\u5176\u653e\u7f6e\u5728\u6807\u9898\u6b63\u4e0b\u65b9\u3002\n- `article`\uff1a\u4e5f\u63a5\u53d7\u6587\u672c\u3001Markdown \u6216 HTML\uff0c\u5e76\u5c06\u5176\u653e\u7f6e\u5728\u754c\u9762\u4e0b\u65b9\u3002\n\n![annotated](/assets/guides/annotated.png)\n\n\u5982\u679c\u60a8\u4f7f\u7528\u7684\u662f `Blocks` API\uff0c\u5219\u53ef\u4ee5 with `gr.Markdown(...)` \u6216 `gr.HTML(...)` \u7ec4\u4ef6\u5728\u4efb\u4f55\u4f4d\u7f6e\u63d2\u5165\u6587\u672c\u3001Markdown \u6216 HTML\uff0c\u5176\u4e2d\u63cf\u8ff0\u6027\u5185\u5bb9\u4f4d\u4e8e `Component` \u6784\u9020\u51fd\u6570\u5185\u90e8\u3002\n\n\u53e6\u4e00\u4e2a\u6709\u7528\u7684\u5173\u952e\u5b57\u53c2\u6570\u662f `label=`\uff0c\u5b83\u5b58\u5728\u4e8e\u6bcf\u4e2a `Component` \u4e2d\u3002\u8fd9\u4fee\u6539\u4e86\u6bcf\u4e2a `Component` \u9876\u90e8\u7684\u6807\u7b7e\u6587\u672c\u3002\u8fd8\u53ef\u4ee5\u4e3a\u8bf8\u5982 `Textbox` \u6216 `Radio` \u4e4b\u7c7b\u7684\u8868\u5355\u5143\u7d20\u6dfb\u52a0 `info=` \u5173\u952e\u5b57\u53c2\u6570\uff0c\u4ee5\u63d0\u4f9b\u6709\u5173\u5176\u7528\u6cd5\u7684\u8fdb\u4e00\u6b65\u4fe1\u606f\u3002\n\n```python\ngr.Number(label='\u5e74\u9f84', info='\u4ee5\u5e74\u4e3a\u5355\u4f4d\uff0c\u5fc5\u987b\u5927\u4e8e0')\n```\n\n## \u65d7\u6807\n\n\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\"Interface\" \u5c06\u6709\u4e00\u4e2a \"Flag\" \u6309\u94ae\u3002\u5f53\u7528\u6237\u6d4b\u8bd5\u60a8\u7684 `Interface` \u65f6\uff0c\u5982\u679c\u770b\u5230\u6709\u8da3\u7684\u8f93\u51fa\uff0c\u4f8b\u5982\u9519\u8bef\u6216\u610f\u5916\u7684\u6a21\u578b\u884c\u4e3a\uff0c\u4ed6\u4eec\u53ef\u4ee5\u5c06\u8f93\u5165\u6807\u8bb0\u4e3a\u60a8\u8fdb\u884c\u67e5\u770b\u3002\u5728\u7531 `Interface` \u6784\u9020\u51fd\u6570\u7684 `flagging_dir=` \u53c2\u6570\u63d0\u4f9b\u7684\u76ee\u5f55\u4e2d\uff0c\u5c06\u8bb0\u5f55\u6807\u8bb0\u7684\u8f93\u5165\u5230\u4e00\u4e2a CSV \u6587\u4ef6\u4e2d\u3002\u5982\u679c\u754c\u9762\u6d89\u53ca\u6587\u4ef6\u6570\u636e\uff0c\u4f8b\u5982\u56fe\u50cf\u548c\u97f3\u9891\u7ec4\u4ef6\uff0c\u5c06\u521b\u5efa\u6587\u4ef6\u5939\u6765\u5b58\u50a8\u8fd9\u4e9b\u6807\u8bb0\u7684\u6570\u636e\u3002\n\n\u4f8b\u5982\uff0c\u5bf9\u4e8e\u4e0a\u9762\u663e\u793a\u7684\u8ba1\u7b97\u5668\u754c\u9762\uff0c\u6211\u4eec\u5c06\u5728\u4e0b\u9762\u7684\u65d7\u6807\u76ee\u5f55\u4e2d\u5b58\u50a8\u6807\u8bb0\u7684\u6570\u636e\uff1a\n\n```directory\n+-- calculator.py\n+-- flagged/\n|   +-- logs.csv\n```\n\n_flagged/logs.csv_\n\n```csv\nnum1,operation,num2,Output\n5,add,7,12\n6,subtract,1.5,4.5\n```",
      "_flagged/logs.csv_\n\n```csv\nnum1,operation,num2,Output\n5,add,7,12\n6,subtract,1.5,4.5\n```\n\n\u4e0e\u65e9\u671f\u663e\u793a\u7684\u51b7\u8272\u754c\u9762\u76f8\u5bf9\u5e94\uff0c\u6211\u4eec\u5c06\u5728\u4e0b\u9762\u7684\u65d7\u6807\u76ee\u5f55\u4e2d\u5b58\u50a8\u6807\u8bb0\u7684\u6570\u636e\uff1a\n\n```directory\n+-- sepia.py\n+-- flagged/\n|   +-- logs.csv\n|   +-- im/\n|   |   +-- 0.png\n|   |   +-- 1.png\n|   +-- Output/\n|   |   +-- 0.png\n|   |   +-- 1.png\n```\n\n_flagged/logs.csv_\n\n```csv\nim,Output\nim/0.png,Output/0.png\nim/1.png,Output/1.png\n```\n\n\u5982\u679c\u60a8\u5e0c\u671b\u7528\u6237\u63d0\u4f9b\u65d7\u6807\u539f\u56e0\uff0c\u53ef\u4ee5\u5c06\u5b57\u7b26\u4e32\u5217\u8868\u4f20\u9012\u7ed9 Interface \u7684 `flagging_options` \u53c2\u6570\u3002\u7528\u6237\u5728\u8fdb\u884c\u65d7\u6807\u65f6\u5fc5\u987b\u9009\u62e9\u5176\u4e2d\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u8fd9\u5c06\u4f5c\u4e3a\u9644\u52a0\u5217\u4fdd\u5b58\u5230 CSV \u4e2d\u3002\n\n## \u9884\u5904\u7406\u548c\u540e\u5904\u7406 (Preprocessing and Postprocessing)\n\n![annotated](/assets/img/dataflow.svg)\n\n\u5982\u60a8\u6240\u89c1\uff0cGradio \u5305\u62ec\u53ef\u4ee5\u5904\u7406\u5404\u79cd\u4e0d\u540c\u6570\u636e\u7c7b\u578b\u7684\u7ec4\u4ef6\uff0c\u4f8b\u5982\u56fe\u50cf\u3001\u97f3\u9891\u548c\u89c6\u9891\u3002\u5927\u591a\u6570\u7ec4\u4ef6\u90fd\u53ef\u4ee5\u7528\u4f5c\u8f93\u5165\u6216\u8f93\u51fa\u3002\n\n\u5f53\u7ec4\u4ef6\u7528\u4f5c\u8f93\u5165\u65f6\uff0cGradio \u81ea\u52a8\u5904\u7406*\u9884\u5904\u7406*\uff0c\u5c06\u6570\u636e\u4ece\u7528\u6237\u6d4f\u89c8\u5668\u53d1\u9001\u7684\u7c7b\u578b\uff08\u4f8b\u5982\u7f51\u7edc\u6444\u50cf\u5934\u5feb\u7167\u7684 base64 \u8868\u793a\uff09\u8f6c\u6362\u4e3a\u60a8\u7684\u51fd\u6570\u53ef\u4ee5\u63a5\u53d7\u7684\u5f62\u5f0f\uff08\u4f8b\u5982 `numpy` \u6570\u7ec4\uff09\u3002\n\n\u540c\u6837\uff0c\u5f53\u7ec4\u4ef6\u7528\u4f5c\u8f93\u51fa\u65f6\uff0cGradio \u81ea\u52a8\u5904\u7406*\u540e\u5904\u7406*\uff0c\u5c06\u6570\u636e\u4ece\u51fd\u6570\u8fd4\u56de\u7684\u5f62\u5f0f\uff08\u4f8b\u5982\u56fe\u50cf\u8def\u5f84\u5217\u8868\uff09\u8f6c\u6362\u4e3a\u53ef\u4ee5\u5728\u7528\u6237\u6d4f\u89c8\u5668\u4e2d\u663e\u793a\u7684\u5f62\u5f0f\uff08\u4f8b\u5982\u4ee5 base64 \u683c\u5f0f\u663e\u793a\u56fe\u50cf\u7684 `Gallery`\uff09\u3002\n\n\u60a8\u53ef\u4ee5\u4f7f\u7528\u6784\u5efa\u56fe\u50cf\u7ec4\u4ef6\u65f6\u7684\u53c2\u6570\u63a7\u5236*\u9884\u5904\u7406*\u3002\u4f8b\u5982\uff0c\u5982\u679c\u60a8\u4f7f\u7528\u4ee5\u4e0b\u53c2\u6570\u5b9e\u4f8b\u5316 `Image` \u7ec4\u4ef6\uff0c\u5b83\u5c06\u5c06\u56fe\u50cf\u8f6c\u6362\u4e3a `PIL` \u7c7b\u578b\uff0c\u5e76\u5c06\u5176\u91cd\u5851\u4e3a`(100, 100)`\uff0c\u800c\u4e0d\u7ba1\u63d0\u4ea4\u65f6\u7684\u539f\u59cb\u5927\u5c0f\u5982\u4f55\uff1a\n\n```py\nimg = gr.Image(shape=(100, 100), type=\"pil\")\n```\n\n\u76f8\u53cd\uff0c\u8fd9\u91cc\u6211\u4eec\u4fdd\u7559\u56fe\u50cf\u7684\u539f\u59cb\u5927\u5c0f\uff0c\u4f46\u5728\u5c06\u5176\u8f6c\u6362\u4e3a numpy \u6570\u7ec4\u4e4b\u524d\u53cd\u8f6c\u989c\u8272\uff1a",
      "```py\nimg = gr.Image(shape=(100, 100), type=\"pil\")\n```\n\n\u76f8\u53cd\uff0c\u8fd9\u91cc\u6211\u4eec\u4fdd\u7559\u56fe\u50cf\u7684\u539f\u59cb\u5927\u5c0f\uff0c\u4f46\u5728\u5c06\u5176\u8f6c\u6362\u4e3a numpy \u6570\u7ec4\u4e4b\u524d\u53cd\u8f6c\u989c\u8272\uff1a\n\n```py\nimg = gr.Image(invert_colors=True, type=\"numpy\")\n```\n\n\u540e\u5904\u7406\u8981\u5bb9\u6613\u5f97\u591a\uff01Gradio \u81ea\u52a8\u8bc6\u522b\u8fd4\u56de\u6570\u636e\u7684\u683c\u5f0f\uff08\u4f8b\u5982 `Image` \u662f `numpy` \u6570\u7ec4\u8fd8\u662f `str` \u6587\u4ef6\u8def\u5f84\uff1f\uff09\uff0c\u5e76\u5c06\u5176\u540e\u5904\u7406\u4e3a\u53ef\u4ee5\u7531\u6d4f\u89c8\u5668\u663e\u793a\u7684\u683c\u5f0f\u3002\n\n\u8bf7\u67e5\u770b[\u6587\u6863](https://gradio.app/docs)\uff0c\u4e86\u89e3\u6bcf\u4e2a\u7ec4\u4ef6\u7684\u6240\u6709\u4e0e\u9884\u5904\u7406\u76f8\u5173\u7684\u53c2\u6570\u3002\n\n## \u6837\u5f0f (Styling)\n\nGradio \u4e3b\u9898\u662f\u81ea\u5b9a\u4e49\u5e94\u7528\u7a0b\u5e8f\u5916\u89c2\u548c\u611f\u89c9\u7684\u6700\u7b80\u5355\u65b9\u6cd5\u3002\u60a8\u53ef\u4ee5\u9009\u62e9\u591a\u79cd\u4e3b\u9898\u6216\u521b\u5efa\u81ea\u5df1\u7684\u4e3b\u9898\u3002\u8981\u8fd9\u6837\u505a\uff0c\u8bf7\u5c06 `theme=` \u53c2\u6570\u4f20\u9012\u7ed9 `Interface` \u6784\u9020\u51fd\u6570\u3002\u4f8b\u5982\uff1a\n\n```python\ndemo = gr.Interface(..., theme=gr.themes.Monochrome())\n```\n\nGradio \u5e26\u6709\u4e00\u7ec4\u9884\u5148\u6784\u5efa\u7684\u4e3b\u9898\uff0c\u60a8\u53ef\u4ee5\u4ece `gr.themes.*` \u52a0\u8f7d\u3002\u60a8\u53ef\u4ee5\u6269\u5c55\u8fd9\u4e9b\u4e3b\u9898\u6216\u4ece\u5934\u5f00\u59cb\u521b\u5efa\u81ea\u5df1\u7684\u4e3b\u9898 - \u6709\u5173\u66f4\u591a\u8be6\u7ec6\u4fe1\u606f\uff0c\u8bf7\u53c2\u9605[\u4e3b\u9898\u6307\u5357](https://gradio.app/theming-guide)\u3002\n\n\u8981\u589e\u52a0\u989d\u5916\u7684\u6837\u5f0f\u80fd\u529b\uff0c\u60a8\u53ef\u4ee5 with `css=` \u5173\u952e\u5b57\u5c06\u4efb\u4f55 CSS \u4f20\u9012\u7ed9\u60a8\u7684\u5e94\u7528\u7a0b\u5e8f\u3002\nGradio \u5e94\u7528\u7a0b\u5e8f\u7684\u57fa\u7c7b\u662f `gradio-container`\uff0c\u56e0\u6b64\u4ee5\u4e0b\u662f\u4e00\u4e2a\u66f4\u6539 Gradio \u5e94\u7528\u7a0b\u5e8f\u80cc\u666f\u989c\u8272\u7684\u793a\u4f8b\uff1a\n\n```python\nwith `gr.Interface(css=\".gradio-container {background-color: red}\") as demo:\n    ...\n```\n\n## \u961f\u5217 (Queuing)\n\n\u5982\u679c\u60a8\u7684\u5e94\u7528\u7a0b\u5e8f\u9884\u8ba1\u4f1a\u6709\u5927\u91cf\u6d41\u91cf\uff0c\u8bf7 with `queue()` \u65b9\u6cd5\u6765\u63a7\u5236\u5904\u7406\u901f\u7387\u3002\u8fd9\u5c06\u6392\u961f\u5904\u7406\u8c03\u7528\uff0c\u56e0\u6b64\u4e00\u6b21\u53ea\u5904\u7406\u4e00\u5b9a\u6570\u91cf\u7684\u8bf7\u6c42\u3002\u961f\u5217\u4f7f\u7528 Websockets\uff0c\u8fd8\u53ef\u4ee5\u9632\u6b62\u7f51\u7edc\u8d85\u65f6\uff0c\u56e0\u6b64\u5982\u679c\u60a8\u7684\u51fd\u6570\u7684\u63a8\u7406\u65f6\u95f4\u5f88\u957f\uff08> 1 \u5206\u949f\uff09\uff0c\u5e94\u4f7f\u7528\u961f\u5217\u3002\n\nwith `Interface`\uff1a\n\n```python\ndemo = gr.Interface(...).queue()\ndemo.launch()\n```\n\nwith `Blocks`\uff1a\n\n```python\nwith gr.Blocks() as demo\uff1a\n    #...\ndemo.queue()\ndemo.launch()\n```\n\n\u60a8\u53ef\u4ee5\u901a\u8fc7\u4ee5\u4e0b\u65b9\u5f0f\u63a7\u5236\u4e00\u6b21\u5904\u7406\u7684\u8bf7\u6c42\u6570\u91cf\uff1a",
      "with `Blocks`\uff1a\n\n```python\nwith gr.Blocks() as demo\uff1a\n    #...\ndemo.queue()\ndemo.launch()\n```\n\n\u60a8\u53ef\u4ee5\u901a\u8fc7\u4ee5\u4e0b\u65b9\u5f0f\u63a7\u5236\u4e00\u6b21\u5904\u7406\u7684\u8bf7\u6c42\u6570\u91cf\uff1a\n\n```python\ndemo.queue(concurrency_count=3)\n```\n\n\u67e5\u770b\u6709\u5173\u914d\u7f6e\u5176\u4ed6\u961f\u5217\u53c2\u6570\u7684[\u961f\u5217\u6587\u6863](/docs/#queue)\u3002\n\n\u5728 Blocks \u4e2d\u6307\u5b9a\u4ec5\u5bf9\u67d0\u4e9b\u51fd\u6570\u8fdb\u884c\u6392\u961f\uff1a\n\n```python\nwith gr.Blocks() as demo2\uff1a\n    num1 = gr.Number()\n    num2 = gr.Number()\n    output = gr.Number()\n    gr.Button(\"Add\").click(\n        lambda a, b: a + b, [num1, num2], output)\n    gr.Button(\"Multiply\").click(\n        lambda a, b: a * b, [num1, num2], output, queue=True)\ndemo2.launch()\n```\n\n## \u8fed\u4ee3\u8f93\u51fa (Iterative Outputs)\n\n\u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\uff0c\u60a8\u53ef\u80fd\u9700\u8981\u4f20\u8f93\u4e00\u7cfb\u5217\u8f93\u51fa\u800c\u4e0d\u662f\u4e00\u6b21\u663e\u793a\u5355\u4e2a\u8f93\u51fa\u3002\u4f8b\u5982\uff0c\u60a8\u53ef\u80fd\u6709\u4e00\u4e2a\u56fe\u50cf\u751f\u6210\u6a21\u578b\uff0c\u5e0c\u671b\u663e\u793a\u751f\u6210\u7684\u6bcf\u4e2a\u6b65\u9aa4\u7684\u56fe\u50cf\uff0c\u76f4\u5230\u6700\u7ec8\u56fe\u50cf\u3002\u6216\u8005\u60a8\u53ef\u80fd\u6709\u4e00\u4e2a\u804a\u5929\u673a\u5668\u4eba\uff0c\u5b83\u9010\u5b57\u9010\u53e5\u5730\u6d41\u5f0f\u4f20\u8f93\u54cd\u5e94\uff0c\u800c\u4e0d\u662f\u4e00\u6b21\u8fd4\u56de\u5168\u90e8\u54cd\u5e94\u3002\n\n\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u60a8\u53ef\u4ee5\u5c06**\u751f\u6210\u5668**\u51fd\u6570\u63d0\u4f9b\u7ed9 Gradio\uff0c\u800c\u4e0d\u662f\u5e38\u89c4\u51fd\u6570\u3002\u5728 Python \u4e2d\u521b\u5efa\u751f\u6210\u5668\u975e\u5e38\u7b80\u5355\uff1a\u51fd\u6570\u4e0d\u5e94\u8be5\u6709\u4e00\u4e2a\u5355\u72ec\u7684 `return` \u503c\uff0c\u800c\u662f\u5e94\u8be5 with `yield` \u8fde\u7eed\u8fd4\u56de\u4e00\u7cfb\u5217\u503c\u3002\u901a\u5e38\uff0c`yield` \u8bed\u53e5\u653e\u7f6e\u5728\u67d0\u79cd\u5faa\u73af\u4e2d\u3002\u4e0b\u9762\u662f\u4e00\u4e2a\u7b80\u5355\u793a\u4f8b\uff0c\u751f\u6210\u5668\u53ea\u662f\u7b80\u5355\u8ba1\u6570\u5230\u7ed9\u5b9a\u6570\u5b57\uff1a\n\n```python\ndef my_generator(x):\n    for i in range(x):\n        yield i\n```\n\n\u60a8\u4ee5\u4e0e\u5e38\u89c4\u51fd\u6570\u76f8\u540c\u7684\u65b9\u5f0f\u5c06\u751f\u6210\u5668\u63d0\u4f9b\u7ed9 Gradio\u3002\u4f8b\u5982\uff0c\u8fd9\u662f\u4e00\u4e2a\uff08\u865a\u62df\u7684\uff09\u56fe\u50cf\u751f\u6210\u6a21\u578b\uff0c\u5b83\u5728\u8f93\u51fa\u56fe\u50cf\u4e4b\u524d\u751f\u6210\u6570\u4e2a\u6b65\u9aa4\u7684\u566a\u97f3\uff1a\n\n$code_fake_diffusion\n$demo_fake_diffusion\n\n\u8bf7\u6ce8\u610f\uff0c\u6211\u4eec\u5728\u8fed\u4ee3\u5668\u4e2d\u6dfb\u52a0\u4e86 `time.sleep(1)`\uff0c\u4ee5\u521b\u5efa\u6b65\u9aa4\u4e4b\u95f4\u7684\u4eba\u5de5\u6682\u505c\uff0c\u4ee5\u4fbf\u60a8\u53ef\u4ee5\u89c2\u5bdf\u8fed\u4ee3\u5668\u7684\u6b65\u9aa4\uff08\u5728\u771f\u5b9e\u7684\u56fe\u50cf\u751f\u6210\u6a21\u578b\u4e2d\uff0c\u8fd9\u53ef\u80fd\u662f\u4e0d\u5fc5\u8981\u7684\uff09\u3002",
      "\u5c06\u751f\u6210\u5668\u63d0\u4f9b\u7ed9 Gradio **\u9700\u8981**\u5728\u5e95\u5c42 Interface \u6216 Blocks \u4e2d\u542f\u7528\u961f\u5217\uff08\u8bf7\u53c2\u9605\u4e0a\u9762\u7684\u961f\u5217\u90e8\u5206\uff09\u3002\n\n## \u8fdb\u5ea6\u6761\n\nGradio \u652f\u6301\u521b\u5efa\u81ea\u5b9a\u4e49\u8fdb\u5ea6\u6761\uff0c\u4ee5\u4fbf\u60a8\u53ef\u4ee5\u81ea\u5b9a\u4e49\u548c\u63a7\u5236\u5411\u7528\u6237\u663e\u793a\u7684\u8fdb\u5ea6\u66f4\u65b0\u3002\u8981\u542f\u7528\u6b64\u529f\u80fd\uff0c\u53ea\u9700\u4e3a\u65b9\u6cd5\u6dfb\u52a0\u4e00\u4e2a\u9ed8\u8ba4\u503c\u4e3a `gr.Progress` \u5b9e\u4f8b\u7684\u53c2\u6570\u5373\u53ef\u3002\u7136\u540e\uff0c\u60a8\u53ef\u4ee5\u76f4\u63a5\u8c03\u7528\u6b64\u5b9e\u4f8b\u5e76\u4f20\u5165 0 \u5230 1 \u4e4b\u95f4\u7684\u6d6e\u70b9\u6570\u6765\u66f4\u65b0\u8fdb\u5ea6\u7ea7\u522b\uff0c\u6216\u8005 with `Progress` \u5b9e\u4f8b\u7684 `tqdm()` \u65b9\u6cd5\u6765\u8ddf\u8e2a\u53ef\u8fed\u4ee3\u5bf9\u8c61\u4e0a\u7684\u8fdb\u5ea6\uff0c\u5982\u4e0b\u6240\u793a\u3002\u5fc5\u987b\u542f\u7528\u961f\u5217\u4ee5\u8fdb\u884c\u8fdb\u5ea6\u66f4\u65b0\u3002\n\n$code_progress_simple\n$demo_progress_simple\n\n\u5982\u679c\u60a8 with `tqdm` \u5e93\uff0c\u5e76\u4e14\u5e0c\u671b\u4ece\u51fd\u6570\u5185\u90e8\u7684\u4efb\u4f55 `tqdm.tqdm` \u81ea\u52a8\u62a5\u544a\u8fdb\u5ea6\u66f4\u65b0\uff0c\u8bf7\u5c06\u9ed8\u8ba4\u53c2\u6570\u8bbe\u7f6e\u4e3a `gr.Progress(track_tqdm=True)`\uff01\n\n## \u6279\u5904\u7406\u51fd\u6570 (Batch Functions)\n\nGradio \u652f\u6301\u4f20\u9012*\u6279\u5904\u7406*\u51fd\u6570\u3002\u6279\u5904\u7406\u51fd\u6570\u53ea\u662f\u63a5\u53d7\u8f93\u5165\u5217\u8868\u5e76\u8fd4\u56de\u9884\u6d4b\u5217\u8868\u7684\u51fd\u6570\u3002\n\n\u4f8b\u5982\uff0c\u8fd9\u662f\u4e00\u4e2a\u6279\u5904\u7406\u51fd\u6570\uff0c\u5b83\u63a5\u53d7\u4e24\u4e2a\u8f93\u5165\u5217\u8868\uff08\u4e00\u4e2a\u5355\u8bcd\u5217\u8868\u548c\u4e00\u4e2a\u6574\u6570\u5217\u8868\uff09\uff0c\u5e76\u8fd4\u56de\u4fee\u526a\u8fc7\u7684\u5355\u8bcd\u5217\u8868\u4f5c\u4e3a\u8f93\u51fa\uff1a\n\n```python\nimport time\n\ndef trim_words(words, lens):\n    trimmed_words = []\n    time.sleep(5)\n    for w, l in zip(words, lens):\n        trimmed_words.append(w[:int(l)])\n    return [trimmed_words]\n    for w, l in zip(words, lens):\n```\n\n\u4f7f\u7528\u6279\u5904\u7406\u51fd\u6570\u7684\u4f18\u70b9\u662f\uff0c\u5982\u679c\u542f\u7528\u4e86\u961f\u5217\uff0cGradio \u670d\u52a1\u5668\u53ef\u4ee5\u81ea\u52a8*\u6279\u5904\u7406*\u4f20\u5165\u7684\u8bf7\u6c42\u5e76\u5e76\u884c\u5904\u7406\u5b83\u4eec\uff0c\u4ece\u800c\u53ef\u80fd\u52a0\u5feb\u6f14\u793a\u901f\u5ea6\u3002\u4ee5\u4e0b\u662f Gradio \u4ee3\u7801\u7684\u793a\u4f8b\uff08\u8bf7\u6ce8\u610f `batch=True` \u548c `max_batch_size=16` - \u8fd9\u4e24\u4e2a\u53c2\u6570\u90fd\u53ef\u4ee5\u4f20\u9012\u7ed9\u4e8b\u4ef6\u89e6\u53d1\u5668\u6216 `Interface` \u7c7b\uff09\n\nwith `Interface`\uff1a\n\n```python\ndemo = gr.Interface(trim_words, [\"textbox\", \"number\"], [\"output\"],\n                    batch=True, max_batch_size=16)\ndemo.queue()\ndemo.launch()\n```\n\nwith `Blocks`\uff1a\n\n```python\nimport gradio as gr",
      "with `Interface`\uff1a\n\n```python\ndemo = gr.Interface(trim_words, [\"textbox\", \"number\"], [\"output\"],\n                    batch=True, max_batch_size=16)\ndemo.queue()\ndemo.launch()\n```\n\nwith `Blocks`\uff1a\n\n```python\nimport gradio as gr\n\nwith gr.Blocks() as demo:\n    with gr.Row():\n        word = gr.Textbox(label=\"word\")\n        leng = gr.Number(label=\"leng\")\n        output = gr.Textbox(label=\"Output\")\n    with gr.Row():\n        run = gr.Button()\n\n    event = run.click(trim_words, [word, leng], output, batch=True, max_batch_size=16)\n\ndemo.queue()\ndemo.launch()\n```\n\n\u5728\u4e0a\u9762\u7684\u793a\u4f8b\u4e2d\uff0c\u53ef\u4ee5\u5e76\u884c\u5904\u7406 16 \u4e2a\u8bf7\u6c42\uff08\u603b\u63a8\u7406\u65f6\u95f4\u4e3a 5 \u79d2\uff09\uff0c\u800c\u4e0d\u662f\u5206\u522b\u5904\u7406\u6bcf\u4e2a\u8bf7\u6c42\uff08\u603b\u63a8\u7406\u65f6\u95f4\u4e3a 80 \u79d2\uff09\u3002\u8bb8\u591a Hugging Face \u7684 `transformers` \u548c `diffusers` \u6a21\u578b\u5728 Gradio \u7684\u6279\u5904\u7406\u6a21\u5f0f\u4e0b\u81ea\u7136\u5de5\u4f5c\uff1a\u8fd9\u662f[\u4f7f\u7528\u6279\u5904\u7406\u751f\u6210\u56fe\u50cf\u7684\u793a\u4f8b\u6f14\u793a](https://github.com/gradio-app/gradio/blob/main/demo/diffusers_with_batching/run.py)\n\n\u6ce8\u610f\uff1a\u4f7f\u7528 Gradio \u7684\u6279\u5904\u7406\u51fd\u6570 **requires** \u5728\u5e95\u5c42 Interface \u6216 Blocks \u4e2d\u542f\u7528\u961f\u5217\uff08\u8bf7\u53c2\u9605\u4e0a\u9762\u7684\u961f\u5217\u90e8\u5206\uff09\u3002\n\n## Gradio \u7b14\u8bb0\u672c (Colab Notebooks)\n\nGradio \u53ef\u4ee5\u5728\u4efb\u4f55\u8fd0\u884c Python \u7684\u5730\u65b9\u8fd0\u884c\uff0c\u5305\u62ec\u672c\u5730 Jupyter \u7b14\u8bb0\u672c\u548c\u534f\u4f5c\u7b14\u8bb0\u672c\uff0c\u5982[Google Colab](https://colab.research.google.com/)\u3002\u5bf9\u4e8e\u672c\u5730 Jupyter \u7b14\u8bb0\u672c\u548c Google Colab \u7b14\u8bb0\u672c\uff0cGradio \u5728\u672c\u5730\u670d\u52a1\u5668\u4e0a\u8fd0\u884c\uff0c\u60a8\u53ef\u4ee5\u5728\u6d4f\u89c8\u5668\u4e2d\u4e0e\u4e4b\u4ea4\u4e92\u3002\uff08\u6ce8\u610f\uff1a\u5bf9\u4e8e Google Colab\uff0c\u8fd9\u662f\u901a\u8fc7[\u670d\u52a1\u5de5\u4f5c\u5668\u96a7\u9053](https://github.com/tensorflow/tensorboard/blob/master/docs/design/colab_integration.md)\u5b9e\u73b0\u7684\uff0c\u60a8\u7684\u6d4f\u89c8\u5668\u9700\u8981\u542f\u7528 cookies\u3002\uff09\u5bf9\u4e8e\u5176\u4ed6\u8fdc\u7a0b\u7b14\u8bb0\u672c\uff0cGradio \u4e5f\u5c06\u5728\u670d\u52a1\u5668\u4e0a\u8fd0\u884c\uff0c\u4f46\u60a8\u9700\u8981\u4f7f\u7528[SSH \u96a7\u9053](https://coderwall.com/p/ohk6cg/remote-access-to-ipython-notebooks-via-ssh)\u5728\u672c\u5730\u6d4f\u89c8\u5668\u4e2d\u67e5\u770b\u5e94\u7528\u7a0b\u5e8f\u3002\u901a\u5e38\uff0c\u66f4\u7b80\u5355\u7684\u9009\u62e9\u662f\u4f7f\u7528 Gradio \u5185\u7f6e\u7684\u516c\u5171\u94fe\u63a5\uff0c[\u5728\u4e0b\u4e00\u7bc7\u6307\u5357\u4e2d\u8ba8\u8bba](/sharing-your-app/#sharing-demos)\u3002",
      "!--Copyright 2023 The HuggingFace Team. All rights reserved.\n\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\nthe License. You may obtain a copy of the License at\n\nhttp://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software distributed under the License is distributed on\nan \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n\n\u26a0\ufe0f Note that this file is in Markdown but contain specific syntax for our doc-builder (similar to MDX) that may not be\nrendered properly in your Markdown viewer.\n\n-->\n\n# Training on TPU with TensorFlow\n\n<Tip>\n\nIf you don't need long explanations and just want TPU code samples to get started with, check out [our TPU example notebook!](https://colab.research.google.com/github/huggingface/notebooks/blob/main/examples/tpu_training-tf.ipynb)\n\n</Tip>\n\n### What is a TPU?\n\nA TPU is a **Tensor Processing Unit.** They are hardware designed by Google, which are used to greatly speed up the tensor computations within neural networks, much like GPUs. They can be used for both network training and inference. They are generally accessed through Google\u2019s cloud services, but small TPUs can also be accessed directly for free through Google Colab and Kaggle Kernels.\n\nBecause [all TensorFlow models in \ud83e\udd17 Transformers are Keras models](https://huggingface.co/blog/tensorflow-philosophy), most of the methods in this document are generally applicable to TPU training for any Keras model! However, there are a few points that are specific to the HuggingFace ecosystem (hug-o-system?) of Transformers and Datasets, and we\u2019ll make sure to flag them up when we get to them.\n\n### What kinds of TPU are available?\n\nNew users are often very confused by the range of TPUs, and the different ways to access them. The first key distinction to understand is the difference between **TPU Nodes** and **TPU VMs.**\n\nWhen you use a **TPU Node**, you are effectively indirectly accessing a remote TPU. You will need a separate VM, which will initialize your network and data pipeline and then forward them to the remote node. When you use a TPU on Google Colab, you are accessing it in the **TPU Node** style.",
      "Using TPU Nodes can have some quite unexpected behaviour for people who aren\u2019t used to them! In particular, because the TPU is located on a physically different system to the machine you\u2019re running your Python code on, your data cannot be local to your machine - any data pipeline that loads from your machine\u2019s internal storage will totally fail! Instead, data must be stored in Google Cloud Storage where your data pipeline can still access it, even when the pipeline is running on the remote TPU node.\n\n<Tip>\n\nIf you can fit all your data in memory as `np.ndarray` or `tf.Tensor`, then you can `fit()` on that data even when using Colab or a TPU Node, without needing to upload it to Google Cloud Storage.\n\n</Tip>\n\n<Tip>\n\n**\ud83e\udd17Specific Hugging Face Tip\ud83e\udd17:** The methods `Dataset.to_tf_dataset()` and its higher-level wrapper `model.prepare_tf_dataset()` , which you will see throughout our TF code examples, will both fail on a TPU Node. The reason for this is that even though they create a `tf.data.Dataset` it is not a \u201cpure\u201d `tf.data` pipeline and uses `tf.numpy_function` or `Dataset.from_generator()` to stream data from the underlying HuggingFace `Dataset`. This HuggingFace `Dataset` is backed by data that is on a local disc and which the remote TPU Node will not be able to read.\n\n</Tip>\n\nThe second way to access a TPU is via a **TPU VM.** When using a TPU VM, you connect directly to the machine that the TPU is attached to, much like training on a GPU VM. TPU VMs are generally easier to work with, particularly when it comes to your data pipeline. All of the above warnings do not apply to TPU VMs!\n\nThis is an opinionated document, so here\u2019s our opinion: **Avoid using TPU Node if possible.** It is more confusing and more difficult to debug than TPU VMs. It is also likely to be unsupported in future - Google\u2019s latest TPU, TPUv4, can only be accessed as a TPU VM, which suggests that TPU Nodes are increasingly going to become a \u201clegacy\u201d access method. However, we understand that the only free TPU access is on Colab and Kaggle Kernels, which uses TPU Node - so we\u2019ll try to explain how to handle it if you have to! Check the [TPU example notebook](https://colab.research.google.com/github/huggingface/notebooks/blob/main/examples/tpu_training-tf.ipynb) for code samples that explain this in more detail.\n\n### What sizes of TPU are available?",
      "### What sizes of TPU are available?\n\nA single TPU (a v2-8/v3-8/v4-8) runs 8 replicas. TPUs exist in **pods** that can run hundreds or thousands of replicas simultaneously. When you use more than a single TPU but less than a whole pod (for example, a v3-32), your TPU fleet is referred to as a **pod slice.**\n\nWhen you access a free TPU via Colab, you generally get a single v2-8 TPU.\n\n### I keep hearing about this XLA thing. What\u2019s XLA, and how does it relate to TPUs?\n\nXLA is an optimizing compiler, used by both TensorFlow and JAX. In JAX it is the only compiler, whereas in TensorFlow it is optional (but mandatory on TPU!). The easiest way to enable it when training a Keras model is to pass the argument `jit_compile=True` to `model.compile()`. If you don\u2019t get any errors and performance is good, that\u2019s a great sign that you\u2019re ready to move to TPU!\n\nDebugging on TPU is generally a bit harder than on CPU/GPU, so we recommend getting your code running on CPU/GPU with XLA first before trying it on TPU. You don\u2019t have to train for long, of course - just for a few steps to make sure that your model and data pipeline are working like you expect them to.\n\n<Tip>\n\nXLA compiled code is usually faster - so even if you\u2019re not planning to run on TPU, adding `jit_compile=True` can improve your performance. Be sure to note the caveats below about XLA compatibility, though!\n\n</Tip>\n\n<Tip warning={true}>\n\n**Tip born of painful experience:** Although using `jit_compile=True` is a good way to get a speed boost and test if your CPU/GPU code is XLA-compatible, it can actually cause a lot of problems if you leave it in when actually training on TPU. XLA compilation will happen implicitly on TPU, so remember to remove that line before actually running your code on a TPU!\n\n</Tip>\n\n### How do I make my model XLA compatible?\n\nIn many cases, your code is probably XLA-compatible already! However, there are a few things that work in normal TensorFlow that don\u2019t work in XLA. We\u2019ve distilled them into three core rules below:\n\n<Tip>",
      "### How do I make my model XLA compatible?\n\nIn many cases, your code is probably XLA-compatible already! However, there are a few things that work in normal TensorFlow that don\u2019t work in XLA. We\u2019ve distilled them into three core rules below:\n\n<Tip>\n\n**\ud83e\udd17Specific HuggingFace Tip\ud83e\udd17:** We\u2019ve put a lot of effort into rewriting our TensorFlow models and loss functions to be XLA-compatible. Our models and loss functions generally obey rule #1 and #2 by default, so you can skip over them if you\u2019re using `transformers` models. Don\u2019t forget about these rules when writing your own models and loss functions, though!\n\n</Tip>\n\n#### XLA Rule #1: Your code cannot have \u201cdata-dependent conditionals\u201d\n\nWhat that means is that any `if` statement cannot depend on values inside a `tf.Tensor`. For example, this code block cannot be compiled with XLA!\n\n```python\nif tf.reduce_sum(tensor) > 10:\n    tensor = tensor / 2.0\n```\n\nThis might seem very restrictive at first, but most neural net code doesn\u2019t need to do this. You can often get around this restriction by using `tf.cond` (see the documentation [here](https://www.tensorflow.org/api_docs/python/tf/cond)) or by removing the conditional and finding a clever math trick with indicator variables instead, like so:\n\n```python\nsum_over_10 = tf.cast(tf.reduce_sum(tensor) > 10, tf.float32)\ntensor = tensor / (1.0 + sum_over_10)\n```\n\nThis code has exactly the same effect as the code above, but by avoiding a conditional, we ensure it will compile with XLA without problems!\n\n#### XLA Rule #2: Your code cannot have \u201cdata-dependent shapes\u201d\n\nWhat this means is that the shape of all of the `tf.Tensor` objects in your code cannot depend on their values. For example, the function `tf.unique` cannot be compiled with XLA, because it returns a `tensor` containing one instance of each unique value in the input. The shape of this output will obviously be different depending on how repetitive the input `Tensor` was, and so XLA refuses to handle it!\n\nIn general, most neural network code obeys rule #2 by default. However, there are a few common cases where it becomes a problem. One very common one is when you use **label masking**, setting your labels to a negative value to indicate that those positions should be ignored when computing the loss. If you look at NumPy or PyTorch loss functions that support label masking, you will often see code like this that uses [boolean indexing](https://numpy.org/doc/stable/user/basics.indexing.html#boolean-array-indexing):",
      "```python\nlabel_mask = labels >= 0\nmasked_outputs = outputs[label_mask]\nmasked_labels = labels[label_mask]\nloss = compute_loss(masked_outputs, masked_labels)\nmean_loss = torch.mean(loss)\n```\n\nThis code is totally fine in NumPy or PyTorch, but it breaks in XLA! Why? Because the shape of `masked_outputs` and `masked_labels` depends on how many positions are masked - that makes it a **data-dependent shape.** However, just like for rule #1, we can often rewrite this code to yield exactly the same output without any data-dependent shapes.\n\n```python\nlabel_mask = tf.cast(labels >= 0, tf.float32)\nloss = compute_loss(outputs, labels)\nloss = loss * label_mask  # Set negative label positions to 0\nmean_loss = tf.reduce_sum(loss) / tf.reduce_sum(label_mask)\n```\n\nHere, we avoid data-dependent shapes by computing the loss for every position, but zeroing out the masked positions in both the numerator and denominator when we calculate the mean, which yields exactly the same result as the first block while maintaining XLA compatibility. Note that we use the same trick as in rule #1 - converting a `tf.bool` to `tf.float32` and using it as an indicator variable. This is a really useful trick, so remember it if you need to convert your own code to XLA!\n\n#### XLA Rule #3: XLA will need to recompile your model for every different input shape it sees\n\nThis is the big one. What this means is that if your input shapes are very variable, XLA will have to recompile your model over and over, which will create huge performance problems. This commonly arises in NLP models, where input texts have variable lengths after tokenization. In other modalities, static shapes are more common and this rule is much less of a problem.\n\nHow can you get around rule #3? The key is **padding** - if you pad all your inputs to the same length, and then use an `attention_mask`, you can get the same results as you\u2019d get from variable shapes, but without any XLA issues. However, excessive padding can cause severe slowdown too - if you pad all your samples to the maximum length in the whole dataset, you might end up with batches consisting endless padding tokens, which will waste a lot of compute and memory!\n\nThere isn\u2019t a perfect solution to this problem. However, you can try some tricks. One very useful trick is to **pad batches of samples up to a multiple of a number like 32 or 64 tokens.** This often only increases the number of tokens by a small amount, but it hugely reduces the number of unique input shapes, because every input shape now has to be a multiple of 32 or 64. Fewer unique input shapes means fewer XLA compilations!\n\n<Tip>",
      "<Tip>\n\n**\ud83e\udd17Specific HuggingFace Tip\ud83e\udd17:** Our tokenizers and data collators have methods that can help you here. You can use `padding=\"max_length\"` or `padding=\"longest\"` when calling tokenizers to get them to output padded data. Our tokenizers and data collators also have a `pad_to_multiple_of` argument that you can use to reduce the number of unique input shapes you see!\n\n</Tip>\n\n### How do I actually train my model on TPU?\n\nOnce your training is XLA-compatible and (if you\u2019re using TPU Node / Colab) your dataset has been prepared appropriately, running on TPU is surprisingly easy! All you really need to change in your code is to add a few lines to initialize your TPU, and to ensure that your model and dataset are created inside a `TPUStrategy` scope. Take a look at [our TPU example notebook](https://colab.research.google.com/github/huggingface/notebooks/blob/main/examples/tpu_training-tf.ipynb) to see this in action!\n\n### Summary\n\nThere was a lot in here, so let\u2019s summarize with a quick checklist you can follow when you want to get your model ready for TPU training:\n\n- Make sure your code follows the three rules of XLA\n- Compile your model with `jit_compile=True` on CPU/GPU and confirm that you can train it with XLA\n- Either load your dataset into memory or use a TPU-compatible dataset loading approach (see [notebook](https://colab.research.google.com/github/huggingface/notebooks/blob/main/examples/tpu_training-tf.ipynb))\n- Migrate your code either to Colab (with accelerator set to \u201cTPU\u201d) or a TPU VM on Google Cloud\n- Add TPU initializer code (see [notebook](https://colab.research.google.com/github/huggingface/notebooks/blob/main/examples/tpu_training-tf.ipynb))\n- Create your `TPUStrategy` and make sure dataset loading and model creation are inside the `strategy.scope()` (see [notebook](https://colab.research.google.com/github/huggingface/notebooks/blob/main/examples/tpu_training-tf.ipynb))\n- Don\u2019t forget to take `jit_compile=True` out again when you move to TPU!\n- \ud83d\ude4f\ud83d\ude4f\ud83d\ude4f\ud83e\udd7a\ud83e\udd7a\ud83e\udd7a\n- Call model.fit()\n- You did it!",
      "Gradio Demo: blocks_random_slider\n\n\n```\n!pip install -q gradio \n```\n\n\n```\n\nimport gradio as gr\n\n\ndef func(slider_1, slider_2):\n    return slider_1 * 5 + slider_2\n\n\nwith gr.Blocks() as demo:\n    slider = gr.Slider(minimum=-10.2, maximum=15, label=\"Random Slider (Static)\", randomize=True)\n    slider_1 = gr.Slider(minimum=100, maximum=200, label=\"Random Slider (Input 1)\", randomize=True)\n    slider_2 = gr.Slider(minimum=10, maximum=23.2, label=\"Random Slider (Input 2)\", randomize=True)\n    slider_3 = gr.Slider(value=3, label=\"Non random slider\")\n    btn = gr.Button(\"Run\")\n    btn.click(func, inputs=[slider_1, slider_2], outputs=gr.Number())\n\nif __name__ == \"__main__\":\n    demo.launch()\n\n```",
      "Git over SSH\n\nYou can access and write data in repositories on huggingface.co using SSH (Secure Shell Protocol). When you connect via SSH, you authenticate using a private key file on your local machine.\n\nSome actions, such as pushing changes, or cloning private repositories, will require you to upload your SSH public key to your account on huggingface.co.\n\nYou can use a pre-existing SSH key, or generate a new one specifically for huggingface.co.\n\n## Checking for existing SSH keys\n\nIf you have an existing SSH key, you can use that key to authenticate Git operations over SSH.\n\nSSH keys are usually located under `~/.ssh` on Mac & Linux, and under `C:\\\\Users\\\\<username>\\\\.ssh` on Windows. List files under that directory and look for files of the form:\n\n- id_rsa.pub\n- id_ecdsa.pub\n- id_ed25519.pub\n\nThose files contain your SSH public key.\n\nIf you don't have such file under `~/.ssh`, you will have to [generate a new key](#generating-a-new-ssh-keypair). Otherwise, you can [add your existing SSH public key(s) to your huggingface.co account](#add-a-ssh-key-to-your-account).\n\n## Generating a new SSH keypair\n\nIf you don't have any SSH keys on your machine, you can use `ssh-keygen` to generate a new SSH key pair (public + private keys):\n\n```\n$ ssh-keygen -t ed25519 -C \"your.email@example.co\"\n```\n\nWe recommend entering a passphrase when you are prompted to. A passphrase is an extra layer of security: it is a password that will be prompted whenever you use your SSH key.\n\nOnce your new key is generated, add it to your SSH agent with `ssh-add`:\n\n```\n$ ssh-add ~/.ssh/id_ed25519\n```\n\nIf you chose a different location than the default to store your SSH key, you would have to replace `~/.ssh/id_ed25519` with the file location you used.\n\n## Add a SSH key to your account\n\nTo access private repositories with SSH, or to push changes via SSH, you will need to add your SSH public key to your huggingface.co account. You can manage your SSH keys [in your user settings](https://huggingface.co/settings/keys).\n\nTo add a SSH key to your account, click on the \"Add SSH key\" button.\n\nThen, enter a name for this key (for example, \"Personal computer\"), and copy and paste the content of your **public** SSH key in the area below. The public key is located in the `~/.ssh/id_XXXX.pub` file you found or generated in the previous steps.",
      "Click on \"Add key\", and voil\u00e0! You have added a SSH key to your huggingface.co account.\n\n\n## Testing your SSH authentication\n\nOnce you have added your SSH key to your huggingface.co account, you can test that the connection works as expected.\n\nIn a terminal, run:\n```\n$ ssh -T git@hf.co\n```\n\nIf you see a message with your username, congrats! Everything went well, you are ready to use git over SSH.\n\nOtherwise, if the message states something like the following, make sure your SSH key is actually used by your SSH agent.\n```\nHi anonymous, welcome to Hugging Face.\n```",
      "!---\nCopyright 2022 The HuggingFace Team. All rights reserved.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n-->\n\n# Token classification with LayoutLMv3 (PyTorch version)\n\nThis directory contains a script, `run_funsd_cord.py`, that can be used to fine-tune (or evaluate) LayoutLMv3 on form understanding datasets, such as [FUNSD](https://guillaumejaume.github.io/FUNSD/) and [CORD](https://github.com/clovaai/cord).\n\nThe script `run_funsd_cord.py` leverages the \ud83e\udd17 Datasets library and the Trainer API. You can easily customize it to your needs.\n\n## Fine-tuning on FUNSD\n\nFine-tuning LayoutLMv3 for token classification on [FUNSD](https://guillaumejaume.github.io/FUNSD/) can be done as follows:\n\n```bash\npython run_funsd_cord.py \\\n  --model_name_or_path microsoft/layoutlmv3-base \\\n  --dataset_name funsd \\\n  --output_dir layoutlmv3-test \\\n  --do_train \\\n  --do_eval \\\n  --max_steps 1000 \\\n  --evaluation_strategy steps \\\n  --eval_steps 100 \\\n  --learning_rate 1e-5 \\\n  --load_best_model_at_end \\\n  --metric_for_best_model \"eval_f1\" \\\n  --push_to_hub \\\n  --push_to_hub\u00b0model_id layoutlmv3-finetuned-funsd\n```\n\n\ud83d\udc40 The resulting model can be found here: https://huggingface.co/nielsr/layoutlmv3-finetuned-funsd. By specifying the `push_to_hub` flag, the model gets uploaded automatically to the hub (regularly), together with a model card, which includes metrics such as precision, recall and F1. Note that you can easily update the model card, as it's just a README file of the respective repo on the hub.\n\nThere's also the \"Training metrics\" [tab](https://huggingface.co/nielsr/layoutlmv3-finetuned-funsd/tensorboard), which shows Tensorboard logs over the course of training. Pretty neat, huh?\n\n## Fine-tuning on CORD",
      "There's also the \"Training metrics\" [tab](https://huggingface.co/nielsr/layoutlmv3-finetuned-funsd/tensorboard), which shows Tensorboard logs over the course of training. Pretty neat, huh?\n\n## Fine-tuning on CORD\n\nFine-tuning LayoutLMv3 for token classification on [CORD](https://github.com/clovaai/cord) can be done as follows:\n\n```bash\npython run_funsd_cord.py \\\n  --model_name_or_path microsoft/layoutlmv3-base \\\n  --dataset_name cord \\\n  --output_dir layoutlmv3-test \\\n  --do_train \\\n  --do_eval \\\n  --max_steps 1000 \\\n  --evaluation_strategy steps \\\n  --eval_steps 100 \\\n  --learning_rate 5e-5 \\\n  --load_best_model_at_end \\\n  --metric_for_best_model \"eval_f1\" \\\n  --push_to_hub \\\n  --push_to_hub\u00b0model_id layoutlmv3-finetuned-cord\n```\n\n\ud83d\udc40 The resulting model can be found here: https://huggingface.co/nielsr/layoutlmv3-finetuned-cord. Note that a model card gets generated automatically in case you specify the `push_to_hub` flag.",
      "State in Blocks\n\nWe covered [State in Interfaces](https://gradio.app/interface-state), this guide takes a look at state in Blocks, which works mostly the same.\n\n## Global State\n\nGlobal state in Blocks works the same as in Interface. Any variable created outside a function call is a reference shared between all users.\n\n## Session State\n\nGradio supports session **state**, where data persists across multiple submits within a page session, in Blocks apps as well. To reiterate, session data is _not_ shared between different users of your model. To store data in a session state, you need to do three things:\n\n1. Create a `gr.State()` object. If there is a default value to this stateful object, pass that into the constructor.\n2. In the event listener, put the `State` object as an input and output.\n3. In the event listener function, add the variable to the input parameters and the return value.\n\nLet's take a look at a game of hangman.\n\n$code_hangman\n$demo_hangman\n\nLet's see how we do each of the 3 steps listed above in this game:\n\n1. We store the used letters in `used_letters_var`. In the constructor of `State`, we set the initial value of this to `[]`, an empty list.\n2. In `btn.click()`, we have a reference to `used_letters_var` in both the inputs and outputs.\n3. In `guess_letter`, we pass the value of this `State` to `used_letters`, and then return an updated value of this `State` in the return statement.\n\nWith more complex apps, you will likely have many State variables storing session state in a single Blocks app.\n\nLearn more about `State` in the [docs](https://gradio.app/docs#state).",
      "\u5982\u4f55\u4f7f\u7528\u5730\u56fe\u7ec4\u4ef6\u7ed8\u5236\u56fe\u8868\n\nRelated spaces:\nTags: PLOTS, MAPS\n\n## \u7b80\u4ecb\n\n\u672c\u6307\u5357\u4ecb\u7ecd\u5982\u4f55\u4f7f\u7528 Gradio \u7684 `Plot` \u7ec4\u4ef6\u5728\u5730\u56fe\u4e0a\u7ed8\u5236\u5730\u7406\u6570\u636e\u3002Gradio \u7684 `Plot` \u7ec4\u4ef6\u53ef\u4ee5\u4e0e Matplotlib\u3001Bokeh \u548c Plotly \u4e00\u8d77\u4f7f\u7528\u3002\u5728\u672c\u6307\u5357\u4e2d\uff0c\u6211\u4eec\u5c06\u4f7f\u7528 Plotly \u8fdb\u884c\u64cd\u4f5c\u3002Plotly \u53ef\u4ee5\u8ba9\u5f00\u53d1\u4eba\u5458\u8f7b\u677e\u521b\u5efa\u5404\u79cd\u5730\u56fe\u6765\u5c55\u793a\u4ed6\u4eec\u7684\u5730\u7406\u6570\u636e\u3002\u70b9\u51fb[\u8fd9\u91cc](https://plotly.com/python/maps/)\u67e5\u770b\u4e00\u4e9b\u793a\u4f8b\u3002\n\n## \u6982\u8ff0\n\n\u6211\u4eec\u5c06\u4f7f\u7528\u7ebd\u7ea6\u5e02\u7684 Airbnb \u6570\u636e\u96c6\uff0c\u8be5\u6570\u636e\u96c6\u6258\u7ba1\u5728 kaggle \u4e0a\uff0c\u70b9\u51fb[\u8fd9\u91cc](https://www.kaggle.com/datasets/dgomonov/new-york-city-airbnb-open-data)\u3002\u6211\u5df2\u7ecf\u5c06\u5176\u4e0a\u4f20\u5230 Hugging Face Hub \u4f5c\u4e3a\u4e00\u4e2a\u6570\u636e\u96c6\uff0c\u65b9\u4fbf\u4f7f\u7528\u548c\u4e0b\u8f7d\uff0c\u70b9\u51fb[\u8fd9\u91cc](https://huggingface.co/datasets/gradio/NYC-Airbnb-Open-Data)\u3002\u4f7f\u7528\u8fd9\u4e9b\u6570\u636e\uff0c\u6211\u4eec\u5c06\u5728\u5730\u56fe\u4e0a\u7ed8\u5236 Airbnb \u7684\u4f4d\u7f6e\uff0c\u5e76\u5141\u8bb8\u57fa\u4e8e\u4ef7\u683c\u548c\u4f4d\u7f6e\u8fdb\u884c\u7b5b\u9009\u3002\u4e0b\u9762\u662f\u6211\u4eec\u5c06\u8981\u6784\u5efa\u7684\u6f14\u793a\u3002 \u26a1\ufe0f\n\n$demo_map_airbnb\n\n## \u6b65\u9aa4 1-\u52a0\u8f7d CSV \u6570\u636e \ud83d\udcbe\n\n\u8ba9\u6211\u4eec\u9996\u5148\u4ece Hugging Face Hub \u52a0\u8f7d\u7ebd\u7ea6\u5e02\u7684 Airbnb \u6570\u636e\u3002\n\n```python\nfrom datasets import load_dataset\n\ndataset = load_dataset(\"gradio/NYC-Airbnb-Open-Data\", split=\"train\")\ndf = dataset.to_pandas()\n\ndef filter_map(min_price, max_price, boroughs):\n    new_df = df[(df['neighbourhood_group'].isin(boroughs)) &\n            (df['price'] > min_price) & (df['price'] < max_price)]\n    names = new_df[\"name\"].tolist()\n    prices = new_df[\"price\"].tolist()\n    text_list = [(names[i], prices[i]) for i in range(0, len(names))]\n```",
      "\u5728\u4e0a\u9762\u7684\u4ee3\u7801\u4e2d\uff0c\u6211\u4eec\u5148\u5c06 CSV \u6570\u636e\u52a0\u8f7d\u5230\u4e00\u4e2a pandas dataframe \u4e2d\u3002\u8ba9\u6211\u4eec\u9996\u5148\u5b9a\u4e49\u4e00\u4e2a\u51fd\u6570\uff0c\u8fd9\u5c06\u4f5c\u4e3a gradio \u5e94\u7528\u7a0b\u5e8f\u7684\u9884\u6d4b\u51fd\u6570\u3002\u8be5\u51fd\u6570\u5c06\u63a5\u53d7\u6700\u4f4e\u4ef7\u683c\u3001\u6700\u9ad8\u4ef7\u683c\u8303\u56f4\u548c\u7b5b\u9009\u7ed3\u679c\u5730\u533a\u7684\u5217\u8868\u4f5c\u4e3a\u53c2\u6570\u3002\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u4f20\u5165\u7684\u503c (`min_price`\u3001`max_price` \u548c\u5730\u533a\u5217\u8868) \u6765\u7b5b\u9009\u6570\u636e\u6846\u5e76\u521b\u5efa `new_df`\u3002\u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u5c06\u521b\u5efa\u5305\u542b\u6bcf\u4e2a Airbnb \u7684\u540d\u79f0\u548c\u4ef7\u683c\u7684 `text_list`\uff0c\u4ee5\u4fbf\u5728\u5730\u56fe\u4e0a\u4f7f\u7528\u4f5c\u4e3a\u6807\u7b7e\u3002\n\n## \u6b65\u9aa4 2-\u5730\u56fe\u56fe\u8868 \ud83c\udf10\n\nPlotly \u4f7f\u5f97\u5904\u7406\u5730\u56fe\u53d8\u5f97\u5f88\u5bb9\u6613\u3002\u8ba9\u6211\u4eec\u770b\u4e00\u4e0b\u4e0b\u9762\u7684\u4ee3\u7801\uff0c\u4e86\u89e3\u5982\u4f55\u521b\u5efa\u5730\u56fe\u56fe\u8868\u3002\n\n```python\nimport plotly.graph_objects as go\n\nfig = go.Figure(go.Scattermapbox(\n            customdata=text_list,\n            lat=new_df['latitude'].tolist(),\n            lon=new_df['longitude'].tolist(),\n            mode='markers',\n            marker=go.scattermapbox.Marker(\n                size=6\n            ),\n            hoverinfo=\"text\",\n            hovertemplate='<b>Name</b>: %{customdata[0]}<br><b>Price</b>: $%{customdata[1]}'\n        ))\n\nfig.update_layout(\n    mapbox_style=\"open-street-map\",\n    hovermode='closest',\n    mapbox=dict(\n        bearing=0,\n        center=go.layout.mapbox.Center(\n            lat=40.67,\n            lon=-73.90\n        ),\n        pitch=0,\n        zoom=9\n    ),\n)\n```\n\n\u4e0a\u9762\u7684\u4ee3\u7801\u4e2d\uff0c\u6211\u4eec\u901a\u8fc7\u4f20\u5165\u7ecf\u7eac\u5ea6\u5217\u8868\u6765\u521b\u5efa\u4e00\u4e2a\u6563\u70b9\u56fe\u3002\u6211\u4eec\u8fd8\u4f20\u5165\u4e86\u540d\u79f0\u548c\u4ef7\u683c\u7684\u81ea\u5b9a\u4e49\u6570\u636e\uff0c\u4ee5\u4fbf\u5728\u9f20\u6807\u60ac\u505c\u5728\u6bcf\u4e2a\u6807\u8bb0\u4e0a\u65f6\u663e\u793a\u989d\u5916\u7684\u4fe1\u606f\u3002\u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u4f7f\u7528 `update_layout` \u6765\u6307\u5b9a\u5176\u4ed6\u5730\u56fe\u8bbe\u7f6e\uff0c\u4f8b\u5982\u7f29\u653e\u548c\u5c45\u4e2d\u3002\n\n\u6709\u5173\u4f7f\u7528 Mapbox \u548c Plotly \u521b\u5efa\u6563\u70b9\u56fe\u7684\u66f4\u591a\u4fe1\u606f\uff0c\u8bf7\u70b9\u51fb[\u8fd9\u91cc](https://plotly.com/python/scattermapbox/)\u3002\n\n## \u6b65\u9aa4 3-Gradio \u5e94\u7528\u7a0b\u5e8f \u26a1\ufe0f\n\n\u6211\u4eec\u5c06\u4f7f\u7528\u4e24\u4e2a `gr.Number` \u7ec4\u4ef6\u548c\u4e00\u4e2a `gr.CheckboxGroup` \u7ec4\u4ef6\uff0c\u5141\u8bb8\u7528\u6237\u6307\u5b9a\u4ef7\u683c\u8303\u56f4\u548c\u5730\u533a\u4f4d\u7f6e\u3002\u7136\u540e\uff0c\u6211\u4eec\u5c06\u4f7f\u7528 `gr.Plot` \u7ec4\u4ef6\u4f5c\u4e3a\u6211\u4eec\u4e4b\u524d\u521b\u5efa\u7684 Plotly + Mapbox \u5730\u56fe\u7684\u8f93\u51fa\u3002",
      "```python\nwith gr.Blocks() as demo:\n    with gr.Column():\n        with gr.Row():\n            min_price = gr.Number(value=250, label=\"Minimum Price\")\n            max_price = gr.Number(value=1000, label=\"Maximum Price\")\n        boroughs = gr.CheckboxGroup(choices=[\"Queens\", \"Brooklyn\", \"Manhattan\", \"Bronx\", \"Staten Island\"], value=[\"Queens\", \"Brooklyn\"], label=\"Select Boroughs:\")\n        btn = gr.Button(value=\"Update Filter\")\n        map = gr.Plot()\n    demo.load(filter_map, [min_price, max_price, boroughs], map)\n    btn.click(filter_map, [min_price, max_price, boroughs], map)\n```\n\n\u6211\u4eec\u4f7f\u7528 `gr.Column` \u548c `gr.Row` \u5e03\u5c40\u8fd9\u4e9b\u7ec4\u4ef6\uff0c\u5e76\u4e3a\u6f14\u793a\u52a0\u8f7d\u65f6\u548c\u70b9\u51fb \" \u66f4\u65b0\u7b5b\u9009 \" \u6309\u94ae\u65f6\u6dfb\u52a0\u4e86\u4e8b\u4ef6\u89e6\u53d1\u5668\uff0c\u4ee5\u89e6\u53d1\u5730\u56fe\u66f4\u65b0\u65b0\u7684\u7b5b\u9009\u6761\u4ef6\u3002\n\n\u4ee5\u4e0b\u662f\u5b8c\u6574\u6f14\u793a\u4ee3\u7801\uff1a\n\n$code_map_airbnb\n\n## \u6b65\u9aa4 4-\u90e8\u7f72 Deployment \ud83e\udd17\n\n\u5982\u679c\u4f60\u8fd0\u884c\u4e0a\u9762\u7684\u4ee3\u7801\uff0c\u4f60\u7684\u5e94\u7528\u7a0b\u5e8f\u5c06\u5728\u672c\u5730\u8fd0\u884c\u3002\n\u5982\u679c\u8981\u83b7\u53d6\u4e34\u65f6\u5171\u4eab\u94fe\u63a5\uff0c\u53ef\u4ee5\u5c06 `share=True` \u53c2\u6570\u4f20\u9012\u7ed9 `launch`\u3002\n\n\u4f46\u5982\u679c\u4f60\u60f3\u8981\u4e00\u4e2a\u6c38\u4e45\u7684\u90e8\u7f72\u89e3\u51b3\u65b9\u6848\u5462\uff1f\n\u8ba9\u6211\u4eec\u5c06\u6211\u4eec\u7684 Gradio \u5e94\u7528\u7a0b\u5e8f\u90e8\u7f72\u5230\u514d\u8d39\u7684 HuggingFace Spaces \u5e73\u53f0\u3002\n\n\u5982\u679c\u4f60\u4ee5\u524d\u6ca1\u6709\u4f7f\u7528\u8fc7 Spaces\uff0c\u8bf7\u6309\u7167\u4e4b\u524d\u7684\u6307\u5357[\u8fd9\u91cc](/using_hugging_face_integrations)\u3002\n\n## \u7ed3\u8bba \ud83c\udf89\n\n\u4f60\u5df2\u7ecf\u5b8c\u6210\u4e86\uff01\u8fd9\u662f\u6784\u5efa\u5730\u56fe\u6f14\u793a\u6240\u9700\u7684\u6240\u6709\u4ee3\u7801\u3002\n\n\u94fe\u63a5\u5230\u6f14\u793a\uff1a[\u5730\u56fe\u6f14\u793a](https://huggingface.co/spaces/gradio/map_airbnb)\u548c[\u5b8c\u6574\u4ee3\u7801](https://huggingface.co/spaces/gradio/map_airbnb/blob/main/run.py)\uff08\u5728 Hugging Face Spaces\uff09",
      "SE-ResNet\n\n**SE ResNet** is a variant of a [ResNet](https://www.paperswithcode.com/method/resnet) that employs [squeeze-and-excitation blocks](https://paperswithcode.com/method/squeeze-and-excitation-block) to enable the network to perform dynamic channel-wise feature recalibration.\n\n## How do I use this model on an image?\n\nTo load a pretrained model:\n\n```py\n>>> import timm\n>>> model = timm.create_model('seresnet152d', pretrained=True)\n>>> model.eval()\n```\n\nTo load and preprocess the image:\n\n```py \n>>> import urllib\n>>> from PIL import Image\n>>> from timm.data import resolve_data_config\n>>> from timm.data.transforms_factory import create_transform\n\n>>> config = resolve_data_config({}, model=model)\n>>> transform = create_transform(**config)\n\n>>> url, filename = (\"https://github.com/pytorch/hub/raw/master/images/dog.jpg\", \"dog.jpg\")\n>>> urllib.request.urlretrieve(url, filename)\n>>> img = Image.open(filename).convert('RGB')\n>>> tensor = transform(img).unsqueeze(0) # transform and add batch dimension\n```\n\nTo get the model predictions:\n\n```py\n>>> import torch\n>>> with torch.no_grad():\n...     out = model(tensor)\n>>> probabilities = torch.nn.functional.softmax(out[0], dim=0)\n>>> print(probabilities.shape)\n>>> # prints: torch.Size([1000])\n```\n\nTo get the top-5 predictions class names:\n\n```py\n>>> # Get imagenet class mappings\n>>> url, filename = (\"https://raw.githubusercontent.com/pytorch/hub/master/imagenet_classes.txt\", \"imagenet_classes.txt\")\n>>> urllib.request.urlretrieve(url, filename) \n>>> with open(\"imagenet_classes.txt\", \"r\") as f:\n...     categories = [s.strip() for s in f.readlines()]\n\n>>> # Print top categories per image\n>>> top5_prob, top5_catid = torch.topk(probabilities, 5)\n>>> for i in range(top5_prob.size(0)):\n...     print(categories[top5_catid[i]], top5_prob[i].item())\n>>> # prints class names and probabilities like:\n>>> # [('Samoyed', 0.6425196528434753), ('Pomeranian', 0.04062102362513542), ('keeshond', 0.03186424449086189), ('white wolf', 0.01739676296710968), ('Eskimo dog', 0.011717947199940681)]\n```\n\nReplace the model name with the variant you want to use, e.g. `seresnet152d`. You can find the IDs in the model summaries at the top of this page.",
      "Replace the model name with the variant you want to use, e.g. `seresnet152d`. You can find the IDs in the model summaries at the top of this page.\n\nTo extract image features with this model, follow the [timm feature extraction examples](../feature_extraction), just change the name of the model you want to use.\n\n## How do I finetune this model?\n\nYou can finetune any of the pre-trained models just by changing the classifier (the last layer).\n\n```py\n>>> model = timm.create_model('seresnet152d', pretrained=True, num_classes=NUM_FINETUNE_CLASSES)\n```\nTo finetune on your own dataset, you have to write a training loop or adapt [timm's training\nscript](https://github.com/rwightman/pytorch-image-models/blob/master/train.py) to use your dataset.\n\n## How do I train this model?\n\nYou can follow the [timm recipe scripts](../scripts) for training a new model afresh.\n\n## Citation\n\n```BibTeX\n@misc{hu2019squeezeandexcitation,\n      title={Squeeze-and-Excitation Networks}, \n      author={Jie Hu and Li Shen and Samuel Albanie and Gang Sun and Enhua Wu},\n      year={2019},\n      eprint={1709.01507},\n      archivePrefix={arXiv},\n      primaryClass={cs.CV}\n}\n```",
      "<!--\nType: model-index\nCollections:\n- Name: SE ResNet\n  Paper:\n    Title: Squeeze-and-Excitation Networks\n    URL: https://paperswithcode.com/paper/squeeze-and-excitation-networks\nModels:\n- Name: seresnet152d\n  In Collection: SE ResNet\n  Metadata:\n    FLOPs: 20161904304\n    Parameters: 66840000\n    File Size: 268144497\n    Architecture:\n    - 1x1 Convolution\n    - Batch Normalization\n    - Bottleneck Residual Block\n    - Convolution\n    - Global Average Pooling\n    - Max Pooling\n    - ReLU\n    - Residual Block\n    - Residual Connection\n    - Softmax\n    - Squeeze-and-Excitation Block\n    Tasks:\n    - Image Classification\n    Training Techniques:\n    - Label Smoothing\n    - SGD with Momentum\n    - Weight Decay\n    Training Data:\n    - ImageNet\n    Training Resources: 8x NVIDIA Titan X GPUs\n    ID: seresnet152d\n    LR: 0.6\n    Epochs: 100\n    Layers: 152\n    Dropout: 0.2\n    Crop Pct: '0.94'\n    Momentum: 0.9\n    Batch Size: 1024\n    Image Size: '256'\n    Interpolation: bicubic\n  Code: https://github.com/rwightman/pytorch-image-models/blob/a7f95818e44b281137503bcf4b3e3e94d8ffa52f/timm/models/resnet.py#L1206\n  Weights: https://github.com/rwightman/pytorch-image-models/releases/download/v0.1-weights/seresnet152d_ra2-04464dd2.pth\n  Results:\n  - Task: Image Classification\n    Dataset: ImageNet\n    Metrics:\n      Top 1 Accuracy: 83.74%\n      Top 5 Accuracy: 96.77%\n- Name: seresnet50\n  In Collection: SE ResNet\n  Metadata:\n    FLOPs: 5285062320\n    Parameters: 28090000\n    File Size: 112621903\n    Architecture:\n    - 1x1 Convolution\n    - Batch Normalization\n    - Bottleneck Residual Block\n    - Convolution\n    - Global Average Pooling\n    - Max Pooling\n    - ReLU\n    - Residual Block\n    - Residual Connection\n    - Softmax\n    - Squeeze-and-Excitation Block\n    Tasks:\n    - Image Classification\n    Training Techniques:\n    - Label Smoothing",
      "- Max Pooling\n    - ReLU\n    - Residual Block\n    - Residual Connection\n    - Softmax\n    - Squeeze-and-Excitation Block\n    Tasks:\n    - Image Classification\n    Training Techniques:\n    - Label Smoothing\n    - SGD with Momentum\n    - Weight Decay\n    Training Data:\n    - ImageNet\n    Training Resources: 8x NVIDIA Titan X GPUs\n    ID: seresnet50\n    LR: 0.6\n    Epochs: 100\n    Layers: 50\n    Dropout: 0.2\n    Crop Pct: '0.875'\n    Momentum: 0.9\n    Batch Size: 1024\n    Image Size: '224'\n    Interpolation: bicubic\n  Code: https://github.com/rwightman/pytorch-image-models/blob/a7f95818e44b281137503bcf4b3e3e94d8ffa52f/timm/models/resnet.py#L1180\n  Weights: https://github.com/rwightman/pytorch-image-models/releases/download/v0.1-weights/seresnet50_ra_224-8efdb4bb.pth\n  Results:\n  - Task: Image Classification\n    Dataset: ImageNet\n    Metrics:\n      Top 1 Accuracy: 80.26%\n      Top 5 Accuracy: 95.07%\n-->"
    ]
  },
  {
    "chunk_size": 600,
    "chunk_overlap": 30,
    "limit": 10,
    "texts": [
      "Create an Endpoint\n\nAfter your first login, you will be directed to the [Endpoint creation page](https://ui.endpoints.huggingface.co/new). As an example, this guide will go through the steps to deploy [distilbert-base-uncased-finetuned-sst-2-english](https://huggingface.co/distilbert-base-uncased-finetuned-sst-2-english) for text classification. \n\n## 1. Enter the Hugging Face Repository ID and your desired endpoint name:\n\n<img src=\"https://raw.githubusercontent.com/huggingface/hf-endpoints-documentation/main/assets/1_repository.png\" alt=\"select repository\" />\n\n## 2. Select your Cloud Provider and region. Initially, only AWS will be available as a Cloud Provider with the `us-east-1` and `eu-west-1` regions. We will add Azure soon, and if you need to test Endpoints with other Cloud Providers or regions, please let us know.\n\n<img src=\"https://raw.githubusercontent.com/huggingface/hf-endpoints-documentation/main/assets/1_region.png\" alt=\"select region\" />\n\n## 3. Define the [Security Level](security) for the Endpoint:\n\n<img src=\"https://raw.githubusercontent.com/huggingface/hf-endpoints-documentation/main/assets/1_security.png\" alt=\"define security\" />\n\n## 4. Create your Endpoint by clicking **Create Endpoint**. By default, your Endpoint is created with a medium CPU (2 x 4GB vCPUs with Intel Xeon Ice Lake) The cost estimate assumes the Endpoint will be up for an entire month, and does not take autoscaling into account.\n\n<img src=\"https://raw.githubusercontent.com/huggingface/hf-endpoints-documentation/main/assets/1_create_cost.png\" alt=\"create endpoint\" />\n\n## 5. Wait for the Endpoint to build, initialize and run which can take between 1 to 5 minutes.\n\n<img src=\"https://raw.githubusercontent.com/huggingface/hf-endpoints-documentation/main/assets/overview.png\" alt=\"overview\" />\n\n## 6. Test your Endpoint in the overview with the Inference widget \ud83c\udfc1 \ud83c\udf89!\n\n<img src=\"https://raw.githubusercontent.com/huggingface/hf-endpoints-documentation/main/assets/1_inference.png\" alt=\"run inference\" />",
      "Choosing a metric for your task\n\n**So you've trained your model and want to see how well it\u2019s doing on a dataset of your choice. Where do you start?**\n\nThere is no \u201cone size fits all\u201d approach to choosing an evaluation metric, but some good guidelines to keep in mind are:\n\n## Categories of metrics\n\nThere are 3 high-level categories of metrics:\n\n1. *Generic metrics*, which can be applied to a variety of situations and datasets, such as precision and accuracy.\n2. *Task-specific metrics*, which are limited to a given task, such as Machine Translation (often evaluated using metrics [BLEU](https://huggingface.co/metrics/bleu) or [ROUGE](https://huggingface.co/metrics/rouge)) or Named Entity Recognition (often evaluated with [seqeval](https://huggingface.co/metrics/seqeval)).\n3. *Dataset-specific metrics*, which aim to measure model performance on specific benchmarks: for instance, the [GLUE benchmark](https://huggingface.co/datasets/glue) has a dedicated [evaluation metric](https://huggingface.co/metrics/glue).\n\nLet's look at each of these three cases:\n\n### Generic metrics\n\nMany of the metrics used in the Machine Learning community are quite generic and can be applied in a variety of tasks and datasets.\n\nThis is the case for metrics like [accuracy](https://huggingface.co/metrics/accuracy) and [precision](https://huggingface.co/metrics/precision), which can be used for evaluating labeled (supervised) datasets, as well as [perplexity](https://huggingface.co/metrics/perplexity), which can be used for evaluating different kinds of (unsupervised) generative tasks.\n\nTo see the input structure of a given metric, you can look at its metric card. For example, in the case of [precision](https://huggingface.co/metrics/precision), the format is:\n```\n>>> precision_metric = evaluate.load(\"precision\")\n>>> results = precision_metric.compute(references=[0, 1], predictions=[0, 1])\n>>> print(results)\n{'precision': 1.0}\n```\n\n### Task-specific metrics\n\nPopular ML tasks like Machine Translation and Named Entity Recognition have specific metrics that can be used to compare models. For example, a series of different metrics have been proposed for text generation, ranging from [BLEU](https://huggingface.co/metrics/bleu) and its derivatives such as [GoogleBLEU](https://huggingface.co/metrics/google_bleu) and [GLEU](https://huggingface.co/metrics/gleu), but also [ROUGE](https://huggingface.co/metrics/rouge), [MAUVE](https://huggingface.co/metrics/mauve), etc.",
      "You can find the right metric for your task by:\n\n- **Looking at the [Task pages](https://huggingface.co/tasks)** to see what metrics can be used for evaluating models for a given task.\n- **Checking out leaderboards** on sites like [Papers With Code](https://paperswithcode.com/) (you can search by task and by dataset).\n-  **Reading the metric cards** for the relevant metrics and see which ones are a good fit for your use case. For example, see the [BLEU metric card](https://github.com/huggingface/evaluate/tree/main/metrics/bleu) or [SQuaD metric card](https://github.com/huggingface/evaluate/tree/main/metrics/squad).\n- **Looking at papers and blog posts** published on the topic and see what metrics they report. This can change over time, so try to pick papers from the last couple of years!\n\n### Dataset-specific metrics\n\nSome datasets have specific metrics associated with them -- this is especially in the case of popular benchmarks like [GLUE](https://huggingface.co/metrics/glue) and [SQuAD](https://huggingface.co/metrics/squad).\n\n<Tip warning={true}>\n\ud83d\udca1\nGLUE is actually a collection of different subsets on different tasks, so first you need to choose the one that corresponds to the NLI task, such as mnli, which is described as \u201ccrowdsourced collection of sentence pairs with textual entailment annotations\u201d\n</Tip>\n\n\nIf you are evaluating your model on a benchmark dataset like the ones mentioned above, you can use its dedicated evaluation metric. Make sure you respect the format that they require. For example, to evaluate your model on the [SQuAD](https://huggingface.co/datasets/squad) dataset, you need to feed the `question` and `context` into your model and return the `prediction_text`, which should be compared with the `references` (based on matching the `id` of the question) :\n\n```\n>>> from evaluate import load\n>>> squad_metric = load(\"squad\")\n>>> predictions = [{'prediction_text': '1976', 'id': '56e10a3be3433e1400422b22'}]\n>>> references = [{'answers': {'answer_start': [97], 'text': ['1976']}, 'id': '56e10a3be3433e1400422b22'}]\n>>> results = squad_metric.compute(predictions=predictions, references=references)\n>>> results\n{'exact_match': 100.0, 'f1': 100.0}\n```\n\nYou can find examples of dataset structures by consulting the \"Dataset Preview\" function or the dataset card for a given dataset, and you can see how to use its dedicated evaluation function based on the metric card.",
      "\u4e3b\u8981\u7279\u70b9\n\n\u8ba9\u6211\u4eec\u6765\u4ecb\u7ecd\u4e00\u4e0b Gradio \u6700\u53d7\u6b22\u8fce\u7684\u4e00\u4e9b\u529f\u80fd\uff01\u8fd9\u91cc\u662f Gradio \u7684\u4e3b\u8981\u7279\u70b9\uff1a\n\n1. [\u6dfb\u52a0\u793a\u4f8b\u8f93\u5165](#example-inputs)\n2. [\u4f20\u9012\u81ea\u5b9a\u4e49\u9519\u8bef\u6d88\u606f](#errors)\n3. [\u6dfb\u52a0\u63cf\u8ff0\u5185\u5bb9](#descriptive-content)\n4. [\u8bbe\u7f6e\u65d7\u6807](#flagging)\n5. [\u9884\u5904\u7406\u548c\u540e\u5904\u7406](#preprocessing-and-postprocessing)\n6. [\u6837\u5f0f\u5316\u6f14\u793a](#styling)\n7. [\u6392\u961f\u7528\u6237](#queuing)\n8. [\u8fed\u4ee3\u8f93\u51fa](#iterative-outputs)\n9. [\u8fdb\u5ea6\u6761](#progress-bars)\n10. [\u6279\u5904\u7406\u51fd\u6570](#batch-functions)\n11. [\u5728\u534f\u4f5c\u7b14\u8bb0\u672c\u4e0a\u8fd0\u884c](#colab-notebooks)\n\n## \u793a\u4f8b\u8f93\u5165\n\n\u60a8\u53ef\u4ee5\u63d0\u4f9b\u7528\u6237\u53ef\u4ee5\u8f7b\u677e\u52a0\u8f7d\u5230 \"Interface\" \u4e2d\u7684\u793a\u4f8b\u6570\u636e\u3002\u8fd9\u5bf9\u4e8e\u6f14\u793a\u6a21\u578b\u671f\u671b\u7684\u8f93\u5165\u7c7b\u578b\u4ee5\u53ca\u6f14\u793a\u6570\u636e\u96c6\u548c\u6a21\u578b\u4e00\u8d77\u63a2\u7d22\u7684\u65b9\u5f0f\u975e\u5e38\u6709\u5e2e\u52a9\u3002\u8981\u52a0\u8f7d\u793a\u4f8b\u6570\u636e\uff0c\u60a8\u53ef\u4ee5\u5c06\u5d4c\u5957\u5217\u8868\u63d0\u4f9b\u7ed9 Interface \u6784\u9020\u51fd\u6570\u7684 `examples=` \u5173\u952e\u5b57\u53c2\u6570\u3002\u5916\u90e8\u5217\u8868\u4e2d\u7684\u6bcf\u4e2a\u5b50\u5217\u8868\u8868\u793a\u4e00\u4e2a\u6570\u636e\u6837\u672c\uff0c\u5b50\u5217\u8868\u4e2d\u7684\u6bcf\u4e2a\u5143\u7d20\u8868\u793a\u6bcf\u4e2a\u8f93\u5165\u7ec4\u4ef6\u7684\u8f93\u5165\u3002\u6709\u5173\u6bcf\u4e2a\u7ec4\u4ef6\u7684\u793a\u4f8b\u6570\u636e\u683c\u5f0f\u5728[Docs](https://gradio.app/docs#components)\u4e2d\u6709\u8bf4\u660e\u3002\n\n$code_calculator\n$demo_calculator\n\n\u60a8\u53ef\u4ee5\u5c06\u5927\u578b\u6570\u636e\u96c6\u52a0\u8f7d\u5230\u793a\u4f8b\u4e2d\uff0c\u901a\u8fc7 Gradio \u6d4f\u89c8\u548c\u4e0e\u6570\u636e\u96c6\u8fdb\u884c\u4ea4\u4e92\u3002\u793a\u4f8b\u5c06\u81ea\u52a8\u5206\u9875\uff08\u53ef\u4ee5\u901a\u8fc7 Interface \u7684 `examples_per_page` \u53c2\u6570\u8fdb\u884c\u914d\u7f6e\uff09\u3002\n\n\u7ee7\u7eed\u4e86\u89e3\u793a\u4f8b\uff0c\u8bf7\u53c2\u9605[\u66f4\u591a\u793a\u4f8b](https://gradio.app/more-on-examples)\u6307\u5357\u3002\n\n## \u9519\u8bef\n\n\u60a8\u5e0c\u671b\u5411\u7528\u6237\u4f20\u9012\u81ea\u5b9a\u4e49\u9519\u8bef\u6d88\u606f\u3002\u4e3a\u6b64\uff0cwith `gr.Error(\"custom message\")` \u6765\u663e\u793a\u9519\u8bef\u6d88\u606f\u3002\u5982\u679c\u5728\u4e0a\u9762\u7684\u8ba1\u7b97\u5668\u793a\u4f8b\u4e2d\u5c1d\u8bd5\u9664\u4ee5\u96f6\uff0c\u5c06\u663e\u793a\u81ea\u5b9a\u4e49\u9519\u8bef\u6d88\u606f\u7684\u5f39\u51fa\u6a21\u6001\u7a97\u53e3\u3002\u4e86\u89e3\u6709\u5173\u9519\u8bef\u7684\u66f4\u591a\u4fe1\u606f\uff0c\u8bf7\u53c2\u9605[\u6587\u6863](https://gradio.app/docs#error)\u3002\n\n## \u63cf\u8ff0\u6027\u5185\u5bb9\n\n\u5728\u524d\u9762\u7684\u793a\u4f8b\u4e2d\uff0c\u60a8\u53ef\u80fd\u5df2\u7ecf\u6ce8\u610f\u5230 Interface \u6784\u9020\u51fd\u6570\u4e2d\u7684 `title=` \u548c `description=` \u5173\u952e\u5b57\u53c2\u6570\uff0c\u5e2e\u52a9\u7528\u6237\u4e86\u89e3\u60a8\u7684\u5e94\u7528\u7a0b\u5e8f\u3002",
      "Interface \u6784\u9020\u51fd\u6570\u4e2d\u6709\u4e09\u4e2a\u53c2\u6570\u7528\u4e8e\u6307\u5b9a\u6b64\u5185\u5bb9\u5e94\u653e\u7f6e\u5728\u54ea\u91cc\uff1a\n\n- `title`\uff1a\u63a5\u53d7\u6587\u672c\uff0c\u5e76\u53ef\u4ee5\u5c06\u5176\u663e\u793a\u5728\u754c\u9762\u7684\u9876\u90e8\uff0c\u4e5f\u5c06\u6210\u4e3a\u9875\u9762\u6807\u9898\u3002\n- `description`\uff1a\u63a5\u53d7\u6587\u672c\u3001Markdown \u6216 HTML\uff0c\u5e76\u5c06\u5176\u653e\u7f6e\u5728\u6807\u9898\u6b63\u4e0b\u65b9\u3002\n- `article`\uff1a\u4e5f\u63a5\u53d7\u6587\u672c\u3001Markdown \u6216 HTML\uff0c\u5e76\u5c06\u5176\u653e\u7f6e\u5728\u754c\u9762\u4e0b\u65b9\u3002\n\n![annotated](/assets/guides/annotated.png)\n\n\u5982\u679c\u60a8\u4f7f\u7528\u7684\u662f `Blocks` API\uff0c\u5219\u53ef\u4ee5 with `gr.Markdown(...)` \u6216 `gr.HTML(...)` \u7ec4\u4ef6\u5728\u4efb\u4f55\u4f4d\u7f6e\u63d2\u5165\u6587\u672c\u3001Markdown \u6216 HTML\uff0c\u5176\u4e2d\u63cf\u8ff0\u6027\u5185\u5bb9\u4f4d\u4e8e `Component` \u6784\u9020\u51fd\u6570\u5185\u90e8\u3002\n\n\u53e6\u4e00\u4e2a\u6709\u7528\u7684\u5173\u952e\u5b57\u53c2\u6570\u662f `label=`\uff0c\u5b83\u5b58\u5728\u4e8e\u6bcf\u4e2a `Component` \u4e2d\u3002\u8fd9\u4fee\u6539\u4e86\u6bcf\u4e2a `Component` \u9876\u90e8\u7684\u6807\u7b7e\u6587\u672c\u3002\u8fd8\u53ef\u4ee5\u4e3a\u8bf8\u5982 `Textbox` \u6216 `Radio` \u4e4b\u7c7b\u7684\u8868\u5355\u5143\u7d20\u6dfb\u52a0 `info=` \u5173\u952e\u5b57\u53c2\u6570\uff0c\u4ee5\u63d0\u4f9b\u6709\u5173\u5176\u7528\u6cd5\u7684\u8fdb\u4e00\u6b65\u4fe1\u606f\u3002\n\n```python\ngr.Number(label='\u5e74\u9f84', info='\u4ee5\u5e74\u4e3a\u5355\u4f4d\uff0c\u5fc5\u987b\u5927\u4e8e0')\n```\n\n## \u65d7\u6807\n\n\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\"Interface\" \u5c06\u6709\u4e00\u4e2a \"Flag\" \u6309\u94ae\u3002\u5f53\u7528\u6237\u6d4b\u8bd5\u60a8\u7684 `Interface` \u65f6\uff0c\u5982\u679c\u770b\u5230\u6709\u8da3\u7684\u8f93\u51fa\uff0c\u4f8b\u5982\u9519\u8bef\u6216\u610f\u5916\u7684\u6a21\u578b\u884c\u4e3a\uff0c\u4ed6\u4eec\u53ef\u4ee5\u5c06\u8f93\u5165\u6807\u8bb0\u4e3a\u60a8\u8fdb\u884c\u67e5\u770b\u3002\u5728\u7531 `Interface` \u6784\u9020\u51fd\u6570\u7684 `flagging_dir=` \u53c2\u6570\u63d0\u4f9b\u7684\u76ee\u5f55\u4e2d\uff0c\u5c06\u8bb0\u5f55\u6807\u8bb0\u7684\u8f93\u5165\u5230\u4e00\u4e2a CSV \u6587\u4ef6\u4e2d\u3002\u5982\u679c\u754c\u9762\u6d89\u53ca\u6587\u4ef6\u6570\u636e\uff0c\u4f8b\u5982\u56fe\u50cf\u548c\u97f3\u9891\u7ec4\u4ef6\uff0c\u5c06\u521b\u5efa\u6587\u4ef6\u5939\u6765\u5b58\u50a8\u8fd9\u4e9b\u6807\u8bb0\u7684\u6570\u636e\u3002\n\n\u4f8b\u5982\uff0c\u5bf9\u4e8e\u4e0a\u9762\u663e\u793a\u7684\u8ba1\u7b97\u5668\u754c\u9762\uff0c\u6211\u4eec\u5c06\u5728\u4e0b\u9762\u7684\u65d7\u6807\u76ee\u5f55\u4e2d\u5b58\u50a8\u6807\u8bb0\u7684\u6570\u636e\uff1a\n\n```directory\n+-- calculator.py\n+-- flagged/\n|   +-- logs.csv\n```\n\n_flagged/logs.csv_\n\n```csv\nnum1,operation,num2,Output\n5,add,7,12\n6,subtract,1.5,4.5\n```\n\n\u4e0e\u65e9\u671f\u663e\u793a\u7684\u51b7\u8272\u754c\u9762\u76f8\u5bf9\u5e94\uff0c\u6211\u4eec\u5c06\u5728\u4e0b\u9762\u7684\u65d7\u6807\u76ee\u5f55\u4e2d\u5b58\u50a8\u6807\u8bb0\u7684\u6570\u636e\uff1a",
      "```directory\n+-- sepia.py\n+-- flagged/\n|   +-- logs.csv\n|   +-- im/\n|   |   +-- 0.png\n|   |   +-- 1.png\n|   +-- Output/\n|   |   +-- 0.png\n|   |   +-- 1.png\n```\n\n_flagged/logs.csv_\n\n```csv\nim,Output\nim/0.png,Output/0.png\nim/1.png,Output/1.png\n```\n\n\u5982\u679c\u60a8\u5e0c\u671b\u7528\u6237\u63d0\u4f9b\u65d7\u6807\u539f\u56e0\uff0c\u53ef\u4ee5\u5c06\u5b57\u7b26\u4e32\u5217\u8868\u4f20\u9012\u7ed9 Interface \u7684 `flagging_options` \u53c2\u6570\u3002\u7528\u6237\u5728\u8fdb\u884c\u65d7\u6807\u65f6\u5fc5\u987b\u9009\u62e9\u5176\u4e2d\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u8fd9\u5c06\u4f5c\u4e3a\u9644\u52a0\u5217\u4fdd\u5b58\u5230 CSV \u4e2d\u3002\n\n## \u9884\u5904\u7406\u548c\u540e\u5904\u7406 (Preprocessing and Postprocessing)\n\n![annotated](/assets/img/dataflow.svg)\n\n\u5982\u60a8\u6240\u89c1\uff0cGradio \u5305\u62ec\u53ef\u4ee5\u5904\u7406\u5404\u79cd\u4e0d\u540c\u6570\u636e\u7c7b\u578b\u7684\u7ec4\u4ef6\uff0c\u4f8b\u5982\u56fe\u50cf\u3001\u97f3\u9891\u548c\u89c6\u9891\u3002\u5927\u591a\u6570\u7ec4\u4ef6\u90fd\u53ef\u4ee5\u7528\u4f5c\u8f93\u5165\u6216\u8f93\u51fa\u3002\n\n\u5f53\u7ec4\u4ef6\u7528\u4f5c\u8f93\u5165\u65f6\uff0cGradio \u81ea\u52a8\u5904\u7406*\u9884\u5904\u7406*\uff0c\u5c06\u6570\u636e\u4ece\u7528\u6237\u6d4f\u89c8\u5668\u53d1\u9001\u7684\u7c7b\u578b\uff08\u4f8b\u5982\u7f51\u7edc\u6444\u50cf\u5934\u5feb\u7167\u7684 base64 \u8868\u793a\uff09\u8f6c\u6362\u4e3a\u60a8\u7684\u51fd\u6570\u53ef\u4ee5\u63a5\u53d7\u7684\u5f62\u5f0f\uff08\u4f8b\u5982 `numpy` \u6570\u7ec4\uff09\u3002\n\n\u540c\u6837\uff0c\u5f53\u7ec4\u4ef6\u7528\u4f5c\u8f93\u51fa\u65f6\uff0cGradio \u81ea\u52a8\u5904\u7406*\u540e\u5904\u7406*\uff0c\u5c06\u6570\u636e\u4ece\u51fd\u6570\u8fd4\u56de\u7684\u5f62\u5f0f\uff08\u4f8b\u5982\u56fe\u50cf\u8def\u5f84\u5217\u8868\uff09\u8f6c\u6362\u4e3a\u53ef\u4ee5\u5728\u7528\u6237\u6d4f\u89c8\u5668\u4e2d\u663e\u793a\u7684\u5f62\u5f0f\uff08\u4f8b\u5982\u4ee5 base64 \u683c\u5f0f\u663e\u793a\u56fe\u50cf\u7684 `Gallery`\uff09\u3002\n\n\u60a8\u53ef\u4ee5\u4f7f\u7528\u6784\u5efa\u56fe\u50cf\u7ec4\u4ef6\u65f6\u7684\u53c2\u6570\u63a7\u5236*\u9884\u5904\u7406*\u3002\u4f8b\u5982\uff0c\u5982\u679c\u60a8\u4f7f\u7528\u4ee5\u4e0b\u53c2\u6570\u5b9e\u4f8b\u5316 `Image` \u7ec4\u4ef6\uff0c\u5b83\u5c06\u5c06\u56fe\u50cf\u8f6c\u6362\u4e3a `PIL` \u7c7b\u578b\uff0c\u5e76\u5c06\u5176\u91cd\u5851\u4e3a`(100, 100)`\uff0c\u800c\u4e0d\u7ba1\u63d0\u4ea4\u65f6\u7684\u539f\u59cb\u5927\u5c0f\u5982\u4f55\uff1a\n\n```py\nimg = gr.Image(shape=(100, 100), type=\"pil\")\n```\n\n\u76f8\u53cd\uff0c\u8fd9\u91cc\u6211\u4eec\u4fdd\u7559\u56fe\u50cf\u7684\u539f\u59cb\u5927\u5c0f\uff0c\u4f46\u5728\u5c06\u5176\u8f6c\u6362\u4e3a numpy \u6570\u7ec4\u4e4b\u524d\u53cd\u8f6c\u989c\u8272\uff1a\n\n```py\nimg = gr.Image(invert_colors=True, type=\"numpy\")\n```\n\n\u540e\u5904\u7406\u8981\u5bb9\u6613\u5f97\u591a\uff01Gradio \u81ea\u52a8\u8bc6\u522b\u8fd4\u56de\u6570\u636e\u7684\u683c\u5f0f\uff08\u4f8b\u5982 `Image` \u662f `numpy` \u6570\u7ec4\u8fd8\u662f `str` \u6587\u4ef6\u8def\u5f84\uff1f\uff09\uff0c\u5e76\u5c06\u5176\u540e\u5904\u7406\u4e3a\u53ef\u4ee5\u7531\u6d4f\u89c8\u5668\u663e\u793a\u7684\u683c\u5f0f\u3002",
      "\u8bf7\u67e5\u770b[\u6587\u6863](https://gradio.app/docs)\uff0c\u4e86\u89e3\u6bcf\u4e2a\u7ec4\u4ef6\u7684\u6240\u6709\u4e0e\u9884\u5904\u7406\u76f8\u5173\u7684\u53c2\u6570\u3002\n\n## \u6837\u5f0f (Styling)\n\nGradio \u4e3b\u9898\u662f\u81ea\u5b9a\u4e49\u5e94\u7528\u7a0b\u5e8f\u5916\u89c2\u548c\u611f\u89c9\u7684\u6700\u7b80\u5355\u65b9\u6cd5\u3002\u60a8\u53ef\u4ee5\u9009\u62e9\u591a\u79cd\u4e3b\u9898\u6216\u521b\u5efa\u81ea\u5df1\u7684\u4e3b\u9898\u3002\u8981\u8fd9\u6837\u505a\uff0c\u8bf7\u5c06 `theme=` \u53c2\u6570\u4f20\u9012\u7ed9 `Interface` \u6784\u9020\u51fd\u6570\u3002\u4f8b\u5982\uff1a\n\n```python\ndemo = gr.Interface(..., theme=gr.themes.Monochrome())\n```\n\nGradio \u5e26\u6709\u4e00\u7ec4\u9884\u5148\u6784\u5efa\u7684\u4e3b\u9898\uff0c\u60a8\u53ef\u4ee5\u4ece `gr.themes.*` \u52a0\u8f7d\u3002\u60a8\u53ef\u4ee5\u6269\u5c55\u8fd9\u4e9b\u4e3b\u9898\u6216\u4ece\u5934\u5f00\u59cb\u521b\u5efa\u81ea\u5df1\u7684\u4e3b\u9898 - \u6709\u5173\u66f4\u591a\u8be6\u7ec6\u4fe1\u606f\uff0c\u8bf7\u53c2\u9605[\u4e3b\u9898\u6307\u5357](https://gradio.app/theming-guide)\u3002\n\n\u8981\u589e\u52a0\u989d\u5916\u7684\u6837\u5f0f\u80fd\u529b\uff0c\u60a8\u53ef\u4ee5 with `css=` \u5173\u952e\u5b57\u5c06\u4efb\u4f55 CSS \u4f20\u9012\u7ed9\u60a8\u7684\u5e94\u7528\u7a0b\u5e8f\u3002\nGradio \u5e94\u7528\u7a0b\u5e8f\u7684\u57fa\u7c7b\u662f `gradio-container`\uff0c\u56e0\u6b64\u4ee5\u4e0b\u662f\u4e00\u4e2a\u66f4\u6539 Gradio \u5e94\u7528\u7a0b\u5e8f\u80cc\u666f\u989c\u8272\u7684\u793a\u4f8b\uff1a\n\n```python\nwith `gr.Interface(css=\".gradio-container {background-color: red}\") as demo:\n    ...\n```\n\n## \u961f\u5217 (Queuing)\n\n\u5982\u679c\u60a8\u7684\u5e94\u7528\u7a0b\u5e8f\u9884\u8ba1\u4f1a\u6709\u5927\u91cf\u6d41\u91cf\uff0c\u8bf7 with `queue()` \u65b9\u6cd5\u6765\u63a7\u5236\u5904\u7406\u901f\u7387\u3002\u8fd9\u5c06\u6392\u961f\u5904\u7406\u8c03\u7528\uff0c\u56e0\u6b64\u4e00\u6b21\u53ea\u5904\u7406\u4e00\u5b9a\u6570\u91cf\u7684\u8bf7\u6c42\u3002\u961f\u5217\u4f7f\u7528 Websockets\uff0c\u8fd8\u53ef\u4ee5\u9632\u6b62\u7f51\u7edc\u8d85\u65f6\uff0c\u56e0\u6b64\u5982\u679c\u60a8\u7684\u51fd\u6570\u7684\u63a8\u7406\u65f6\u95f4\u5f88\u957f\uff08> 1 \u5206\u949f\uff09\uff0c\u5e94\u4f7f\u7528\u961f\u5217\u3002\n\nwith `Interface`\uff1a\n\n```python\ndemo = gr.Interface(...).queue()\ndemo.launch()\n```\n\nwith `Blocks`\uff1a\n\n```python\nwith gr.Blocks() as demo\uff1a\n    #...\ndemo.queue()\ndemo.launch()\n```\n\n\u60a8\u53ef\u4ee5\u901a\u8fc7\u4ee5\u4e0b\u65b9\u5f0f\u63a7\u5236\u4e00\u6b21\u5904\u7406\u7684\u8bf7\u6c42\u6570\u91cf\uff1a\n\n```python\ndemo.queue(concurrency_count=3)\n```\n\n\u67e5\u770b\u6709\u5173\u914d\u7f6e\u5176\u4ed6\u961f\u5217\u53c2\u6570\u7684[\u961f\u5217\u6587\u6863](/docs/#queue)\u3002\n\n\u5728 Blocks \u4e2d\u6307\u5b9a\u4ec5\u5bf9\u67d0\u4e9b\u51fd\u6570\u8fdb\u884c\u6392\u961f\uff1a",
      "\u5728 Blocks \u4e2d\u6307\u5b9a\u4ec5\u5bf9\u67d0\u4e9b\u51fd\u6570\u8fdb\u884c\u6392\u961f\uff1a\n\n```python\nwith gr.Blocks() as demo2\uff1a\n    num1 = gr.Number()\n    num2 = gr.Number()\n    output = gr.Number()\n    gr.Button(\"Add\").click(\n        lambda a, b: a + b, [num1, num2], output)\n    gr.Button(\"Multiply\").click(\n        lambda a, b: a * b, [num1, num2], output, queue=True)\ndemo2.launch()\n```\n\n## \u8fed\u4ee3\u8f93\u51fa (Iterative Outputs)\n\n\u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\uff0c\u60a8\u53ef\u80fd\u9700\u8981\u4f20\u8f93\u4e00\u7cfb\u5217\u8f93\u51fa\u800c\u4e0d\u662f\u4e00\u6b21\u663e\u793a\u5355\u4e2a\u8f93\u51fa\u3002\u4f8b\u5982\uff0c\u60a8\u53ef\u80fd\u6709\u4e00\u4e2a\u56fe\u50cf\u751f\u6210\u6a21\u578b\uff0c\u5e0c\u671b\u663e\u793a\u751f\u6210\u7684\u6bcf\u4e2a\u6b65\u9aa4\u7684\u56fe\u50cf\uff0c\u76f4\u5230\u6700\u7ec8\u56fe\u50cf\u3002\u6216\u8005\u60a8\u53ef\u80fd\u6709\u4e00\u4e2a\u804a\u5929\u673a\u5668\u4eba\uff0c\u5b83\u9010\u5b57\u9010\u53e5\u5730\u6d41\u5f0f\u4f20\u8f93\u54cd\u5e94\uff0c\u800c\u4e0d\u662f\u4e00\u6b21\u8fd4\u56de\u5168\u90e8\u54cd\u5e94\u3002\n\n\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u60a8\u53ef\u4ee5\u5c06**\u751f\u6210\u5668**\u51fd\u6570\u63d0\u4f9b\u7ed9 Gradio\uff0c\u800c\u4e0d\u662f\u5e38\u89c4\u51fd\u6570\u3002\u5728 Python \u4e2d\u521b\u5efa\u751f\u6210\u5668\u975e\u5e38\u7b80\u5355\uff1a\u51fd\u6570\u4e0d\u5e94\u8be5\u6709\u4e00\u4e2a\u5355\u72ec\u7684 `return` \u503c\uff0c\u800c\u662f\u5e94\u8be5 with `yield` \u8fde\u7eed\u8fd4\u56de\u4e00\u7cfb\u5217\u503c\u3002\u901a\u5e38\uff0c`yield` \u8bed\u53e5\u653e\u7f6e\u5728\u67d0\u79cd\u5faa\u73af\u4e2d\u3002\u4e0b\u9762\u662f\u4e00\u4e2a\u7b80\u5355\u793a\u4f8b\uff0c\u751f\u6210\u5668\u53ea\u662f\u7b80\u5355\u8ba1\u6570\u5230\u7ed9\u5b9a\u6570\u5b57\uff1a\n\n```python\ndef my_generator(x):\n    for i in range(x):\n        yield i\n```\n\n\u60a8\u4ee5\u4e0e\u5e38\u89c4\u51fd\u6570\u76f8\u540c\u7684\u65b9\u5f0f\u5c06\u751f\u6210\u5668\u63d0\u4f9b\u7ed9 Gradio\u3002\u4f8b\u5982\uff0c\u8fd9\u662f\u4e00\u4e2a\uff08\u865a\u62df\u7684\uff09\u56fe\u50cf\u751f\u6210\u6a21\u578b\uff0c\u5b83\u5728\u8f93\u51fa\u56fe\u50cf\u4e4b\u524d\u751f\u6210\u6570\u4e2a\u6b65\u9aa4\u7684\u566a\u97f3\uff1a\n\n$code_fake_diffusion\n$demo_fake_diffusion\n\n\u8bf7\u6ce8\u610f\uff0c\u6211\u4eec\u5728\u8fed\u4ee3\u5668\u4e2d\u6dfb\u52a0\u4e86 `time.sleep(1)`\uff0c\u4ee5\u521b\u5efa\u6b65\u9aa4\u4e4b\u95f4\u7684\u4eba\u5de5\u6682\u505c\uff0c\u4ee5\u4fbf\u60a8\u53ef\u4ee5\u89c2\u5bdf\u8fed\u4ee3\u5668\u7684\u6b65\u9aa4\uff08\u5728\u771f\u5b9e\u7684\u56fe\u50cf\u751f\u6210\u6a21\u578b\u4e2d\uff0c\u8fd9\u53ef\u80fd\u662f\u4e0d\u5fc5\u8981\u7684\uff09\u3002\n\n\u5c06\u751f\u6210\u5668\u63d0\u4f9b\u7ed9 Gradio **\u9700\u8981**\u5728\u5e95\u5c42 Interface \u6216 Blocks \u4e2d\u542f\u7528\u961f\u5217\uff08\u8bf7\u53c2\u9605\u4e0a\u9762\u7684\u961f\u5217\u90e8\u5206\uff09\u3002\n\n## \u8fdb\u5ea6\u6761",
      "## \u8fdb\u5ea6\u6761\n\nGradio \u652f\u6301\u521b\u5efa\u81ea\u5b9a\u4e49\u8fdb\u5ea6\u6761\uff0c\u4ee5\u4fbf\u60a8\u53ef\u4ee5\u81ea\u5b9a\u4e49\u548c\u63a7\u5236\u5411\u7528\u6237\u663e\u793a\u7684\u8fdb\u5ea6\u66f4\u65b0\u3002\u8981\u542f\u7528\u6b64\u529f\u80fd\uff0c\u53ea\u9700\u4e3a\u65b9\u6cd5\u6dfb\u52a0\u4e00\u4e2a\u9ed8\u8ba4\u503c\u4e3a `gr.Progress` \u5b9e\u4f8b\u7684\u53c2\u6570\u5373\u53ef\u3002\u7136\u540e\uff0c\u60a8\u53ef\u4ee5\u76f4\u63a5\u8c03\u7528\u6b64\u5b9e\u4f8b\u5e76\u4f20\u5165 0 \u5230 1 \u4e4b\u95f4\u7684\u6d6e\u70b9\u6570\u6765\u66f4\u65b0\u8fdb\u5ea6\u7ea7\u522b\uff0c\u6216\u8005 with `Progress` \u5b9e\u4f8b\u7684 `tqdm()` \u65b9\u6cd5\u6765\u8ddf\u8e2a\u53ef\u8fed\u4ee3\u5bf9\u8c61\u4e0a\u7684\u8fdb\u5ea6\uff0c\u5982\u4e0b\u6240\u793a\u3002\u5fc5\u987b\u542f\u7528\u961f\u5217\u4ee5\u8fdb\u884c\u8fdb\u5ea6\u66f4\u65b0\u3002\n\n$code_progress_simple\n$demo_progress_simple\n\n\u5982\u679c\u60a8 with `tqdm` \u5e93\uff0c\u5e76\u4e14\u5e0c\u671b\u4ece\u51fd\u6570\u5185\u90e8\u7684\u4efb\u4f55 `tqdm.tqdm` \u81ea\u52a8\u62a5\u544a\u8fdb\u5ea6\u66f4\u65b0\uff0c\u8bf7\u5c06\u9ed8\u8ba4\u53c2\u6570\u8bbe\u7f6e\u4e3a `gr.Progress(track_tqdm=True)`\uff01\n\n## \u6279\u5904\u7406\u51fd\u6570 (Batch Functions)\n\nGradio \u652f\u6301\u4f20\u9012*\u6279\u5904\u7406*\u51fd\u6570\u3002\u6279\u5904\u7406\u51fd\u6570\u53ea\u662f\u63a5\u53d7\u8f93\u5165\u5217\u8868\u5e76\u8fd4\u56de\u9884\u6d4b\u5217\u8868\u7684\u51fd\u6570\u3002\n\n\u4f8b\u5982\uff0c\u8fd9\u662f\u4e00\u4e2a\u6279\u5904\u7406\u51fd\u6570\uff0c\u5b83\u63a5\u53d7\u4e24\u4e2a\u8f93\u5165\u5217\u8868\uff08\u4e00\u4e2a\u5355\u8bcd\u5217\u8868\u548c\u4e00\u4e2a\u6574\u6570\u5217\u8868\uff09\uff0c\u5e76\u8fd4\u56de\u4fee\u526a\u8fc7\u7684\u5355\u8bcd\u5217\u8868\u4f5c\u4e3a\u8f93\u51fa\uff1a\n\n```python\nimport time\n\ndef trim_words(words, lens):\n    trimmed_words = []\n    time.sleep(5)\n    for w, l in zip(words, lens):\n        trimmed_words.append(w[:int(l)])\n    return [trimmed_words]\n    for w, l in zip(words, lens):\n```\n\n\u4f7f\u7528\u6279\u5904\u7406\u51fd\u6570\u7684\u4f18\u70b9\u662f\uff0c\u5982\u679c\u542f\u7528\u4e86\u961f\u5217\uff0cGradio \u670d\u52a1\u5668\u53ef\u4ee5\u81ea\u52a8*\u6279\u5904\u7406*\u4f20\u5165\u7684\u8bf7\u6c42\u5e76\u5e76\u884c\u5904\u7406\u5b83\u4eec\uff0c\u4ece\u800c\u53ef\u80fd\u52a0\u5feb\u6f14\u793a\u901f\u5ea6\u3002\u4ee5\u4e0b\u662f Gradio \u4ee3\u7801\u7684\u793a\u4f8b\uff08\u8bf7\u6ce8\u610f `batch=True` \u548c `max_batch_size=16` - \u8fd9\u4e24\u4e2a\u53c2\u6570\u90fd\u53ef\u4ee5\u4f20\u9012\u7ed9\u4e8b\u4ef6\u89e6\u53d1\u5668\u6216 `Interface` \u7c7b\uff09\n\nwith `Interface`\uff1a\n\n```python\ndemo = gr.Interface(trim_words, [\"textbox\", \"number\"], [\"output\"],\n                    batch=True, max_batch_size=16)\ndemo.queue()\ndemo.launch()\n```\n\nwith `Blocks`\uff1a\n\n```python\nimport gradio as gr\n\nwith gr.Blocks() as demo:\n    with gr.Row():\n        word = gr.Textbox(label=\"word\")\n        leng = gr.Number(label=\"leng\")\n        output = gr.Textbox(label=\"Output\")\n    with gr.Row():\n        run = gr.Button()",
      "event = run.click(trim_words, [word, leng], output, batch=True, max_batch_size=16)\n\ndemo.queue()\ndemo.launch()\n```\n\n\u5728\u4e0a\u9762\u7684\u793a\u4f8b\u4e2d\uff0c\u53ef\u4ee5\u5e76\u884c\u5904\u7406 16 \u4e2a\u8bf7\u6c42\uff08\u603b\u63a8\u7406\u65f6\u95f4\u4e3a 5 \u79d2\uff09\uff0c\u800c\u4e0d\u662f\u5206\u522b\u5904\u7406\u6bcf\u4e2a\u8bf7\u6c42\uff08\u603b\u63a8\u7406\u65f6\u95f4\u4e3a 80 \u79d2\uff09\u3002\u8bb8\u591a Hugging Face \u7684 `transformers` \u548c `diffusers` \u6a21\u578b\u5728 Gradio \u7684\u6279\u5904\u7406\u6a21\u5f0f\u4e0b\u81ea\u7136\u5de5\u4f5c\uff1a\u8fd9\u662f[\u4f7f\u7528\u6279\u5904\u7406\u751f\u6210\u56fe\u50cf\u7684\u793a\u4f8b\u6f14\u793a](https://github.com/gradio-app/gradio/blob/main/demo/diffusers_with_batching/run.py)\n\n\u6ce8\u610f\uff1a\u4f7f\u7528 Gradio \u7684\u6279\u5904\u7406\u51fd\u6570 **requires** \u5728\u5e95\u5c42 Interface \u6216 Blocks \u4e2d\u542f\u7528\u961f\u5217\uff08\u8bf7\u53c2\u9605\u4e0a\u9762\u7684\u961f\u5217\u90e8\u5206\uff09\u3002\n\n## Gradio \u7b14\u8bb0\u672c (Colab Notebooks)\n\nGradio \u53ef\u4ee5\u5728\u4efb\u4f55\u8fd0\u884c Python \u7684\u5730\u65b9\u8fd0\u884c\uff0c\u5305\u62ec\u672c\u5730 Jupyter \u7b14\u8bb0\u672c\u548c\u534f\u4f5c\u7b14\u8bb0\u672c\uff0c\u5982[Google Colab](https://colab.research.google.com/)\u3002\u5bf9\u4e8e\u672c\u5730 Jupyter \u7b14\u8bb0\u672c\u548c Google Colab \u7b14\u8bb0\u672c\uff0cGradio \u5728\u672c\u5730\u670d\u52a1\u5668\u4e0a\u8fd0\u884c\uff0c\u60a8\u53ef\u4ee5\u5728\u6d4f\u89c8\u5668\u4e2d\u4e0e\u4e4b\u4ea4\u4e92\u3002\uff08\u6ce8\u610f\uff1a\u5bf9\u4e8e Google Colab\uff0c\u8fd9\u662f\u901a\u8fc7[\u670d\u52a1\u5de5\u4f5c\u5668\u96a7\u9053](https://github.com/tensorflow/tensorboard/blob/master/docs/design/colab_integration.md)\u5b9e\u73b0\u7684\uff0c\u60a8\u7684\u6d4f\u89c8\u5668\u9700\u8981\u542f\u7528 cookies\u3002\uff09\u5bf9\u4e8e\u5176\u4ed6\u8fdc\u7a0b\u7b14\u8bb0\u672c\uff0cGradio \u4e5f\u5c06\u5728\u670d\u52a1\u5668\u4e0a\u8fd0\u884c\uff0c\u4f46\u60a8\u9700\u8981\u4f7f\u7528[SSH \u96a7\u9053](https://coderwall.com/p/ohk6cg/remote-access-to-ipython-notebooks-via-ssh)\u5728\u672c\u5730\u6d4f\u89c8\u5668\u4e2d\u67e5\u770b\u5e94\u7528\u7a0b\u5e8f\u3002\u901a\u5e38\uff0c\u66f4\u7b80\u5355\u7684\u9009\u62e9\u662f\u4f7f\u7528 Gradio \u5185\u7f6e\u7684\u516c\u5171\u94fe\u63a5\uff0c[\u5728\u4e0b\u4e00\u7bc7\u6307\u5357\u4e2d\u8ba8\u8bba](/sharing-your-app/#sharing-demos)\u3002",
      "!--Copyright 2023 The HuggingFace Team. All rights reserved.\n\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\nthe License. You may obtain a copy of the License at\n\nhttp://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software distributed under the License is distributed on\nan \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n\n\u26a0\ufe0f Note that this file is in Markdown but contain specific syntax for our doc-builder (similar to MDX) that may not be\nrendered properly in your Markdown viewer.\n\n-->\n\n# Training on TPU with TensorFlow\n\n<Tip>\n\nIf you don't need long explanations and just want TPU code samples to get started with, check out [our TPU example notebook!](https://colab.research.google.com/github/huggingface/notebooks/blob/main/examples/tpu_training-tf.ipynb)\n\n</Tip>\n\n### What is a TPU?\n\nA TPU is a **Tensor Processing Unit.** They are hardware designed by Google, which are used to greatly speed up the tensor computations within neural networks, much like GPUs. They can be used for both network training and inference. They are generally accessed through Google\u2019s cloud services, but small TPUs can also be accessed directly for free through Google Colab and Kaggle Kernels.\n\nBecause [all TensorFlow models in \ud83e\udd17 Transformers are Keras models](https://huggingface.co/blog/tensorflow-philosophy), most of the methods in this document are generally applicable to TPU training for any Keras model! However, there are a few points that are specific to the HuggingFace ecosystem (hug-o-system?) of Transformers and Datasets, and we\u2019ll make sure to flag them up when we get to them.\n\n### What kinds of TPU are available?\n\nNew users are often very confused by the range of TPUs, and the different ways to access them. The first key distinction to understand is the difference between **TPU Nodes** and **TPU VMs.**\n\nWhen you use a **TPU Node**, you are effectively indirectly accessing a remote TPU. You will need a separate VM, which will initialize your network and data pipeline and then forward them to the remote node. When you use a TPU on Google Colab, you are accessing it in the **TPU Node** style.",
      "Using TPU Nodes can have some quite unexpected behaviour for people who aren\u2019t used to them! In particular, because the TPU is located on a physically different system to the machine you\u2019re running your Python code on, your data cannot be local to your machine - any data pipeline that loads from your machine\u2019s internal storage will totally fail! Instead, data must be stored in Google Cloud Storage where your data pipeline can still access it, even when the pipeline is running on the remote TPU node.\n\n<Tip>\n\nIf you can fit all your data in memory as `np.ndarray` or `tf.Tensor`, then you can `fit()` on that data even when using Colab or a TPU Node, without needing to upload it to Google Cloud Storage.\n\n</Tip>\n\n<Tip>\n\n**\ud83e\udd17Specific Hugging Face Tip\ud83e\udd17:** The methods `Dataset.to_tf_dataset()` and its higher-level wrapper `model.prepare_tf_dataset()` , which you will see throughout our TF code examples, will both fail on a TPU Node. The reason for this is that even though they create a `tf.data.Dataset` it is not a \u201cpure\u201d `tf.data` pipeline and uses `tf.numpy_function` or `Dataset.from_generator()` to stream data from the underlying HuggingFace `Dataset`. This HuggingFace `Dataset` is backed by data that is on a local disc and which the remote TPU Node will not be able to read.\n\n</Tip>\n\nThe second way to access a TPU is via a **TPU VM.** When using a TPU VM, you connect directly to the machine that the TPU is attached to, much like training on a GPU VM. TPU VMs are generally easier to work with, particularly when it comes to your data pipeline. All of the above warnings do not apply to TPU VMs!\n\nThis is an opinionated document, so here\u2019s our opinion: **Avoid using TPU Node if possible.** It is more confusing and more difficult to debug than TPU VMs. It is also likely to be unsupported in future - Google\u2019s latest TPU, TPUv4, can only be accessed as a TPU VM, which suggests that TPU Nodes are increasingly going to become a \u201clegacy\u201d access method. However, we understand that the only free TPU access is on Colab and Kaggle Kernels, which uses TPU Node - so we\u2019ll try to explain how to handle it if you have to! Check the [TPU example notebook](https://colab.research.google.com/github/huggingface/notebooks/blob/main/examples/tpu_training-tf.ipynb) for code samples that explain this in more detail.\n\n### What sizes of TPU are available?",
      "### What sizes of TPU are available?\n\nA single TPU (a v2-8/v3-8/v4-8) runs 8 replicas. TPUs exist in **pods** that can run hundreds or thousands of replicas simultaneously. When you use more than a single TPU but less than a whole pod (for example, a v3-32), your TPU fleet is referred to as a **pod slice.**\n\nWhen you access a free TPU via Colab, you generally get a single v2-8 TPU.\n\n### I keep hearing about this XLA thing. What\u2019s XLA, and how does it relate to TPUs?\n\nXLA is an optimizing compiler, used by both TensorFlow and JAX. In JAX it is the only compiler, whereas in TensorFlow it is optional (but mandatory on TPU!). The easiest way to enable it when training a Keras model is to pass the argument `jit_compile=True` to `model.compile()`. If you don\u2019t get any errors and performance is good, that\u2019s a great sign that you\u2019re ready to move to TPU!\n\nDebugging on TPU is generally a bit harder than on CPU/GPU, so we recommend getting your code running on CPU/GPU with XLA first before trying it on TPU. You don\u2019t have to train for long, of course - just for a few steps to make sure that your model and data pipeline are working like you expect them to.\n\n<Tip>\n\nXLA compiled code is usually faster - so even if you\u2019re not planning to run on TPU, adding `jit_compile=True` can improve your performance. Be sure to note the caveats below about XLA compatibility, though!\n\n</Tip>\n\n<Tip warning={true}>\n\n**Tip born of painful experience:** Although using `jit_compile=True` is a good way to get a speed boost and test if your CPU/GPU code is XLA-compatible, it can actually cause a lot of problems if you leave it in when actually training on TPU. XLA compilation will happen implicitly on TPU, so remember to remove that line before actually running your code on a TPU!\n\n</Tip>\n\n### How do I make my model XLA compatible?\n\nIn many cases, your code is probably XLA-compatible already! However, there are a few things that work in normal TensorFlow that don\u2019t work in XLA. We\u2019ve distilled them into three core rules below:\n\n<Tip>",
      "<Tip>\n\n**\ud83e\udd17Specific HuggingFace Tip\ud83e\udd17:** We\u2019ve put a lot of effort into rewriting our TensorFlow models and loss functions to be XLA-compatible. Our models and loss functions generally obey rule #1 and #2 by default, so you can skip over them if you\u2019re using `transformers` models. Don\u2019t forget about these rules when writing your own models and loss functions, though!\n\n</Tip>\n\n#### XLA Rule #1: Your code cannot have \u201cdata-dependent conditionals\u201d\n\nWhat that means is that any `if` statement cannot depend on values inside a `tf.Tensor`. For example, this code block cannot be compiled with XLA!\n\n```python\nif tf.reduce_sum(tensor) > 10:\n    tensor = tensor / 2.0\n```\n\nThis might seem very restrictive at first, but most neural net code doesn\u2019t need to do this. You can often get around this restriction by using `tf.cond` (see the documentation [here](https://www.tensorflow.org/api_docs/python/tf/cond)) or by removing the conditional and finding a clever math trick with indicator variables instead, like so:\n\n```python\nsum_over_10 = tf.cast(tf.reduce_sum(tensor) > 10, tf.float32)\ntensor = tensor / (1.0 + sum_over_10)\n```\n\nThis code has exactly the same effect as the code above, but by avoiding a conditional, we ensure it will compile with XLA without problems!\n\n#### XLA Rule #2: Your code cannot have \u201cdata-dependent shapes\u201d\n\nWhat this means is that the shape of all of the `tf.Tensor` objects in your code cannot depend on their values. For example, the function `tf.unique` cannot be compiled with XLA, because it returns a `tensor` containing one instance of each unique value in the input. The shape of this output will obviously be different depending on how repetitive the input `Tensor` was, and so XLA refuses to handle it!\n\nIn general, most neural network code obeys rule #2 by default. However, there are a few common cases where it becomes a problem. One very common one is when you use **label masking**, setting your labels to a negative value to indicate that those positions should be ignored when computing the loss. If you look at NumPy or PyTorch loss functions that support label masking, you will often see code like this that uses [boolean indexing](https://numpy.org/doc/stable/user/basics.indexing.html#boolean-array-indexing):\n\n```python\nlabel_mask = labels >= 0\nmasked_outputs = outputs[label_mask]\nmasked_labels = labels[label_mask]\nloss = compute_loss(masked_outputs, masked_labels)\nmean_loss = torch.mean(loss)\n```",
      "This code is totally fine in NumPy or PyTorch, but it breaks in XLA! Why? Because the shape of `masked_outputs` and `masked_labels` depends on how many positions are masked - that makes it a **data-dependent shape.** However, just like for rule #1, we can often rewrite this code to yield exactly the same output without any data-dependent shapes.\n\n```python\nlabel_mask = tf.cast(labels >= 0, tf.float32)\nloss = compute_loss(outputs, labels)\nloss = loss * label_mask  # Set negative label positions to 0\nmean_loss = tf.reduce_sum(loss) / tf.reduce_sum(label_mask)\n```\n\nHere, we avoid data-dependent shapes by computing the loss for every position, but zeroing out the masked positions in both the numerator and denominator when we calculate the mean, which yields exactly the same result as the first block while maintaining XLA compatibility. Note that we use the same trick as in rule #1 - converting a `tf.bool` to `tf.float32` and using it as an indicator variable. This is a really useful trick, so remember it if you need to convert your own code to XLA!\n\n#### XLA Rule #3: XLA will need to recompile your model for every different input shape it sees\n\nThis is the big one. What this means is that if your input shapes are very variable, XLA will have to recompile your model over and over, which will create huge performance problems. This commonly arises in NLP models, where input texts have variable lengths after tokenization. In other modalities, static shapes are more common and this rule is much less of a problem.\n\nHow can you get around rule #3? The key is **padding** - if you pad all your inputs to the same length, and then use an `attention_mask`, you can get the same results as you\u2019d get from variable shapes, but without any XLA issues. However, excessive padding can cause severe slowdown too - if you pad all your samples to the maximum length in the whole dataset, you might end up with batches consisting endless padding tokens, which will waste a lot of compute and memory!\n\nThere isn\u2019t a perfect solution to this problem. However, you can try some tricks. One very useful trick is to **pad batches of samples up to a multiple of a number like 32 or 64 tokens.** This often only increases the number of tokens by a small amount, but it hugely reduces the number of unique input shapes, because every input shape now has to be a multiple of 32 or 64. Fewer unique input shapes means fewer XLA compilations!\n\n<Tip>",
      "<Tip>\n\n**\ud83e\udd17Specific HuggingFace Tip\ud83e\udd17:** Our tokenizers and data collators have methods that can help you here. You can use `padding=\"max_length\"` or `padding=\"longest\"` when calling tokenizers to get them to output padded data. Our tokenizers and data collators also have a `pad_to_multiple_of` argument that you can use to reduce the number of unique input shapes you see!\n\n</Tip>\n\n### How do I actually train my model on TPU?\n\nOnce your training is XLA-compatible and (if you\u2019re using TPU Node / Colab) your dataset has been prepared appropriately, running on TPU is surprisingly easy! All you really need to change in your code is to add a few lines to initialize your TPU, and to ensure that your model and dataset are created inside a `TPUStrategy` scope. Take a look at [our TPU example notebook](https://colab.research.google.com/github/huggingface/notebooks/blob/main/examples/tpu_training-tf.ipynb) to see this in action!\n\n### Summary\n\nThere was a lot in here, so let\u2019s summarize with a quick checklist you can follow when you want to get your model ready for TPU training:\n\n- Make sure your code follows the three rules of XLA\n- Compile your model with `jit_compile=True` on CPU/GPU and confirm that you can train it with XLA\n- Either load your dataset into memory or use a TPU-compatible dataset loading approach (see [notebook](https://colab.research.google.com/github/huggingface/notebooks/blob/main/examples/tpu_training-tf.ipynb))\n- Migrate your code either to Colab (with accelerator set to \u201cTPU\u201d) or a TPU VM on Google Cloud\n- Add TPU initializer code (see [notebook](https://colab.research.google.com/github/huggingface/notebooks/blob/main/examples/tpu_training-tf.ipynb))\n- Create your `TPUStrategy` and make sure dataset loading and model creation are inside the `strategy.scope()` (see [notebook](https://colab.research.google.com/github/huggingface/notebooks/blob/main/examples/tpu_training-tf.ipynb))\n- Don\u2019t forget to take `jit_compile=True` out again when you move to TPU!\n- \ud83d\ude4f\ud83d\ude4f\ud83d\ude4f\ud83e\udd7a\ud83e\udd7a\ud83e\udd7a\n- Call model.fit()\n- You did it!",
      "Gradio Demo: blocks_random_slider\n\n\n```\n!pip install -q gradio \n```\n\n\n```\n\nimport gradio as gr\n\n\ndef func(slider_1, slider_2):\n    return slider_1 * 5 + slider_2\n\n\nwith gr.Blocks() as demo:\n    slider = gr.Slider(minimum=-10.2, maximum=15, label=\"Random Slider (Static)\", randomize=True)\n    slider_1 = gr.Slider(minimum=100, maximum=200, label=\"Random Slider (Input 1)\", randomize=True)\n    slider_2 = gr.Slider(minimum=10, maximum=23.2, label=\"Random Slider (Input 2)\", randomize=True)\n    slider_3 = gr.Slider(value=3, label=\"Non random slider\")\n    btn = gr.Button(\"Run\")\n    btn.click(func, inputs=[slider_1, slider_2], outputs=gr.Number())\n\nif __name__ == \"__main__\":\n    demo.launch()\n\n```",
      "Git over SSH\n\nYou can access and write data in repositories on huggingface.co using SSH (Secure Shell Protocol). When you connect via SSH, you authenticate using a private key file on your local machine.\n\nSome actions, such as pushing changes, or cloning private repositories, will require you to upload your SSH public key to your account on huggingface.co.\n\nYou can use a pre-existing SSH key, or generate a new one specifically for huggingface.co.\n\n## Checking for existing SSH keys\n\nIf you have an existing SSH key, you can use that key to authenticate Git operations over SSH.\n\nSSH keys are usually located under `~/.ssh` on Mac & Linux, and under `C:\\\\Users\\\\<username>\\\\.ssh` on Windows. List files under that directory and look for files of the form:\n\n- id_rsa.pub\n- id_ecdsa.pub\n- id_ed25519.pub\n\nThose files contain your SSH public key.\n\nIf you don't have such file under `~/.ssh`, you will have to [generate a new key](#generating-a-new-ssh-keypair). Otherwise, you can [add your existing SSH public key(s) to your huggingface.co account](#add-a-ssh-key-to-your-account).\n\n## Generating a new SSH keypair\n\nIf you don't have any SSH keys on your machine, you can use `ssh-keygen` to generate a new SSH key pair (public + private keys):\n\n```\n$ ssh-keygen -t ed25519 -C \"your.email@example.co\"\n```\n\nWe recommend entering a passphrase when you are prompted to. A passphrase is an extra layer of security: it is a password that will be prompted whenever you use your SSH key.\n\nOnce your new key is generated, add it to your SSH agent with `ssh-add`:\n\n```\n$ ssh-add ~/.ssh/id_ed25519\n```\n\nIf you chose a different location than the default to store your SSH key, you would have to replace `~/.ssh/id_ed25519` with the file location you used.\n\n## Add a SSH key to your account\n\nTo access private repositories with SSH, or to push changes via SSH, you will need to add your SSH public key to your huggingface.co account. You can manage your SSH keys [in your user settings](https://huggingface.co/settings/keys).\n\nTo add a SSH key to your account, click on the \"Add SSH key\" button.\n\nThen, enter a name for this key (for example, \"Personal computer\"), and copy and paste the content of your **public** SSH key in the area below. The public key is located in the `~/.ssh/id_XXXX.pub` file you found or generated in the previous steps.",
      "Click on \"Add key\", and voil\u00e0! You have added a SSH key to your huggingface.co account.\n\n\n## Testing your SSH authentication\n\nOnce you have added your SSH key to your huggingface.co account, you can test that the connection works as expected.\n\nIn a terminal, run:\n```\n$ ssh -T git@hf.co\n```\n\nIf you see a message with your username, congrats! Everything went well, you are ready to use git over SSH.\n\nOtherwise, if the message states something like the following, make sure your SSH key is actually used by your SSH agent.\n```\nHi anonymous, welcome to Hugging Face.\n```",
      "!---\nCopyright 2022 The HuggingFace Team. All rights reserved.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n-->\n\n# Token classification with LayoutLMv3 (PyTorch version)\n\nThis directory contains a script, `run_funsd_cord.py`, that can be used to fine-tune (or evaluate) LayoutLMv3 on form understanding datasets, such as [FUNSD](https://guillaumejaume.github.io/FUNSD/) and [CORD](https://github.com/clovaai/cord).\n\nThe script `run_funsd_cord.py` leverages the \ud83e\udd17 Datasets library and the Trainer API. You can easily customize it to your needs.\n\n## Fine-tuning on FUNSD\n\nFine-tuning LayoutLMv3 for token classification on [FUNSD](https://guillaumejaume.github.io/FUNSD/) can be done as follows:\n\n```bash\npython run_funsd_cord.py \\\n  --model_name_or_path microsoft/layoutlmv3-base \\\n  --dataset_name funsd \\\n  --output_dir layoutlmv3-test \\\n  --do_train \\\n  --do_eval \\\n  --max_steps 1000 \\\n  --evaluation_strategy steps \\\n  --eval_steps 100 \\\n  --learning_rate 1e-5 \\\n  --load_best_model_at_end \\\n  --metric_for_best_model \"eval_f1\" \\\n  --push_to_hub \\\n  --push_to_hub\u00b0model_id layoutlmv3-finetuned-funsd\n```\n\n\ud83d\udc40 The resulting model can be found here: https://huggingface.co/nielsr/layoutlmv3-finetuned-funsd. By specifying the `push_to_hub` flag, the model gets uploaded automatically to the hub (regularly), together with a model card, which includes metrics such as precision, recall and F1. Note that you can easily update the model card, as it's just a README file of the respective repo on the hub.\n\nThere's also the \"Training metrics\" [tab](https://huggingface.co/nielsr/layoutlmv3-finetuned-funsd/tensorboard), which shows Tensorboard logs over the course of training. Pretty neat, huh?\n\n## Fine-tuning on CORD",
      "## Fine-tuning on CORD\n\nFine-tuning LayoutLMv3 for token classification on [CORD](https://github.com/clovaai/cord) can be done as follows:\n\n```bash\npython run_funsd_cord.py \\\n  --model_name_or_path microsoft/layoutlmv3-base \\\n  --dataset_name cord \\\n  --output_dir layoutlmv3-test \\\n  --do_train \\\n  --do_eval \\\n  --max_steps 1000 \\\n  --evaluation_strategy steps \\\n  --eval_steps 100 \\\n  --learning_rate 5e-5 \\\n  --load_best_model_at_end \\\n  --metric_for_best_model \"eval_f1\" \\\n  --push_to_hub \\\n  --push_to_hub\u00b0model_id layoutlmv3-finetuned-cord\n```\n\n\ud83d\udc40 The resulting model can be found here: https://huggingface.co/nielsr/layoutlmv3-finetuned-cord. Note that a model card gets generated automatically in case you specify the `push_to_hub` flag.",
      "State in Blocks\n\nWe covered [State in Interfaces](https://gradio.app/interface-state), this guide takes a look at state in Blocks, which works mostly the same.\n\n## Global State\n\nGlobal state in Blocks works the same as in Interface. Any variable created outside a function call is a reference shared between all users.\n\n## Session State\n\nGradio supports session **state**, where data persists across multiple submits within a page session, in Blocks apps as well. To reiterate, session data is _not_ shared between different users of your model. To store data in a session state, you need to do three things:\n\n1. Create a `gr.State()` object. If there is a default value to this stateful object, pass that into the constructor.\n2. In the event listener, put the `State` object as an input and output.\n3. In the event listener function, add the variable to the input parameters and the return value.\n\nLet's take a look at a game of hangman.\n\n$code_hangman\n$demo_hangman\n\nLet's see how we do each of the 3 steps listed above in this game:\n\n1. We store the used letters in `used_letters_var`. In the constructor of `State`, we set the initial value of this to `[]`, an empty list.\n2. In `btn.click()`, we have a reference to `used_letters_var` in both the inputs and outputs.\n3. In `guess_letter`, we pass the value of this `State` to `used_letters`, and then return an updated value of this `State` in the return statement.\n\nWith more complex apps, you will likely have many State variables storing session state in a single Blocks app.\n\nLearn more about `State` in the [docs](https://gradio.app/docs#state).",
      "\u5982\u4f55\u4f7f\u7528\u5730\u56fe\u7ec4\u4ef6\u7ed8\u5236\u56fe\u8868\n\nRelated spaces:\nTags: PLOTS, MAPS\n\n## \u7b80\u4ecb\n\n\u672c\u6307\u5357\u4ecb\u7ecd\u5982\u4f55\u4f7f\u7528 Gradio \u7684 `Plot` \u7ec4\u4ef6\u5728\u5730\u56fe\u4e0a\u7ed8\u5236\u5730\u7406\u6570\u636e\u3002Gradio \u7684 `Plot` \u7ec4\u4ef6\u53ef\u4ee5\u4e0e Matplotlib\u3001Bokeh \u548c Plotly \u4e00\u8d77\u4f7f\u7528\u3002\u5728\u672c\u6307\u5357\u4e2d\uff0c\u6211\u4eec\u5c06\u4f7f\u7528 Plotly \u8fdb\u884c\u64cd\u4f5c\u3002Plotly \u53ef\u4ee5\u8ba9\u5f00\u53d1\u4eba\u5458\u8f7b\u677e\u521b\u5efa\u5404\u79cd\u5730\u56fe\u6765\u5c55\u793a\u4ed6\u4eec\u7684\u5730\u7406\u6570\u636e\u3002\u70b9\u51fb[\u8fd9\u91cc](https://plotly.com/python/maps/)\u67e5\u770b\u4e00\u4e9b\u793a\u4f8b\u3002\n\n## \u6982\u8ff0\n\n\u6211\u4eec\u5c06\u4f7f\u7528\u7ebd\u7ea6\u5e02\u7684 Airbnb \u6570\u636e\u96c6\uff0c\u8be5\u6570\u636e\u96c6\u6258\u7ba1\u5728 kaggle \u4e0a\uff0c\u70b9\u51fb[\u8fd9\u91cc](https://www.kaggle.com/datasets/dgomonov/new-york-city-airbnb-open-data)\u3002\u6211\u5df2\u7ecf\u5c06\u5176\u4e0a\u4f20\u5230 Hugging Face Hub \u4f5c\u4e3a\u4e00\u4e2a\u6570\u636e\u96c6\uff0c\u65b9\u4fbf\u4f7f\u7528\u548c\u4e0b\u8f7d\uff0c\u70b9\u51fb[\u8fd9\u91cc](https://huggingface.co/datasets/gradio/NYC-Airbnb-Open-Data)\u3002\u4f7f\u7528\u8fd9\u4e9b\u6570\u636e\uff0c\u6211\u4eec\u5c06\u5728\u5730\u56fe\u4e0a\u7ed8\u5236 Airbnb \u7684\u4f4d\u7f6e\uff0c\u5e76\u5141\u8bb8\u57fa\u4e8e\u4ef7\u683c\u548c\u4f4d\u7f6e\u8fdb\u884c\u7b5b\u9009\u3002\u4e0b\u9762\u662f\u6211\u4eec\u5c06\u8981\u6784\u5efa\u7684\u6f14\u793a\u3002 \u26a1\ufe0f\n\n$demo_map_airbnb\n\n## \u6b65\u9aa4 1-\u52a0\u8f7d CSV \u6570\u636e \ud83d\udcbe\n\n\u8ba9\u6211\u4eec\u9996\u5148\u4ece Hugging Face Hub \u52a0\u8f7d\u7ebd\u7ea6\u5e02\u7684 Airbnb \u6570\u636e\u3002\n\n```python\nfrom datasets import load_dataset\n\ndataset = load_dataset(\"gradio/NYC-Airbnb-Open-Data\", split=\"train\")\ndf = dataset.to_pandas()\n\ndef filter_map(min_price, max_price, boroughs):\n    new_df = df[(df['neighbourhood_group'].isin(boroughs)) &\n            (df['price'] > min_price) & (df['price'] < max_price)]\n    names = new_df[\"name\"].tolist()\n    prices = new_df[\"price\"].tolist()\n    text_list = [(names[i], prices[i]) for i in range(0, len(names))]\n```",
      "\u5728\u4e0a\u9762\u7684\u4ee3\u7801\u4e2d\uff0c\u6211\u4eec\u5148\u5c06 CSV \u6570\u636e\u52a0\u8f7d\u5230\u4e00\u4e2a pandas dataframe \u4e2d\u3002\u8ba9\u6211\u4eec\u9996\u5148\u5b9a\u4e49\u4e00\u4e2a\u51fd\u6570\uff0c\u8fd9\u5c06\u4f5c\u4e3a gradio \u5e94\u7528\u7a0b\u5e8f\u7684\u9884\u6d4b\u51fd\u6570\u3002\u8be5\u51fd\u6570\u5c06\u63a5\u53d7\u6700\u4f4e\u4ef7\u683c\u3001\u6700\u9ad8\u4ef7\u683c\u8303\u56f4\u548c\u7b5b\u9009\u7ed3\u679c\u5730\u533a\u7684\u5217\u8868\u4f5c\u4e3a\u53c2\u6570\u3002\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u4f20\u5165\u7684\u503c (`min_price`\u3001`max_price` \u548c\u5730\u533a\u5217\u8868) \u6765\u7b5b\u9009\u6570\u636e\u6846\u5e76\u521b\u5efa `new_df`\u3002\u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u5c06\u521b\u5efa\u5305\u542b\u6bcf\u4e2a Airbnb \u7684\u540d\u79f0\u548c\u4ef7\u683c\u7684 `text_list`\uff0c\u4ee5\u4fbf\u5728\u5730\u56fe\u4e0a\u4f7f\u7528\u4f5c\u4e3a\u6807\u7b7e\u3002\n\n## \u6b65\u9aa4 2-\u5730\u56fe\u56fe\u8868 \ud83c\udf10\n\nPlotly \u4f7f\u5f97\u5904\u7406\u5730\u56fe\u53d8\u5f97\u5f88\u5bb9\u6613\u3002\u8ba9\u6211\u4eec\u770b\u4e00\u4e0b\u4e0b\u9762\u7684\u4ee3\u7801\uff0c\u4e86\u89e3\u5982\u4f55\u521b\u5efa\u5730\u56fe\u56fe\u8868\u3002\n\n```python\nimport plotly.graph_objects as go\n\nfig = go.Figure(go.Scattermapbox(\n            customdata=text_list,\n            lat=new_df['latitude'].tolist(),\n            lon=new_df['longitude'].tolist(),\n            mode='markers',\n            marker=go.scattermapbox.Marker(\n                size=6\n            ),\n            hoverinfo=\"text\",\n            hovertemplate='<b>Name</b>: %{customdata[0]}<br><b>Price</b>: $%{customdata[1]}'\n        ))\n\nfig.update_layout(\n    mapbox_style=\"open-street-map\",\n    hovermode='closest',\n    mapbox=dict(\n        bearing=0,\n        center=go.layout.mapbox.Center(\n            lat=40.67,\n            lon=-73.90\n        ),\n        pitch=0,\n        zoom=9\n    ),\n)\n```\n\n\u4e0a\u9762\u7684\u4ee3\u7801\u4e2d\uff0c\u6211\u4eec\u901a\u8fc7\u4f20\u5165\u7ecf\u7eac\u5ea6\u5217\u8868\u6765\u521b\u5efa\u4e00\u4e2a\u6563\u70b9\u56fe\u3002\u6211\u4eec\u8fd8\u4f20\u5165\u4e86\u540d\u79f0\u548c\u4ef7\u683c\u7684\u81ea\u5b9a\u4e49\u6570\u636e\uff0c\u4ee5\u4fbf\u5728\u9f20\u6807\u60ac\u505c\u5728\u6bcf\u4e2a\u6807\u8bb0\u4e0a\u65f6\u663e\u793a\u989d\u5916\u7684\u4fe1\u606f\u3002\u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u4f7f\u7528 `update_layout` \u6765\u6307\u5b9a\u5176\u4ed6\u5730\u56fe\u8bbe\u7f6e\uff0c\u4f8b\u5982\u7f29\u653e\u548c\u5c45\u4e2d\u3002\n\n\u6709\u5173\u4f7f\u7528 Mapbox \u548c Plotly \u521b\u5efa\u6563\u70b9\u56fe\u7684\u66f4\u591a\u4fe1\u606f\uff0c\u8bf7\u70b9\u51fb[\u8fd9\u91cc](https://plotly.com/python/scattermapbox/)\u3002\n\n## \u6b65\u9aa4 3-Gradio \u5e94\u7528\u7a0b\u5e8f \u26a1\ufe0f\n\n\u6211\u4eec\u5c06\u4f7f\u7528\u4e24\u4e2a `gr.Number` \u7ec4\u4ef6\u548c\u4e00\u4e2a `gr.CheckboxGroup` \u7ec4\u4ef6\uff0c\u5141\u8bb8\u7528\u6237\u6307\u5b9a\u4ef7\u683c\u8303\u56f4\u548c\u5730\u533a\u4f4d\u7f6e\u3002\u7136\u540e\uff0c\u6211\u4eec\u5c06\u4f7f\u7528 `gr.Plot` \u7ec4\u4ef6\u4f5c\u4e3a\u6211\u4eec\u4e4b\u524d\u521b\u5efa\u7684 Plotly + Mapbox \u5730\u56fe\u7684\u8f93\u51fa\u3002",
      "```python\nwith gr.Blocks() as demo:\n    with gr.Column():\n        with gr.Row():\n            min_price = gr.Number(value=250, label=\"Minimum Price\")\n            max_price = gr.Number(value=1000, label=\"Maximum Price\")\n        boroughs = gr.CheckboxGroup(choices=[\"Queens\", \"Brooklyn\", \"Manhattan\", \"Bronx\", \"Staten Island\"], value=[\"Queens\", \"Brooklyn\"], label=\"Select Boroughs:\")\n        btn = gr.Button(value=\"Update Filter\")\n        map = gr.Plot()\n    demo.load(filter_map, [min_price, max_price, boroughs], map)\n    btn.click(filter_map, [min_price, max_price, boroughs], map)\n```\n\n\u6211\u4eec\u4f7f\u7528 `gr.Column` \u548c `gr.Row` \u5e03\u5c40\u8fd9\u4e9b\u7ec4\u4ef6\uff0c\u5e76\u4e3a\u6f14\u793a\u52a0\u8f7d\u65f6\u548c\u70b9\u51fb \" \u66f4\u65b0\u7b5b\u9009 \" \u6309\u94ae\u65f6\u6dfb\u52a0\u4e86\u4e8b\u4ef6\u89e6\u53d1\u5668\uff0c\u4ee5\u89e6\u53d1\u5730\u56fe\u66f4\u65b0\u65b0\u7684\u7b5b\u9009\u6761\u4ef6\u3002\n\n\u4ee5\u4e0b\u662f\u5b8c\u6574\u6f14\u793a\u4ee3\u7801\uff1a\n\n$code_map_airbnb\n\n## \u6b65\u9aa4 4-\u90e8\u7f72 Deployment \ud83e\udd17\n\n\u5982\u679c\u4f60\u8fd0\u884c\u4e0a\u9762\u7684\u4ee3\u7801\uff0c\u4f60\u7684\u5e94\u7528\u7a0b\u5e8f\u5c06\u5728\u672c\u5730\u8fd0\u884c\u3002\n\u5982\u679c\u8981\u83b7\u53d6\u4e34\u65f6\u5171\u4eab\u94fe\u63a5\uff0c\u53ef\u4ee5\u5c06 `share=True` \u53c2\u6570\u4f20\u9012\u7ed9 `launch`\u3002\n\n\u4f46\u5982\u679c\u4f60\u60f3\u8981\u4e00\u4e2a\u6c38\u4e45\u7684\u90e8\u7f72\u89e3\u51b3\u65b9\u6848\u5462\uff1f\n\u8ba9\u6211\u4eec\u5c06\u6211\u4eec\u7684 Gradio \u5e94\u7528\u7a0b\u5e8f\u90e8\u7f72\u5230\u514d\u8d39\u7684 HuggingFace Spaces \u5e73\u53f0\u3002\n\n\u5982\u679c\u4f60\u4ee5\u524d\u6ca1\u6709\u4f7f\u7528\u8fc7 Spaces\uff0c\u8bf7\u6309\u7167\u4e4b\u524d\u7684\u6307\u5357[\u8fd9\u91cc](/using_hugging_face_integrations)\u3002\n\n## \u7ed3\u8bba \ud83c\udf89\n\n\u4f60\u5df2\u7ecf\u5b8c\u6210\u4e86\uff01\u8fd9\u662f\u6784\u5efa\u5730\u56fe\u6f14\u793a\u6240\u9700\u7684\u6240\u6709\u4ee3\u7801\u3002\n\n\u94fe\u63a5\u5230\u6f14\u793a\uff1a[\u5730\u56fe\u6f14\u793a](https://huggingface.co/spaces/gradio/map_airbnb)\u548c[\u5b8c\u6574\u4ee3\u7801](https://huggingface.co/spaces/gradio/map_airbnb/blob/main/run.py)\uff08\u5728 Hugging Face Spaces\uff09",
      "SE-ResNet\n\n**SE ResNet** is a variant of a [ResNet](https://www.paperswithcode.com/method/resnet) that employs [squeeze-and-excitation blocks](https://paperswithcode.com/method/squeeze-and-excitation-block) to enable the network to perform dynamic channel-wise feature recalibration.\n\n## How do I use this model on an image?\n\nTo load a pretrained model:\n\n```py\n>>> import timm\n>>> model = timm.create_model('seresnet152d', pretrained=True)\n>>> model.eval()\n```\n\nTo load and preprocess the image:\n\n```py \n>>> import urllib\n>>> from PIL import Image\n>>> from timm.data import resolve_data_config\n>>> from timm.data.transforms_factory import create_transform\n\n>>> config = resolve_data_config({}, model=model)\n>>> transform = create_transform(**config)\n\n>>> url, filename = (\"https://github.com/pytorch/hub/raw/master/images/dog.jpg\", \"dog.jpg\")\n>>> urllib.request.urlretrieve(url, filename)\n>>> img = Image.open(filename).convert('RGB')\n>>> tensor = transform(img).unsqueeze(0) # transform and add batch dimension\n```\n\nTo get the model predictions:\n\n```py\n>>> import torch\n>>> with torch.no_grad():\n...     out = model(tensor)\n>>> probabilities = torch.nn.functional.softmax(out[0], dim=0)\n>>> print(probabilities.shape)\n>>> # prints: torch.Size([1000])\n```\n\nTo get the top-5 predictions class names:\n\n```py\n>>> # Get imagenet class mappings\n>>> url, filename = (\"https://raw.githubusercontent.com/pytorch/hub/master/imagenet_classes.txt\", \"imagenet_classes.txt\")\n>>> urllib.request.urlretrieve(url, filename) \n>>> with open(\"imagenet_classes.txt\", \"r\") as f:\n...     categories = [s.strip() for s in f.readlines()]\n\n>>> # Print top categories per image\n>>> top5_prob, top5_catid = torch.topk(probabilities, 5)\n>>> for i in range(top5_prob.size(0)):\n...     print(categories[top5_catid[i]], top5_prob[i].item())\n>>> # prints class names and probabilities like:\n>>> # [('Samoyed', 0.6425196528434753), ('Pomeranian', 0.04062102362513542), ('keeshond', 0.03186424449086189), ('white wolf', 0.01739676296710968), ('Eskimo dog', 0.011717947199940681)]\n```\n\nReplace the model name with the variant you want to use, e.g. `seresnet152d`. You can find the IDs in the model summaries at the top of this page.",
      "To extract image features with this model, follow the [timm feature extraction examples](../feature_extraction), just change the name of the model you want to use.\n\n## How do I finetune this model?\n\nYou can finetune any of the pre-trained models just by changing the classifier (the last layer).\n\n```py\n>>> model = timm.create_model('seresnet152d', pretrained=True, num_classes=NUM_FINETUNE_CLASSES)\n```\nTo finetune on your own dataset, you have to write a training loop or adapt [timm's training\nscript](https://github.com/rwightman/pytorch-image-models/blob/master/train.py) to use your dataset.\n\n## How do I train this model?\n\nYou can follow the [timm recipe scripts](../scripts) for training a new model afresh.\n\n## Citation\n\n```BibTeX\n@misc{hu2019squeezeandexcitation,\n      title={Squeeze-and-Excitation Networks}, \n      author={Jie Hu and Li Shen and Samuel Albanie and Gang Sun and Enhua Wu},\n      year={2019},\n      eprint={1709.01507},\n      archivePrefix={arXiv},\n      primaryClass={cs.CV}\n}\n```",
      "<!--\nType: model-index\nCollections:\n- Name: SE ResNet\n  Paper:\n    Title: Squeeze-and-Excitation Networks\n    URL: https://paperswithcode.com/paper/squeeze-and-excitation-networks\nModels:\n- Name: seresnet152d\n  In Collection: SE ResNet\n  Metadata:\n    FLOPs: 20161904304\n    Parameters: 66840000\n    File Size: 268144497\n    Architecture:\n    - 1x1 Convolution\n    - Batch Normalization\n    - Bottleneck Residual Block\n    - Convolution\n    - Global Average Pooling\n    - Max Pooling\n    - ReLU\n    - Residual Block\n    - Residual Connection\n    - Softmax\n    - Squeeze-and-Excitation Block\n    Tasks:\n    - Image Classification\n    Training Techniques:\n    - Label Smoothing\n    - SGD with Momentum\n    - Weight Decay\n    Training Data:\n    - ImageNet\n    Training Resources: 8x NVIDIA Titan X GPUs\n    ID: seresnet152d\n    LR: 0.6\n    Epochs: 100\n    Layers: 152\n    Dropout: 0.2\n    Crop Pct: '0.94'\n    Momentum: 0.9\n    Batch Size: 1024\n    Image Size: '256'\n    Interpolation: bicubic\n  Code: https://github.com/rwightman/pytorch-image-models/blob/a7f95818e44b281137503bcf4b3e3e94d8ffa52f/timm/models/resnet.py#L1206\n  Weights: https://github.com/rwightman/pytorch-image-models/releases/download/v0.1-weights/seresnet152d_ra2-04464dd2.pth\n  Results:\n  - Task: Image Classification\n    Dataset: ImageNet\n    Metrics:\n      Top 1 Accuracy: 83.74%\n      Top 5 Accuracy: 96.77%\n- Name: seresnet50\n  In Collection: SE ResNet\n  Metadata:\n    FLOPs: 5285062320\n    Parameters: 28090000\n    File Size: 112621903\n    Architecture:\n    - 1x1 Convolution\n    - Batch Normalization\n    - Bottleneck Residual Block\n    - Convolution\n    - Global Average Pooling\n    - Max Pooling\n    - ReLU\n    - Residual Block\n    - Residual Connection\n    - Softmax\n    - Squeeze-and-Excitation Block\n    Tasks:\n    - Image Classification\n    Training Techniques:\n    - Label Smoothing",
      "- Squeeze-and-Excitation Block\n    Tasks:\n    - Image Classification\n    Training Techniques:\n    - Label Smoothing\n    - SGD with Momentum\n    - Weight Decay\n    Training Data:\n    - ImageNet\n    Training Resources: 8x NVIDIA Titan X GPUs\n    ID: seresnet50\n    LR: 0.6\n    Epochs: 100\n    Layers: 50\n    Dropout: 0.2\n    Crop Pct: '0.875'\n    Momentum: 0.9\n    Batch Size: 1024\n    Image Size: '224'\n    Interpolation: bicubic\n  Code: https://github.com/rwightman/pytorch-image-models/blob/a7f95818e44b281137503bcf4b3e3e94d8ffa52f/timm/models/resnet.py#L1180\n  Weights: https://github.com/rwightman/pytorch-image-models/releases/download/v0.1-weights/seresnet50_ra_224-8efdb4bb.pth\n  Results:\n  - Task: Image Classification\n    Dataset: ImageNet\n    Metrics:\n      Top 1 Accuracy: 80.26%\n      Top 5 Accuracy: 95.07%\n-->"
    ]
  }
]
syntax = "proto3";
import "core.proto";
import "llm.proto";
import "google/protobuf/any.proto";

package instinct.agent;

message FunctionToolArgument {
  string name = 1;
  string description = 2;
  core.PrimitiveType type = 3;
}

message FunctionToolSchema {
  string name = 1;
  string description = 2;
  repeated FunctionToolArgument arguments = 3;
}

message FunctionToolInvocation {
  string name = 1;
  /**
  action input from planer llm, which could be a JSON string ,or simple string literal
   */
  string input = 2;

  string id = 3;
}


message FunctionToolResult {
  string invocation_id = 1;
  string return_value = 2;
  bool has_error = 3;
  string exception = 4;
}

message ReACTAgentThoughtStepMessage {
  string thought = 1;
  FunctionToolInvocation invocation = 2;
  string final_answer = 3;
}

message ReACTAgentObservationStepMessage {
  FunctionToolResult result = 1;
}

message AgentFinishStepMessage {
  string response = 1;
  bool has_error = 2;
  string exception = 3;
}

message LLMCompilerThoughtMessage {}

message LLMCompilerObservationMessage {}

message AgentThoughtMessage {
  // thought for officially supported implementations
  oneof value {
    ReACTAgentThoughtStepMessage react = 1;
    LLMCompilerThoughtMessage llm_compiler = 2;
  }

  // reserved for user defined thought
  google.protobuf.Any custom = 100;
}

message AgentObservationMessage {
  // thought for officially supported implementations
  oneof value {
    ReACTAgentObservationStepMessage react = 1;
    LLMCompilerObservationMessage llm_compiler = 2;
  }

  // reserved for user defined observation
  google.protobuf.Any custom = 100;
}

message AgentStep {
  oneof value {
    AgentFinishStepMessage finish = 1;
    AgentThoughtMessage thought = 2;
    AgentObservationMessage observation = 3;
  }
}

message AgentState {
  repeated AgentStep previous_steps = 1;
  llm.PromptValue input = 2;
  repeated FunctionToolSchema function_tools = 3;
}


syntax = "proto3";
import "llm.proto";
import "google/protobuf/any.proto";
import "chat_completion_api.proto";
//import "assistant_api_v2.proto";

package instinct.llm;


//message FunctionToolInvocation {
//  string name = 1;
//  /**
//  action input from planer llm, which could be a JSON string ,or simple string literal
//   */
//  string input = 2;
//
//  string id = 3;
//}

message FunctionToolSelfCheckResponse {
  bool passed = 2;
}

message FunctionToolResult { // this is useful for toolkit related classes, tool message cannot represent invoke result lossless.
  string invocation_id = 1;
  string return_value = 2;
  bool has_error = 3;
  string exception = 4;
}
//
//message ReACTAgentContinuation {
//  string thought = 1;
//  FunctionToolInvocation invocation = 2;
////  string final_answer = 3;
//}
//
//message ReACTAgentObservation {
//  FunctionToolResult result = 1;
//}

//
//message LLMCompilerToolCallCustomData {// custom data for llm.Message::custom
//  // index in function graph
//  int64 index = 1;
//}
//
//message LLMCompilerTask {
//  int64 index = 1;
//  ToolCallObject tool_call_object = 2;
//  repeated int64 dependencies = 3;
//  string tool_call_id = 4;
//}
//
//message LLMCompilerContinuation {
//  map<int64, LLMCompilerTask> task_graph = 1;
//}
//
//message LLMCompilerPause {
//  map<int64, LLMCompilerTask> task_graph = 1;
//  repeated llm.Message completed = 2;
//}
//
//message LLMCompilerObservation {
//  repeated llm.Message tool_messages = 1;
//}
//
//message OpenAIToolAgentContinuation {
//
//}

//message OpenAIToolAgentObservation {
//  repeated llm.Message tool_messages = 1; // completed tool calls
//}
//
//message OpenAIToolAgentPause {
//  repeated llm.Message completed = 1; // should be a group of completed tool message
//  llm.Message tool_call_message = 2; // original tool call requests
//
//}

message AgentContinuation {
  // thought for officially supported implementations
//  oneof value {
//    ReACTAgentContinuation react = 1;
//    LLMCompilerContinuation llm_compiler = 2;
//    OpenAIToolAgentContinuation openai = 3;
//  }



  llm.Message tool_call_message = 1; // should be a message container tool call requests
  repeated llm.FunctionTool functions = 2; // possible function tools


  // reserved for user defined thought
  google.protobuf.Any custom = 100;
}

message AgentPause {
  // currently only openai tool agent supports pausing
//  oneof value {
//      OpenAIToolAgentPause openai = 1;
//  }

  repeated llm.Message completed = 1; // should be a group of completed tool message
  llm.Message tool_call_message = 2; // original tool call requests

  // reserved for user defined thought
  google.protobuf.Any custom = 100;
}

message AgentFinish {
  string response = 1;
  bool is_cancelled = 2;
  bool is_expired = 3;
  bool is_failed = 4;

//  string exception = 5;
  google.protobuf.Any details = 100;
}

message AgentThought {
  oneof value {
      AgentContinuation continuation = 1;
      AgentPause pause = 2;
      AgentFinish finish = 3;
  }
}

message AgentObservation {
  // thought for officially supported implementations
//  oneof value {
//    ReACTAgentObservation react = 1;
//    LLMCompilerObservation llm_compiler = 2;
//    OpenAIToolAgentObservation openai = 3; // should be a tool message
//  }


  repeated llm.Message tool_messages = 1; // completed tool calls


  // reserved for user defined observation
  google.protobuf.Any custom = 100;
}


message AgentStep {
  oneof value {
    AgentThought thought = 1;
    AgentObservation observation = 2;
  }
}

message AgentState {
  repeated AgentStep previous_steps = 1;
  llm.PromptValue input = 2;
  // code_interpreter and file_search should be translated to FunctionTool format
  repeated llm.FunctionTool function_tools = 3;
}

message SearchToolRequest {
  string query = 1;
  optional int32 result_limit = 2;
  optional int32 result_offset = 3;
}

message SearchToolResponseEntry {
  string url = 1;
  string content = 2;
  string title = 3;
}

message SearchToolResponse {
  repeated SearchToolResponseEntry entries = 1;
}

message CaculatorToolRequest {
  string math_question = 1;
}

message CalculatorToolResponse {
  double answer = 1;
}

/**
  https://serpapi.com/search-api
 */
message SerpAPISearchResponse {
  message AnswerBox {
    string type = 1;
    string result = 2;
  }
  message OrganicResult {
    string title = 1;
    string link = 2;
    string snippet = 3;
  }
  message QuestionAndAnswer {
    string title = 1;
    string link = 2;
    string source = 3;
    string question = 4;
    string answer = 5;
  }
  repeated OrganicResult organic_results = 1;
  repeated QuestionAndAnswer questions_and_answers = 2;
  AnswerBox answer_box = 3;

}

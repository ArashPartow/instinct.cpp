syntax = "proto3";
import "google/protobuf/empty.proto";
import "google/protobuf/api.proto";

//
//message CancelBatchRequest {
//  // The ID of the batch to cancel.
//  string batch_id = 1;
//}
//
//message CancelFineTuningJobRequest {
//  // The ID of the fine-tuning job to cancel.
//  string fine_tuning_job_id = 1;
//}

message CancelRunRequest {
  // The ID of the run to cancel.
  string run_id = 1;

  // The ID of the thread to which this run belongs.
  string thread_id = 2;
}

message CancelVectorStoreFileBatchRequest {
  // The ID of the file batch to cancel.
  string batch_id = 1;

  // The ID of the vector store that the file batch belongs to.
  string vector_store_id = 2;
}

message CreateMessageRequest {
  // The ID of the [thread](/docs/api-reference/threads) to create a message for.
  string thread_id = 1;
}

message CreateRunRequest {
  // The ID of the thread to run.
  string thread_id = 1;
}

message CreateVectorStoreFileBatchRequest {
  // The ID of the vector store for which to create a File Batch.
  string vector_store_id = 1;
}

message CreateVectorStoreFileRequest {
  // The ID of the vector store for which to create a File.
  string vector_store_id = 1;
}

message DeleteAssistantRequest {
  // The ID of the assistant to delete.
  string assistant_id = 1;
}

message DeleteFileRequest {
  // The ID of the file to use for this request.
  string file_id = 1;
}

message DeleteModelRequest {
  // The model to delete
  string model = 1;
}

message DeleteThreadRequest {
  // The ID of the thread to delete.
  string thread_id = 1;
}

message DeleteVectorStoreFileRequest {
  // The ID of the file to delete.
  string file_id = 1;

  // The ID of the vector store that the file belongs to.
  string vector_store_id = 2;
}

message DeleteVectorStoreRequest {
  // The ID of the vector store to delete.
  string vector_store_id = 1;
}

message DownloadFileRequest {
  // The ID of the file to use for this request.
  string file_id = 1;
}

message GetAssistantRequest {
  // The ID of the assistant to retrieve.
  string assistant_id = 1;
}

message GetMessageRequest {
  // The ID of the message to retrieve.
  string message_id = 1;

  // The ID of the [thread](/docs/api-reference/threads) to which this message belongs.
  string thread_id = 2;
}

message GetRunRequest {
  // The ID of the run to retrieve.
  string run_id = 1;

  // The ID of the [thread](/docs/api-reference/threads) that was run.
  string thread_id = 2;
}

message GetRunStepRequest {
  // The ID of the run to which the run step belongs.
  string run_id = 1;

  // The ID of the run step to retrieve.
  string step_id = 2;

  // The ID of the thread to which the run and run step belongs.
  string thread_id = 3;
}

message GetThreadRequest {
  // The ID of the thread to retrieve.
  string thread_id = 1;
}

message GetVectorStoreFileBatchRequest {
  // The ID of the file batch being retrieved.
  string batch_id = 1;

  // The ID of the vector store that the file batch belongs to.
  string vector_store_id = 2;
}

message GetVectorStoreFileRequest {
  // The ID of the file being retrieved.
  string file_id = 1;

  // The ID of the vector store that the file belongs to.
  string vector_store_id = 2;
}

message GetVectorStoreRequest {
  // The ID of the vector store to retrieve.
  string vector_store_id = 1;
}

message ListAssistantsRequest {
  enum ListAssistantsRequestOrder {
    LIST_ASSISTANTS_REQUEST_ORDER_ASC = 0;
    LIST_ASSISTANTS_REQUEST_ORDER_DESC = 1;
  }

  // A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list.
  string after = 1;

  // A cursor for use in pagination. `before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before=obj_foo in order to fetch the previous page of the list.
  string before = 2;

  // A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.
  int32 limit = 3;

  // Sort order by the `created_at` timestamp of the objects. `asc` for ascending order and `desc` for descending order.
  ListAssistantsRequestOrder order = 4;
}

message ListBatchesRequest {
  // A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list.
  string after = 1;

  // A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.
  int32 limit = 2;
}

message ListFilesInVectorStoreBatchRequest {
  enum ListFilesInVectorStoreBatchRequestFilter {
    LIST_FILES_IN_VECTOR_STORE_BATCH_REQUEST_FILTER_IN_PROGRESS = 0;
    LIST_FILES_IN_VECTOR_STORE_BATCH_REQUEST_FILTER_COMPLETED = 1;
    LIST_FILES_IN_VECTOR_STORE_BATCH_REQUEST_FILTER_FAILED = 2;
    LIST_FILES_IN_VECTOR_STORE_BATCH_REQUEST_FILTER_CANCELLED = 3;
  }

  enum ListFilesInVectorStoreBatchRequestOrder {
    LIST_FILES_IN_VECTOR_STORE_BATCH_REQUEST_ORDER_ASC = 0;
    LIST_FILES_IN_VECTOR_STORE_BATCH_REQUEST_ORDER_DESC = 1;
  }

  // A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list.
  string after = 1;

  // The ID of the file batch that the files belong to.
  string batch_id = 2;

  // A cursor for use in pagination. `before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before=obj_foo in order to fetch the previous page of the list.
  string before = 3;

  // Filter by file status. One of `in_progress`, `completed`, `failed`, `cancelled`.
  ListFilesInVectorStoreBatchRequestFilter filter = 4;

  // A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.
  int32 limit = 5;

  // Sort order by the `created_at` timestamp of the objects. `asc` for ascending order and `desc` for descending order.
  ListFilesInVectorStoreBatchRequestOrder order = 6;

  // The ID of the vector store that the files belong to.
  string vector_store_id = 7;
}

message ListFilesRequest {
  // Only return files with the given purpose.
  string purpose = 1;
}

message ListFineTuningEventsRequest {
  // Identifier for the last event from the previous pagination request.
  string after = 1;

  // The ID of the fine-tuning job to get events for.
  string fine_tuning_job_id = 2;

  // Number of events to retrieve.
  int32 limit = 3;
}

//message ListFineTuningJobCheckpointsRequest {
//  // Identifier for the last checkpoint ID from the previous pagination request.
//  string after = 1;
//
//  // The ID of the fine-tuning job to get checkpoints for.
//  string fine_tuning_job_id = 2;
//
//  // Number of checkpoints to retrieve.
//  int32 limit = 3;
//}

message ListMessagesRequest {
  enum ListMessagesRequestOrder {
    LIST_MESSAGES_REQUEST_ORDER_ASC = 0;
    LIST_MESSAGES_REQUEST_ORDER_DESC = 1;
  }

  // A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list.
  string after = 1;

  // A cursor for use in pagination. `before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before=obj_foo in order to fetch the previous page of the list.
  string before = 2;

  // A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.
  int32 limit = 3;

  // Sort order by the `created_at` timestamp of the objects. `asc` for ascending order and `desc` for descending order.
  ListMessagesRequestOrder order = 4;

  // Filter messages by the run ID that generated them.
  string run_id = 5;

  // The ID of the [thread](/docs/api-reference/threads) the messages belong to.
  string thread_id = 6;
}
//
//message ListPaginatedFineTuningJobsRequest {
//  // Identifier for the last job from the previous pagination request.
//  string after = 1;
//
//  // Number of fine-tuning jobs to retrieve.
//  int32 limit = 2;
//}

message ListRunStepsRequest {
  enum ListRunStepsRequestOrder {
    LIST_RUN_STEPS_REQUEST_ORDER_ASC = 0;
    LIST_RUN_STEPS_REQUEST_ORDER_DESC = 1;
  }

  // A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list.
  string after = 1;

  // A cursor for use in pagination. `before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before=obj_foo in order to fetch the previous page of the list.
  string before = 2;

  // A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.
  int32 limit = 3;

  // Sort order by the `created_at` timestamp of the objects. `asc` for ascending order and `desc` for descending order.
  ListRunStepsRequestOrder order = 4;

  // The ID of the run the run steps belong to.
  string run_id = 5;

  // The ID of the thread the run and run steps belong to.
  string thread_id = 6;
}

message ListRunsRequest {
  enum ListRunsRequestOrder {
    LIST_RUNS_REQUEST_ORDER_ASC = 0;
    LIST_RUNS_REQUEST_ORDER_DESC = 1;
  }

  // A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list.
  string after = 1;

  // A cursor for use in pagination. `before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before=obj_foo in order to fetch the previous page of the list.
  string before = 2;

  // A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.
  int32 limit = 3;

  // Sort order by the `created_at` timestamp of the objects. `asc` for ascending order and `desc` for descending order.
  ListRunsRequestOrder order = 4;

  // The ID of the thread the run belongs to.
  string thread_id = 5;
}

message ListVectorStoreFilesRequest {
  enum ListVectorStoreFilesRequestFilter {
    LIST_VECTOR_STORE_FILES_REQUEST_FILTER_IN_PROGRESS = 0;
    LIST_VECTOR_STORE_FILES_REQUEST_FILTER_COMPLETED = 1;
    LIST_VECTOR_STORE_FILES_REQUEST_FILTER_FAILED = 2;
    LIST_VECTOR_STORE_FILES_REQUEST_FILTER_CANCELLED = 3;
  }

  enum ListVectorStoreFilesRequestOrder {
    LIST_VECTOR_STORE_FILES_REQUEST_ORDER_ASC = 0;
    LIST_VECTOR_STORE_FILES_REQUEST_ORDER_DESC = 1;
  }

  // A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list.
  string after = 1;

  // A cursor for use in pagination. `before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before=obj_foo in order to fetch the previous page of the list.
  string before = 2;

  // Filter by file status. One of `in_progress`, `completed`, `failed`, `cancelled`.
  ListVectorStoreFilesRequestFilter filter = 3;

  // A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.
  int32 limit = 4;

  // Sort order by the `created_at` timestamp of the objects. `asc` for ascending order and `desc` for descending order.
  ListVectorStoreFilesRequestOrder order = 5;

  // The ID of the vector store that the files belong to.
  string vector_store_id = 6;
}

message ListVectorStoresRequest {
  enum ListVectorStoresRequestOrder {
    LIST_VECTOR_STORES_REQUEST_ORDER_ASC = 0;
    LIST_VECTOR_STORES_REQUEST_ORDER_DESC = 1;
  }

  // A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list.
  string after = 1;

  // A cursor for use in pagination. `before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before=obj_foo in order to fetch the previous page of the list.
  string before = 2;

  // A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.
  int32 limit = 3;

  // Sort order by the `created_at` timestamp of the objects. `asc` for ascending order and `desc` for descending order.
  ListVectorStoresRequestOrder order = 4;
}

message ModifyAssistantRequest {
  // The ID of the assistant to modify.
  string assistant_id = 1;
}

message ModifyMessageRequest {
  // The ID of the message to modify.
  string message_id = 1;

  // The ID of the thread to which this message belongs.
  string thread_id = 2;
}

message ModifyRunRequest {
  // The ID of the run to modify.
  string run_id = 1;

  // The ID of the [thread](/docs/api-reference/threads) that was run.
  string thread_id = 2;
}

message ModifyThreadRequest {
  // The ID of the thread to modify. Only the `metadata` can be modified.
  string thread_id = 1;
}

message ModifyVectorStoreRequest {
  // The ID of the vector store to modify.
  string vector_store_id = 1;
}

message RetrieveBatchRequest {
  // The ID of the batch to retrieve.
  string batch_id = 1;
}

message RetrieveFileRequest {
  // The ID of the file to use for this request.
  string file_id = 1;
}

message RetrieveFineTuningJobRequest {
  // The ID of the fine-tuning job.
  string fine_tuning_job_id = 1;
}

message RetrieveModelRequest {
  // The ID of the model to use for this request
  string model = 1;
}

message SubmitToolOuputsToRunRequest {
  // The ID of the run that requires the tool output submission.
  string run_id = 1;

  // The ID of the [thread](/docs/api-reference/threads) to which this run belongs.
  string thread_id = 2;
}

//service OpenAIAPIService {
//  // Cancels an in-progress batch.
//  rpc CancelBatch(CancelBatchRequest) returns (google.protobuf.Empty) {
//    option (google.api.http) = {
//      post: "/batches/{batch_id}/cancel"
//    };
//  }
//
//  // Immediately cancel a fine-tune job.
//  rpc CancelFineTuningJob(CancelFineTuningJobRequest) returns (google.protobuf.Empty) {
//    option (google.api.http) = {
//      post: "/fine_tuning/jobs/{fine_tuning_job_id}/cancel"
//    };
//  }
//
//  // Cancels a run that is `in_progress`.
//  rpc CancelRun(CancelRunRequest) returns (google.protobuf.Empty) {
//    option (google.api.http) = {
//      post: "/threads/{thread_id}/runs/{run_id}/cancel"
//    };
//  }
//
//  // Cancel a vector store file batch. This attempts to cancel the processing of files in this batch as soon as possible.
//  rpc CancelVectorStoreFileBatch(CancelVectorStoreFileBatchRequest) returns (google.protobuf.Empty) {
//    option (google.api.http) = {
//      post: "/vector_stores/{vector_store_id}/file_batches/{batch_id}/cancel"
//    };
//  }
//
//  // Create an assistant with a model and instructions.
//  rpc CreateAssistant(google.protobuf.Empty) returns (google.protobuf.Empty) {
//    option (google.api.http) = {
//      post: "/assistants"
//    };
//  }
//
//  // Creates and executes a batch from an uploaded file of requests
//  rpc CreateBatch(google.protobuf.Empty) returns (google.protobuf.Empty) {
//    option (google.api.http) = {
//      post: "/batches"
//    };
//  }
//
//  // Creates a model response for the given chat conversation.
//  rpc CreateChatCompletion(google.protobuf.Empty) returns (google.protobuf.Empty) {
//    option (google.api.http) = {
//      post: "/chat/completions"
//    };
//  }
//
//  // Creates a completion for the provided prompt and parameters.
//  rpc CreateCompletion(google.protobuf.Empty) returns (google.protobuf.Empty) {
//    option (google.api.http) = {
//      post: "/completions"
//    };
//  }
//
//  // Creates an embedding vector representing the input text.
//  rpc CreateEmbedding(google.protobuf.Empty) returns (google.protobuf.Empty) {
//    option (google.api.http) = {
//      post: "/embeddings"
//    };
//  }
//
//  // Upload a file that can be used across various endpoints. The size of all the files uploaded by one organization can be up to 100 GB.
//  //
//  // The size of individual files can be a maximum of 512 MB or 2 million tokens for Assistants. See the [Assistants Tools guide](/docs/assistants/tools) to learn more about the types of files supported. The Fine-tuning API only supports `.jsonl` files.
//  //
//  // Please [contact us](https://help.openai.com/) if you need to increase these storage limits.
//  rpc CreateFile(google.protobuf.Empty) returns (google.protobuf.Empty) {
//    option (google.api.http) = {
//      post: "/files"
//    };
//  }
//
//  // Creates a fine-tuning job which begins the process of creating a new model from a given dataset.
//  //
//  // Response includes details of the enqueued job including job status and the name of the fine-tuned models once complete.
//  //
//  // [Learn more about fine-tuning](/docs/guides/fine-tuning)
//  rpc CreateFineTuningJob(google.protobuf.Empty) returns (google.protobuf.Empty) {
//    option (google.api.http) = {
//      post: "/fine_tuning/jobs"
//    };
//  }
//
//  // Creates an image given a prompt.
//  rpc CreateImage(google.protobuf.Empty) returns (google.protobuf.Empty) {
//    option (google.api.http) = {
//      post: "/images/generations"
//    };
//  }
//
//  // Creates an edited or extended image given an original image and a prompt.
//  rpc CreateImageEdit(google.protobuf.Empty) returns (google.protobuf.Empty) {
//    option (google.api.http) = {
//      post: "/images/edits"
//    };
//  }
//
//  // Creates a variation of a given image.
//  rpc CreateImageVariation(google.protobuf.Empty) returns (google.protobuf.Empty) {
//    option (google.api.http) = {
//      post: "/images/variations"
//    };
//  }
//
//  // Create a message.
//  rpc CreateMessage(CreateMessageRequest) returns (google.protobuf.Empty) {
//    option (google.api.http) = {
//      post: "/threads/{thread_id}/messages"
//    };
//  }
//
//  // Classifies if text is potentially harmful.
//  rpc CreateModeration(google.protobuf.Empty) returns (google.protobuf.Empty) {
//    option (google.api.http) = {
//      post: "/moderations"
//    };
//  }
//
//  // Create a run.
//  rpc CreateRun(CreateRunRequest) returns (google.protobuf.Empty) {
//    option (google.api.http) = {
//      post: "/threads/{thread_id}/runs"
//    };
//  }
//
//  // Generates audio from the input text.
//  rpc CreateSpeech(google.protobuf.Empty) returns (google.protobuf.Empty) {
//    option (google.api.http) = {
//      post: "/audio/speech"
//    };
//  }
//
//  // Create a thread.
//  rpc CreateThread(google.protobuf.Empty) returns (google.protobuf.Empty) {
//    option (google.api.http) = {
//      post: "/threads"
//    };
//  }
//
//  // Create a thread and run it in one request.
//  rpc CreateThreadAndRun(google.protobuf.Empty) returns (google.protobuf.Empty) {
//    option (google.api.http) = {
//      post: "/threads/runs"
//    };
//  }
//
//  // Transcribes audio into the input language.
//  rpc CreateTranscription(google.protobuf.Empty) returns (google.protobuf.Empty) {
//    option (google.api.http) = {
//      post: "/audio/transcriptions"
//    };
//  }
//
//  // Translates audio into English.
//  rpc CreateTranslation(google.protobuf.Empty) returns (google.protobuf.Empty) {
//    option (google.api.http) = {
//      post: "/audio/translations"
//    };
//  }
//
//  // Create a vector store.
//  rpc CreateVectorStore(google.protobuf.Empty) returns (google.protobuf.Empty) {
//    option (google.api.http) = {
//      post: "/vector_stores"
//    };
//  }
//
//  // Create a vector store file by attaching a [File](/docs/api-reference/files) to a [vector store](/docs/api-reference/vector-stores/object).
//  rpc CreateVectorStoreFile(CreateVectorStoreFileRequest) returns (google.protobuf.Empty) {
//    option (google.api.http) = {
//      post: "/vector_stores/{vector_store_id}/files"
//    };
//  }
//
//  // Create a vector store file batch.
//  rpc CreateVectorStoreFileBatch(CreateVectorStoreFileBatchRequest) returns (google.protobuf.Empty) {
//    option (google.api.http) = {
//      post: "/vector_stores/{vector_store_id}/file_batches"
//    };
//  }
//
//  // Delete an assistant.
//  rpc DeleteAssistant(DeleteAssistantRequest) returns (google.protobuf.Empty) {
//    option (google.api.http) = {
//      delete: "/assistants/{assistant_id}"
//    };
//  }
//
//  // Delete a file.
//  rpc DeleteFile(DeleteFileRequest) returns (google.protobuf.Empty) {
//    option (google.api.http) = {
//      delete: "/files/{file_id}"
//    };
//  }
//
//  // Delete a fine-tuned model. You must have the Owner role in your organization to delete a model.
//  rpc DeleteModel(DeleteModelRequest) returns (google.protobuf.Empty) {
//    option (google.api.http) = {
//      delete: "/models/{model}"
//    };
//  }
//
//  // Delete a thread.
//  rpc DeleteThread(DeleteThreadRequest) returns (google.protobuf.Empty) {
//    option (google.api.http) = {
//      delete: "/threads/{thread_id}"
//    };
//  }
//
//  // Delete a vector store.
//  rpc DeleteVectorStore(DeleteVectorStoreRequest) returns (google.protobuf.Empty) {
//    option (google.api.http) = {
//      delete: "/vector_stores/{vector_store_id}"
//    };
//  }
//
//  // Delete a vector store file. This will remove the file from the vector store but the file itself will not be deleted. To delete the file, use the [delete file](/docs/api-reference/files/delete) endpoint.
//  rpc DeleteVectorStoreFile(DeleteVectorStoreFileRequest) returns (google.protobuf.Empty) {
//    option (google.api.http) = {
//      delete: "/vector_stores/{vector_store_id}/files/{file_id}"
//    };
//  }
//
//  // Returns the contents of the specified file.
//  rpc DownloadFile(DownloadFileRequest) returns (google.protobuf.Empty) {
//    option (google.api.http) = {
//      get: "/files/{file_id}/content"
//    };
//  }
//
//  // Retrieves an assistant.
//  rpc GetAssistant(GetAssistantRequest) returns (google.protobuf.Empty) {
//    option (google.api.http) = {
//      get: "/assistants/{assistant_id}"
//    };
//  }
//
//  // Retrieve a message.
//  rpc GetMessage(GetMessageRequest) returns (google.protobuf.Empty) {
//    option (google.api.http) = {
//      get: "/threads/{thread_id}/messages/{message_id}"
//    };
//  }
//
//  // Retrieves a run.
//  rpc GetRun(GetRunRequest) returns (google.protobuf.Empty) {
//    option (google.api.http) = {
//      get: "/threads/{thread_id}/runs/{run_id}"
//    };
//  }
//
//  // Retrieves a run step.
//  rpc GetRunStep(GetRunStepRequest) returns (google.protobuf.Empty) {
//    option (google.api.http) = {
//      get: "/threads/{thread_id}/runs/{run_id}/steps/{step_id}"
//    };
//  }
//
//  // Retrieves a thread.
//  rpc GetThread(GetThreadRequest) returns (google.protobuf.Empty) {
//    option (google.api.http) = {
//      get: "/threads/{thread_id}"
//    };
//  }
//
//  // Retrieves a vector store.
//  rpc GetVectorStore(GetVectorStoreRequest) returns (google.protobuf.Empty) {
//    option (google.api.http) = {
//      get: "/vector_stores/{vector_store_id}"
//    };
//  }
//
//  // Retrieves a vector store file.
//  rpc GetVectorStoreFile(GetVectorStoreFileRequest) returns (google.protobuf.Empty) {
//    option (google.api.http) = {
//      get: "/vector_stores/{vector_store_id}/files/{file_id}"
//    };
//  }
//
//  // Retrieves a vector store file batch.
//  rpc GetVectorStoreFileBatch(GetVectorStoreFileBatchRequest) returns (google.protobuf.Empty) {
//    option (google.api.http) = {
//      get: "/vector_stores/{vector_store_id}/file_batches/{batch_id}"
//    };
//  }
//
//  // Returns a list of assistants.
//  rpc ListAssistants(ListAssistantsRequest) returns (google.protobuf.Empty) {
//    option (google.api.http) = {
//      get: "/assistants"
//    };
//  }
//
//  // List your organization's batches.
//  rpc ListBatches(ListBatchesRequest) returns (google.protobuf.Empty) {
//    option (google.api.http) = {
//      get: "/batches"
//    };
//  }
//
//  // Returns a list of files that belong to the user's organization.
//  rpc ListFiles(ListFilesRequest) returns (google.protobuf.Empty) {
//    option (google.api.http) = {
//      get: "/files"
//    };
//  }
//
//  // Returns a list of vector store files in a batch.
//  rpc ListFilesInVectorStoreBatch(ListFilesInVectorStoreBatchRequest) returns (google.protobuf.Empty) {
//    option (google.api.http) = {
//      get: "/vector_stores/{vector_store_id}/file_batches/{batch_id}/files"
//    };
//  }
//
//  // Get status updates for a fine-tuning job.
//  rpc ListFineTuningEvents(ListFineTuningEventsRequest) returns (google.protobuf.Empty) {
//    option (google.api.http) = {
//      get: "/fine_tuning/jobs/{fine_tuning_job_id}/events"
//    };
//  }
//
//  // List checkpoints for a fine-tuning job.
//  rpc ListFineTuningJobCheckpoints(ListFineTuningJobCheckpointsRequest) returns (google.protobuf.Empty) {
//    option (google.api.http) = {
//      get: "/fine_tuning/jobs/{fine_tuning_job_id}/checkpoints"
//    };
//  }
//
//  // Returns a list of messages for a given thread.
//  rpc ListMessages(ListMessagesRequest) returns (google.protobuf.Empty) {
//    option (google.api.http) = {
//      get: "/threads/{thread_id}/messages"
//    };
//  }
//
//  // Lists the currently available models, and provides basic information about each one such as the owner and availability.
//  rpc ListModels(google.protobuf.Empty) returns (google.protobuf.Empty) {
//    option (google.api.http) = {
//      get: "/models"
//    };
//  }
//
//  // List your organization's fine-tuning jobs
//  rpc ListPaginatedFineTuningJobs(ListPaginatedFineTuningJobsRequest) returns (google.protobuf.Empty) {
//    option (google.api.http) = {
//      get: "/fine_tuning/jobs"
//    };
//  }
//
//  // Returns a list of run steps belonging to a run.
//  rpc ListRunSteps(ListRunStepsRequest) returns (google.protobuf.Empty) {
//    option (google.api.http) = {
//      get: "/threads/{thread_id}/runs/{run_id}/steps"
//    };
//  }
//
//  // Returns a list of runs belonging to a thread.
//  rpc ListRuns(ListRunsRequest) returns (google.protobuf.Empty) {
//    option (google.api.http) = {
//      get: "/threads/{thread_id}/runs"
//    };
//  }
//
//  // Returns a list of vector store files.
//  rpc ListVectorStoreFiles(ListVectorStoreFilesRequest) returns (google.protobuf.Empty) {
//    option (google.api.http) = {
//      get: "/vector_stores/{vector_store_id}/files"
//    };
//  }
//
//  // Returns a list of vector stores.
//  rpc ListVectorStores(ListVectorStoresRequest) returns (google.protobuf.Empty) {
//    option (google.api.http) = {
//      get: "/vector_stores"
//    };
//  }
//
//  // Modifies an assistant.
//  rpc ModifyAssistant(ModifyAssistantRequest) returns (google.protobuf.Empty) {
//    option (google.api.http) = {
//      post: "/assistants/{assistant_id}"
//    };
//  }
//
//  // Modifies a message.
//  rpc ModifyMessage(ModifyMessageRequest) returns (google.protobuf.Empty) {
//    option (google.api.http) = {
//      post: "/threads/{thread_id}/messages/{message_id}"
//    };
//  }
//
//  // Modifies a run.
//  rpc ModifyRun(ModifyRunRequest) returns (google.protobuf.Empty) {
//    option (google.api.http) = {
//      post: "/threads/{thread_id}/runs/{run_id}"
//    };
//  }
//
//  // Modifies a thread.
//  rpc ModifyThread(ModifyThreadRequest) returns (google.protobuf.Empty) {
//    option (google.api.http) = {
//      post: "/threads/{thread_id}"
//    };
//  }
//
//  // Modifies a vector store.
//  rpc ModifyVectorStore(ModifyVectorStoreRequest) returns (google.protobuf.Empty) {
//    option (google.api.http) = {
//      post: "/vector_stores/{vector_store_id}"
//    };
//  }
//
//  // Retrieves a batch.
//  rpc RetrieveBatch(RetrieveBatchRequest) returns (google.protobuf.Empty) {
//    option (google.api.http) = {
//      get: "/batches/{batch_id}"
//    };
//  }
//
//  // Returns information about a specific file.
//  rpc RetrieveFile(RetrieveFileRequest) returns (google.protobuf.Empty) {
//    option (google.api.http) = {
//      get: "/files/{file_id}"
//    };
//  }
//
//  // Get info about a fine-tuning job.
//  //
//  // [Learn more about fine-tuning](/docs/guides/fine-tuning)
//  rpc RetrieveFineTuningJob(RetrieveFineTuningJobRequest) returns (google.protobuf.Empty) {
//    option (google.api.http) = {
//      get: "/fine_tuning/jobs/{fine_tuning_job_id}"
//    };
//  }
//
//  // Retrieves a model instance, providing basic information about the model such as the owner and permissioning.
//  rpc RetrieveModel(RetrieveModelRequest) returns (google.protobuf.Empty) {
//    option (google.api.http) = {
//      get: "/models/{model}"
//    };
//  }
//
//  // When a run has the `status: "requires_action"` and `required_action.type` is `submit_tool_outputs`, this endpoint can be used to submit the outputs from the tool calls once they're all completed. All outputs must be submitted in a single request.
//  rpc SubmitToolOuputsToRun(SubmitToolOuputsToRunRequest) returns (google.protobuf.Empty) {
//    option (google.api.http) = {
//      post: "/threads/{thread_id}/runs/{run_id}/submit_tool_outputs"
//    };
//  }
//}
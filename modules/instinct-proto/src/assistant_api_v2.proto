syntax = "proto3";
//import "google/protobuf/empty.proto";
//import "google/protobuf/api.proto";
import "google/protobuf/struct.proto";


package instinct.assistant.v2;

enum ResponseFormat {
  auto = 0;
  none = 1;
}

// ==============================================================
// AssistantService
// ==============================================================
message AssistantObject { // CreateAssistantRequest, GetAssistantResponse, ModifyAssistantResponse
  string model = 1;
  string name = 2;
  string description = 3;
  string instructions = 4;
  google.protobuf.Struct metadata = 5;
  optional float temperature = 6;
  optional float top_p = 7;
  ResponseFormat response_format = 8;
  string id = 9;
  repeated AssistantToolObject tools = 10;
  AssistantToolResources tool_resources = 11;
  int64 created_at = 12;
  int64 modified_at = 13;
}

enum AssistantToolType {
  UnknownAssistantToolType = 0;
  CodeInterpreter = 1;
  FieSearch = 2;
  Function = 3;
}

message AssistantToolObject { // union of Code, FileSearch, Function
  AssistantToolType type = 1;
}


message AssistantToolResources {
  AssistantCodeToolResource code_interpreter = 1;
  AssistantFileSearchToolResource file_search = 2;

  message AssistantCodeToolResource {
    // maxItems = 20
    repeated string file_ids = 1;
  }

  message AssistantFileSearchToolResource {
    // maxItem = 1
    repeated string vector_store_ids = 1;
  }

}

message ListAssistantsRequest {
  // A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list.
  string after = 1;

  // A cursor for use in pagination. `before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before=obj_foo in order to fetch the previous page of the list.
  string before = 2;

  // A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.
  int32 limit = 3;

  // Sort order by the `created_at` timestamp of the objects. `asc` for ascending order and `desc` for descending order.
  ListRequestOrder order = 4;
}

message ListAssistantsResponse {
  string object = 1;
  repeated AssistantObject data = 2;
  string first_id = 3;
  string last_id = 4;
  bool has_more = 5;
}

message GetAssistantRequest {
  // The ID of the assistant to retrieve.
  string assistant_id = 1;
}

message DeleteAssistantRequest {
  // The ID of the assistant to delete.
  string assistant_id = 1;
}

message DeleteAssistantResponse {
  string id = 1;
  bool deleted = 2;
  string object = 3;
}

message ModifyAssistantRequest {
  string model = 1;
  string name = 2;
  string description = 3;
  string instructions = 4;
  google.protobuf.Struct metadata = 5;
  float temperature = 6;
  float top_p = 7;
  ResponseFormat response_format = 8;
  repeated AssistantToolObject tools = 10;
  AssistantToolResources tool_resources = 11;
  string assistant_id = 12;
}

// ==============================================================
// ThreadService - Thread
// ==============================================================
message ThreadObject { // CreateThreadRequest, GetThreadResponse, ModifyThreadResponse
  string id = 1;
  string object = 2;
  int64 created_at = 3;
  int64 modified_at = 4;
  repeated MessageObject messages = 5;
  AssistantToolResources tool_resources = 6;
  google.protobuf.Struct metadata = 7;
}

message GetThreadRequest {
  // The ID of the thread to retrieve.
  string thread_id = 1;
}

message ModifyThreadRequest {
  // The ID of the thread to modify. Only the `metadata` can be modified.
  string thread_id = 1;
  AssistantToolResources tool_resources = 2;
  google.protobuf.Struct metadata = 3;
}

message DeleteThreadRequest {
  // The ID of the thread to delete.
  string thread_id = 1;
}

message DeleteThreadResponse {
  string id = 1;
  bool deleted = 2;
  string object = 3;
}

enum ListRequestOrder {
  desc = 0; // default
  asc = 1;
}

// ==============================================================
// ThreadService - Message
// ==============================================================
message ListMessagesRequest {

  // A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list.
  string after = 1;

  // A cursor for use in pagination. `before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before=obj_foo in order to fetch the previous page of the list.
  string before = 2;

  // A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.
  int32 limit = 3;

  // Sort order by the `created_at` timestamp of the objects. `asc` for ascending order and `desc` for descending order.
  ListRequestOrder order = 4;

  // Filter messages by the run ID that generated them.
  string run_id = 5;

  // The ID of the [thread](/docs/api-reference/threads) the messages belong to.
  string thread_id = 6;
}

enum MessageRole {
  unknown_message_role = 0;
  user = 1;
  assistant = 2;
}


message MessageObject {// CreateMessageResponse, RetrieveMessageResponse, ModifyMessageResponse
  string id = 1;
  string object = 2;
  int64 created_at = 3;
  string thread_id = 4;

  MessageStatus status = 5;
  enum MessageStatus {
    unknown_message_status = 0;
    in_progress = 1;
    incomplete = 2;
    completed = 3;
  }

  IncompleteDetails incomplete_details =  6;
  int64 completed_at = 7;
  int64 incompleted_at = 8;
  MessageRole role = 9;
  MessageContent content = 10;

  enum MessageContentType {
    unknown_message_content_type = 0;
    text = 1;
    image_file = 2;
  }
  message MessageContent {
    MessageContentType type = 1;

    // for image file only
    repeated MessageContentImageFile image_file = 2;
    message MessageContentImageFile {
      string file_id = 1;
    }

    // for text only
    MessageContentText text = 3;
    message MessageContentText {
      string value = 1;

      repeated MessageContentTextAnnotation annotations = 2;
      message MessageContentTextAnnotation { // union of citation and file path

        MessageContentTextAnnotationType type = 1;
        enum MessageContentTextAnnotationType {
          unknown_content_text_annotation_type = 0;
          file_citation = 1;
        }

        string text = 2;
        int32 start_index = 3;
        int32 end_index = 4;

        // for citation only
        message MessageContentTextFileCitation {
          string file_id = 1;
          string quote = 2;
        }
        MessageContentTextFileCitation citation = 5;

        // for file path only
        message MessageContentTextFilePath {
          string file_id = 1;
        }
        MessageContentTextFilePath file_path = 6;
      }
    }

  }
  string assistant_id = 11;
  string run_id = 12;

  repeated MessageAttachment attachments = 13;
  google.protobuf.Struct metadata = 14;
  int64 modified_at = 15;
}

message IncompleteDetails {
  IncompleteReason reason = 1;
  enum IncompleteReason {
    unknown_incomplete_reason = 0;
    content_filter = 1;
    max_tokens = 2;
    run_cancelled = 3;
    run_expired = 4;
    run_failed = 5;
  }
}


message MessageAttachment {
  string file_id = 1;
  repeated AssistantToolType tools = 2;
}

message ListMessageRequest {
  string thread_id = 1;
  int32 limit = 2;
  ListRequestOrder order = 3;
  string after = 4;
  string before = 5;
  string run_id = 6;
}

message ListMessageResponse {
  string object = 1;
  repeated MessageObject data = 2;
  string first_id = 3;
  string last_id = 4;
  bool has_more = 5;
}

message CreateMessageRequest {
  // The ID of the [thread](/docs/api-reference/threads) to create a message for.
  string thread_id = 1;

  MessageRole role = 2;

  string content = 3;

  repeated MessageAttachment attachments = 4;

  google.protobuf.Struct metadata = 5;

}


message GetMessageRequest {
  // The ID of the message to retrieve.
  string message_id = 1;

  // The ID of the [thread](/docs/api-reference/threads) to which this message belongs.
  string thread_id = 2;
}


message ModifyMessageRequest {
  // The ID of the message to modify.
  string message_id = 1;

  // The ID of the thread to which this message belongs.
  string thread_id = 2;

  google.protobuf.Struct metadata = 3;
}


// ==============================================================
// ThreadService - Run
// ==============================================================
message CreateThreadAndRunRequest {
  string assistant_id = 1;
  ThreadObject thread = 2;
  string model = 3;
  string instructions = 4;
  repeated AssistantToolObject tools = 5;
  AssistantToolResources tool_resources = 6;
  google.protobuf.Struct metadata = 7;
  float temperature = 8;
  float top_p = 9;
  bool stream = 10;
  // >= 256
  uint32 max_prompt_tokens = 11;
  // >= 256
  uint32 max_completion_tokens = 12;

  // The truncation strategy to use for the thread. The default is auto. If set to last_messages, the thread will be truncated to the n most recent messages in the thread. When set to auto, messages in the middle of the thread will be dropped to fit the context length of the model, max_prompt_tokens.
  TruncationStrategy truncation_strategy = 13;

  enum TruncationStrategy {
    unknown_truncation_strategy = 0;
    auto = 1;
    last_messages = 2;
  }

  // Controls which (if any) tool is called by the model. none means the model will not call any tools and instead generates a message. auto is the default value and means the model can pick between generating a message or calling a tool. Specifying a particular tool like {"type": "file_search"} or {"type": "function", "function": {"name": "my_function"}} forces the model to call that tool.
  ToolChoice tool_choice = 14; // due to language characteristics, we cannot make `tool_choice` as arbitrary type of `string` and `object`. So we choose to define `ToolChoice` as object type.
  message ToolChoice {
    AssistantToolType type = 1;
    ToolChoiceFunction function = 2;
    message ToolChoiceFunction {
      string name = 1;
    }
  }

  ResponseFormat response_format = 15;
}


message RunObject { // CreateThreadAndRunResponse, CreateRunResponse, RetrieveRunObject, ModifyRunResponse, SubmitToolOutputsResponse, GetRunResponse
  string id = 1;
  string object = 2; // always `thread.run`
  int32 created_at = 3;
  string thread_id = 4;
  string assistant_id = 5;

  enum RunObjectStatus {
    unknown_run_object_status = 0;
    queued = 1;
    in_progress = 2;
    requires_action = 3;
    cancelling = 4;
    cancelled = 5;
    failed = 6;
    completed = 7;
    expired = 8;
  }
  RunObjectStatus status = 6;

  RequiredAction required_action = 7;
  message RequiredAction {
    RequiredActionType type = 1;
    enum RequiredActionType {
      unknown_required_action_type = 0;
      submit_tool_outputs = 1;
    }

    repeated RunToolCallObject tool_calls = 2;

    message RunToolCallObject {
      string id = 1;
      RunToolCallObjectType type = 2;
      message RunToolCallFunctionObject {
        string name = 1;
        string arguments = 2;
      }
      RunToolCallFunctionObject function = 3;
    }
    enum RunToolCallObjectType {
      unknown_run_tool_call_object_type = 0;
      function = 1;
    }
  }


  RunStepError last_error = 8;
  int64 expires_at = 9;
  int64 cancelled_at = 10;
  int64 failed_at = 11;
  int32 completed_at = 12;
  uint64 incomplete_at = 13;
  IncompleteDetails incomplete_details = 14;
  string model = 15;
  string instructions = 16;
  repeated AssistantToolObject tools = 17;
  google.protobuf.Struct metadata = 18;
  CompletionUsage usage = 19;
  float temperature = 20;
  float top_p = 21;
  int32 max_prompt_tokens = 22;
  int32 max_completion_tokens = 23;

  enum TruncationStrategy {
    auto = 0;
    last_messages = 1;
  }
  TruncationStrategy truncation_strategy = 24;

  ToolChoice tool_choice = 25;
  message ToolChoice {
    AssistantToolType type = 1;
    ToolChoiceFunction function = 2;
    message ToolChoiceFunction {
      string name = 1;
    }
  }

  ResponseFormat response_format = 26;
}

enum CommonErrorType {
  unknown_error_type = 0;
  server_error = 1;
  rate_limit_exceeded = 2;
  invalid_prompt = 3;
  invalid_request_error = 4;
}

message ListRunsRequest {
  // A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list.
  string after = 1;

  // A cursor for use in pagination. `before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before=obj_foo in order to fetch the previous page of the list.
  string before = 2;

  // A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.
  int32 limit = 3;

  // Sort order by the `created_at` timestamp of the objects. `asc` for ascending order and `desc` for descending order.
  ListRequestOrder order = 4;

  // The ID of the thread the run belongs to.
  string thread_id = 5;
}

message CompletionUsage {
  int32 completion_tokens = 1;
  int32 prompt_tokens = 2;
  int32 total_tokens = 3;
}

message ListRunsResponse {
  string object = 1; // always `list`
  repeated RunObject data = 2;
  string first_di = 3;
  string last_id = 4;
  bool has_more = 5;
}

message CreateRunRequest {
  string assistant_id = 1;
  string instructions = 2;
  string additional_instructions = 3;
  repeated MessageObject additional_messages = 4;
  repeated AssistantToolObject tools = 5;
  google.protobuf.Struct metadata = 6;
  float temperature = 7;
  float top_p = 8;
  bool stream = 9;
  uint32 max_prompt_tokens = 15;
  uint32 max_completion_tokens = 16;

  enum TruncationStrategy {
    unknown_truncation_strategy = 0;
    auto = 1;
    last_messages = 2;
  }
  TruncationStrategy truncation_strategy = 17;

  ToolChoice tool_choice = 18;
  message ToolChoice {
    AssistantToolType type = 1;
    ToolChoiceFunction function = 2;
    message ToolChoiceFunction {
      string name = 1;
    }
  }

  ResponseFormat response_format = 19;
}

message GetRunRequest {
  // The ID of the run to retrieve.
  string run_id = 1;

  // The ID of the [thread](/docs/api-reference/threads) that was run.
  string thread_id = 2;
}


message ModifyRunRequest {
  // The ID of the run to modify.
  string run_id = 1;

  // The ID of the [thread](/docs/api-reference/threads) that was run.
  string thread_id = 2;

  google.protobuf.Struct metadata = 3;
}

message SubmitToolOutputsToRunRequest { // When a run has the `status: "requires_action"` and `required_action.type` is `submit_tool_outputs`, this endpoint can be used to submit the outputs from the tool calls once they're all completed. All outputs must be submitted in a single request.

  // The ID of the run that requires the tool output submission.
  string run_id = 1;

  // The ID of the [thread](/docs/api-reference/threads) to which this run belongs.
  string thread_id = 2;

  repeated ToolOutput tool_outputs = 3;
  message ToolOutput {
    string tool_call_id = 1;
    string output = 2;
  }

  // If true, returns a stream of events that happen during the Run as server-sent events, terminating when the Run enters a terminal state with a data: [DONE] message.
  bool stream = 4;
}


message CancelRunRequest {
  // The ID of the run to cancel.
  string run_id = 1;

  // The ID of the thread to which this run belongs.
  string thread_id = 2;
}



// ==============================================================
// ThreadService - RunStep
// ==============================================================

message ListRunStepsRequest {
  // A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list.
  string after = 1;

  // A cursor for use in pagination. `before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before=obj_foo in order to fetch the previous page of the list.
  string before = 2;

  // A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.
  int32 limit = 3;

  // Sort order by the `created_at` timestamp of the objects. `asc` for ascending order and `desc` for descending order.
  ListRequestOrder order = 4;

  // The ID of the run the run steps belong to.
  string run_id = 5;

  // The ID of the thread the run and run steps belong to.
  string thread_id = 6;
}

message ListRunStepsResponse {
  string object = 1; // always `list`
  repeated RunStepObject data = 2;
  string first_id = 3;
  string last_id = 4;
  bool has_more = 5;
}


message GetRunStepRequest {
  // The ID of the run to which the run step belongs.
  string run_id = 1;

  // The ID of the run step to retrieve.
  string step_id = 2;

  // The ID of the thread to which the run and run step belongs.
  string thread_id = 3;
}


message RunStepObject { // GetRunStepResponse
  string id = 1;
  string object = 2;
  int32 created_at = 3;
  string assistant_id = 4;
  string thread_id = 5;
  string run_id = 6;

  RunStepType type = 7;
  enum RunStepType {
    unknown_run_step_type = 0;
    message_creation = 1;
    tool_calls = 2;
  }

  RunStepStatus status = 8;
  enum RunStepStatus {
    unknown_run_step_status = 0;
    in_progress = 1;
    cancelled = 2;
    failed = 3;
    completed = 4;
    expired = 5;
  }

  RunStepDetails step_details = 9;
  message RunStepDetails {// union of RunStepDetailsMessageCreationObject and RunStepDetailsToolCallObject
    RunStepType type = 1;

    // for message creation only
    MessageCreationDetails message_creation = 2;
    message MessageCreationDetails {
      string message_id = 1;
    }

    // for tool calls only
    repeated ToolCallDetail tool_calls = 3;
    message ToolCallDetail { // union of CodeInterpreterToolCall, FileSearchToolCall, FunctionToolCall
      string id = 1;
      AssistantToolType type = 2;

      message CodeInterpreter {
        string input = 1;

        enum CodeInterpreterOutputType {
          unknown_code_interpreter_output_type = 0;
          logs = 1;
          image = 2;
        }
        message CodeInterpreterOutput { // union of CodeOutputLogsObject and CodeOutputImageObject
          CodeInterpreterOutputType type = 1;
          // only for CodeOutputLogsObject
          string logs = 2;
          // only for CodeOutputImageObject
          CodeInterpreterImageOutput image = 3;
          message CodeInterpreterImageOutput {
            string file_id = 1;
          }
        }
        repeated CodeInterpreterOutput outputs = 2;
      }
    }
  }

  RunStepError last_error = 10;
  int64 expired_at = 11;
  int64 cancelled_at = 12;
  int64 failed_at = 13;
  int64 completed_at = 14;
  google.protobuf.Struct metadata = 15;
  CompletionUsage usage = 16;
}

message RunStepError {
  CommonErrorType type = 1;
  string message = 2;
}

// ==============================================================
// VectorStore
// ==============================================================
message ListVectorStoresRequest {
  // A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list.
  string after = 1;

  // A cursor for use in pagination. `before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before=obj_foo in order to fetch the previous page of the list.
  string before = 2;

  // A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.
  int32 limit = 3;

  // Sort order by the `created_at` timestamp of the objects. `asc` for ascending order and `desc` for descending order.
  ListRequestOrder order = 4;
}

message ListVectorStoresResponse {
  string object = 1;
  repeated VectorStoreObject data = 2;
  string first_id = 3;
  string last_id = 4;
  bool has_more = 5;
}

message CreateVectorStoreRequest {
  repeated string file_ids = 1;
  string name = 2;
  VectorStoreExpirationPolicy expires_after = 3;
  google.protobuf.Struct metadata = 4;
}

message VectorStoreExpirationPolicy {
  // Anchor timestamp after which the expiration policy applies. Supported anchors: last_active_at.
  VectorStoreExpirationAnchor anchor = 1;
  enum VectorStoreExpirationAnchor {
    unknown_vector_store_expiration_anchor = 0;
    last_active_at = 1;
  }

  // The number of days after the anchor time that the vector store will expire.
  uint32 days = 2;
}

message GetVectorStoreRequest {
  // The ID of the vector store to retrieve.
  string vector_store_id = 1;
}

message ModifyVectorStoreRequest {
  // The ID of the vector store to modify.
  string vector_store_id = 1;

  string name = 2;
  VectorStoreExpirationPolicy expires_after = 3;
  google.protobuf.Struct metadata = 4;
}

message DeleteVectorStoreRequest {
  // The ID of the vector store to delete.
  string vector_store_id = 1;
}

message DeleteVectorStoreResponse {
  string id = 1;
  bool deleted = 2;
  string object = 3;
}

message VectorStoreObject { // CreateVectorStoreResponse, GetVectorStoreResponse, ModifyVectorStoreResponse
  string id = 1;
  string object = 2; // always `vector_store`
  int32 created_at = 3;
  string name = 4;
  uint32 bytes = 5;

  FileCounts file_counts = 6;
  message FileCounts {
    int32 in_progress = 1;
    int32 completed = 2;
    int32 failed = 3;
    int32 cancelled = 4;
    int32 total = 5;
  }

  VectorStoreStatus status = 7;
  enum VectorStoreStatus {
    unknown_vector_Store_status = 0;
    expired = 1;
    in_progress = 2;
    completed = 3;
  }

  VectorStoreExpirationPolicy expires_after = 8;
  int64 expires_at = 9; // The Unix timestamp (in seconds) for when the vector store will expire.
  int64 last_active_at = 10; // The Unix timestamp (in seconds) for when the vector store was last active.
  google.protobuf.Struct metadata = 11;
}

// ==============================================================
// VectorStore - File
// ==============================================================
message ListVectorStoreFilesRequest {


  // A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list.
  string after = 1;

  // A cursor for use in pagination. `before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before=obj_foo in order to fetch the previous page of the list.
  string before = 2;

  // Filter by file status. One of `in_progress`, `completed`, `failed`, `cancelled`.
  VectorStoreFileStatus filter = 3;

  // A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.
  int32 limit = 4;

  // Sort order by the `created_at` timestamp of the objects. `asc` for ascending order and `desc` for descending order.
  ListRequestOrder order = 5;

  // The ID of the vector store that the files belong to.
  string vector_store_id = 6;
}

message ListVectorStoreFilesResponse {
  string object = 1;
  repeated VectorStoreFile data = 2;
  string first_id = 3;
  string last_id = 4;
  bool has_more = 5;
}

message CreateVectorFileRequest {
  string vector_store_id = 1;
  string file_id = 2;
}

message GetVectorStoreFileRequest {
  // The ID of the file being retrieved.
  string file_id = 1;

  // The ID of the vector store that the file belongs to.
  string vector_store_id = 2;
}

message DeleteVectorStoreFileRequest {
  // The ID of the file to delete.
  string file_id = 1;

  // The ID of the vector store that the file belongs to.
  string vector_store_id = 2;
}

message DeleteVectorStoreFileResponse {
  string id = 1;
  bool deleted = 2;
  string object = 3; // always `vector_store.file.deleted`
}

enum VectorStoreFileStatus {
  unknown_vector_store_file_status = 0;
  in_progress = 1;
  completed = 2;
  failed = 3;
  cancelled = 4;
}

message VectorStoreFile { // CreateVectorFileResponse
  string id = 1;
  string object = 2;
  int64 created_at = 3;
  int32 modified_at = 4;
  string vector_store_id = 5;
  VectorStoreFileStatus status = 6;
  VectorStoreFileError last_error = 7;
}

message CreateVectorStoreFileRequest {
  // The ID of the vector store for which to create a File.
  string vector_store_id = 1;
}

message VectorStoreFileError {
  CommonErrorType code = 1;
  string message = 2;
}

// ==============================================================
// VectorStore - FileBatch
// ==============================================================
message CreateVectorStoreFileBatchRequest {
  // The ID of the vector store for which to create a File Batch.
  string vector_store_id = 1;
  repeated string file_ids = 2;
}

message CancelVectorStoreFileBatchRequest {
  // The ID of the file batch to cancel.
  string batch_id = 1;

  // The ID of the vector store that the file batch belongs to.
  string vector_store_id = 2;
}


message GetVectorStoreFileBatchRequest {
  // The ID of the file batch being retrieved.
  string batch_id = 1;

  // The ID of the vector store that the file batch belongs to.
  string vector_store_id = 2;
}


message ListFilesInVectorStoreBatchRequest {
  // A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list.
  string after = 1;

  // The ID of the file batch that the files belong to.
  string batch_id = 2;

  // A cursor for use in pagination. `before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before=obj_foo in order to fetch the previous page of the list.
  string before = 3;

  // Filter by file status. One of `in_progress`, `completed`, `failed`, `cancelled`.
  VectorStoreFileStatus filter = 4;

  // A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.
  int32 limit = 5;

  // Sort order by the `created_at` timestamp of the objects. `asc` for ascending order and `desc` for descending order.
  ListRequestOrder order = 6;

  // The ID of the vector store that the files belong to.
  string vector_store_id = 7;
}

message VectorStoreFileBatch {// CreateVectorStoreFileBatchResponse, GetVectorStoreFileBatchResponse, CancelVectorStoreFileBatchResponse
  string id = 1;
  string object = 2;
  int64 created_at = 3;
  int64 modified = 4;
  string vector_store_id = 6;
  VectorStoreFileStatus status = 7;
  VectorStoreFileError last_error = 8;
}


// ==============================================================
// File
// ==============================================================
message ListFilesRequest {
  // Only return files with the given purpose.
  string purpose = 1;
}

message ListFilesResponse {
  string object = 1; // always `list`
  repeated FileObject data = 2;
}

message UploadFileRequest {
  bytes file = 1;
  string purpose = 2; // fine-tune, assistants
}

message DeleteFileRequest {
  // The ID of the file to use for this request.
  string file_id = 1;
}

message DeleteFileResponse {
  string id = 1;
  string object = 2;
  bool deleted = 3;
}

message RetrieveFileRequest {
  // The ID of the file to use for this request.
  string file_id = 1;
}


message DownloadFileRequest { // DownloadFileResponse is type of string, thus it cannot be defined in proto files
  // The ID of the file to use for this request.
  string file_id = 1;
}

message FileObject { // UploadFileResponse, RetrieveFileResponse
  string id = 1;
  string object = 2;
  int32 created_at = 3;
  int32 modified_at = 4;
  int32 bytes = 5;
  string filename = 6;
  string purpose = 7;
}
